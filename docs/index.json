[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 49,
    "kind": "external",
    "name": "http~ClientRequest",
    "externalLink": "https://nodejs.org/dist/latest/docs/api/http.html#http_class_http_clientrequest",
    "memberof": "src/.external-nodejs.js",
    "static": true,
    "longname": "src/.external-nodejs.js~http~ClientRequest",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 50,
    "kind": "file",
    "name": "src/App.js",
    "content": "import React, {Component} from 'react';\nimport { Platform, AsyncStorage } from 'react-native';\nimport { createAppContainer } from 'react-navigation';\n\nimport { createRootNavigator } from './config/navigation';\nimport NavigatorService from './config/navigationservice';\nimport SideDrawer from './components/views/helpers/sidedrawer';\n\nimport NotificationMethod from './util/notification';\nimport firebase from 'react-native-firebase';\nimport MapView from './components/views/home-view';\nimport AuthState from './util/authenticationstate';\nimport Database from './util/database';\n\n/**\n * Main entry for the app. Handles the app's notifications.\n */\nexport default class App extends Component {\n\n\t/**\n\t * Component mounted\n\t */\n\tasync componentDidMount() {\n\t\t// TODO : Notifications don't work on ios unless you have a paid account. If on ios, just return\n\t// \tif (Platform.OS === 'ios') {\n\t// \t\treturn;\n\t// \t}\n\n\t// //getInitialNotification get the notification that triggers app open\n\t// \tDatabase.getCurrentUser((userID) => {\n\t// \t\tif (userID != null) {\n\t// \t\t\tconst hasPermission = NotificationMethod.checkPermission();\n\t// \t\t}\n\t// \t});\n\n\t// \t// const notificationOpen: NotificationOpen = await firebase.notifications().getInitialNotification();\n\n\t// \tfirebase.notifications().getInitialNotification().then((notificationOpen: NotificationOpen) => {\n\n\t// \t\tif (notificationOpen) {\n\t// \t\t\tconst action = notificationOpen.action;\n\t// \t\t\tconst notification: Notification = notificationOpen.notification;\n\t// \t\t\tif (notification._body == undefined) {\n\t// \t\t\t\tconsole.log('no noti');\n\t// \t\t\t} else {\n\t// \t\t\t\tconsole.log('has noti');\n\t// \t\t\t\tconst bikeID = \"-LaaRyLnovrtxlh5WUu-\";\n\t// \t\t\t\tconst params = {\n\t// \t\t\t\t\tid: bikeID,\n\t// \t\t\t\t\tfrom: 'Map'\n\t// \t\t\t\t}\n\t// \t\t\t\tNavigatorService.navigate('BikeDetails',params);\n\t// \t\t\t}\n\t// \t\t}\n\n\t// \t});\n\n\t// \tif (Platform.OS !== 'ios') {\n\t// \t\t// Create the channel\n\t// \t\tconst channel = NotificationMethod.createChannel();\n\t// \t\tfirebase.notifications().android.createChannel(channel);\n\t// \t}\n\n\t// \t// This listener is called when the app displays a notification\n\t// \tthis.notificationDisplayedListener = firebase.notifications().onNotificationDisplayed((notification: Notification) => {\n\t// \t\tconsole.log('displayed');\n\t// \t\tconsole.log(AuthState.currentUserID);\n\t// \t});\n\n\t// \t// This listener is called when the app receives a notification\n\t// \tthis.notificationListener = firebase.notifications().onNotification((notification: Notification) => {\n\n\t// \t\t// If the platform is Android, there must be a channel (Android feature)\n\t// \t\tnotification\n\t// \t\t\t.android.setChannelId('test-channel');\n\t// \t\tfirebase.notifications()\n\t// \t\t\t.displayNotification(notification);\n\n\t// \t});\n\n\t// \t// This listener is called when the user opens a notification\n\t// \tthis.notificationOpenedListener = firebase.notifications().onNotificationOpened((notificationOpen: NotificationOpen) => {\n\t// \t\tconst action = notificationOpen.action;\n\t// \t\tconsole.log('noOpend');\n\t// \t\tconst notification: Notification = notificationOpen.notification;\n\n\t// \t\tfirebase.notifications().removeAllDeliveredNotifications();\n\n\t// \t\t// code for getting data from notification\n\n\t// \t\t//test bike id\n\t// \t\tconst bikeID = \"-LaaRyLnovrtxlh5WUu-\";\n\t// \t\tconst params ={\n\t// \t\t\tid: bikeID,\n\t// \t\t\tfrom: 'Map'\n\t// \t\t}\n\t// \t\tNavigatorService.navigate('BikeDetails',params);\n\t\t// });\n\t}\n\n\t/**\n\t * Component is about to unmount\n\t */\n\tcomponentWillUnmount() {\n\t\t// TODO : Notifications don't work on ios unless you have a paid account. If on ios, just return\n\t\tif (Platform === 'ios') {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.notificationDisplayedListener();\n\t\tthis.notificationListener();\n\t\tthis.notificationOpenedListener();\n\t}\n\n\n\t/**\n\t * Render the main content in the side drawer.\n\t */\n\trender() {\n\t\tconst Navigator = createAppContainer(createRootNavigator());\n\t\t// Wrap the navigator in the side drawer otherwise it won't work.\n\t\t// Need to add a top level navigator reference to be able to call other components from the drawer\n\t\t// return <SideDrawer renderMainContent={() => {\n\t\t// \treturn (\n\t\t// \t\t<Navigator \n\t\t// \t\t\tref={(navigatorRef) => {\n\t\t// \t\t\t\tNavigatorService.setTopLevelNavigator(navigatorRef);\n\t\t// \t\t\t}} \n\t\t// \t\t/>\n\t\t// \t)}\n\t\t// }/>\n\t}\n}",
    "static": true,
    "longname": "/Users/seanr/Downloads/temp/src/App.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 51,
    "kind": "class",
    "name": "App",
    "memberof": "src/App.js",
    "static": true,
    "longname": "src/App.js~App",
    "access": "public",
    "export": true,
    "importPath": "PedalPatrol/src/App.js",
    "importStyle": "App",
    "description": "Main entry for the app. Handles the app's notifications.",
    "lineNumber": 18,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 52,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "src/App.js~App",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/App.js~App#componentDidMount",
    "access": "public",
    "description": "Component mounted",
    "lineNumber": 23,
    "params": [],
    "return": null
  },
  {
    "__docId__": 53,
    "kind": "method",
    "name": "componentWillUnmount",
    "memberof": "src/App.js~App",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/App.js~App#componentWillUnmount",
    "access": "public",
    "description": "Component is about to unmount",
    "lineNumber": 104,
    "params": [],
    "return": null
  },
  {
    "__docId__": 54,
    "kind": "method",
    "name": "render",
    "memberof": "src/App.js~App",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/App.js~App#render",
    "access": "public",
    "description": "Render the main content in the side drawer.",
    "lineNumber": 119,
    "params": [],
    "return": null
  },
  {
    "__docId__": 55,
    "kind": "file",
    "name": "src/assets/static/pedal-patrol-privacy-policy.js",
    "content": "export default {\n    \"PrivacyPolicyHTML\": \"<h1>Privacy Policy</h1> <p>Effective date: March 31, 2019</p> <p>Pedal Patrol ('us', 'we', or 'our') operates the Pedal Patrol mobile application (hereinafter referred to as the 'Service').</p> <p>This page informs you of our policies regarding the collection, use, and disclosure of personal data when you use our Service and the choices you have associated with that data. The Privacy Policy for Pedal Patrol has been created with the help of <a href='https://termsfeed.com/privacy-policy/generator/'>TermsFeed Privacy Policy Generator</a>.</p> <p>We use your data to provide and improve the Service. By using the Service, you agree to the collection and use of information in accordance with this policy. Unless otherwise defined in this Privacy Policy, the terms used in this Privacy Policy have the same meanings as in our Terms and Conditions.</p> <h2>Definitions</h2> <ul> <li> <p><strong>Service</strong></p> <p>Service is the Pedal Patrol mobile application operated by Pedal Patrol</p> </li> <li> <p><strong>Personal Data</strong></p> <p>Personal Data means data about a living individual who can be identified from those data (or from those and other information either in our possession or likely to come into our possession).</p> </li> <li> <p><strong>Usage Data</strong></p> <p>Usage Data is data collected automatically either generated by the use of the Service or from the Service infrastructure itself (for example, the duration of a page visit).</p> </li> <li> <p><strong>Cookies</strong></p> <p>Cookies are small files stored on your device (computer or mobile device).</p> </li> </ul> <h2>Information Collection and Use</h2> <p>We collect several different types of information for various purposes to provide and improve our Service to you.</p> <h3>Types of Data Collected</h3> <h4>Personal Data</h4> <p>While using our Service, we may ask you to provide us with certain personally identifiable information that can be used to contact or identify you ('Personal Data'). Personally identifiable information may include, but is not limited to:</p> <ul> <li>Email address</li><li>First name and last name</li><li>Phone number</li><li>Cookies and Usage Data</li><li>Current Location</li> </ul> <h4>Usage Data</h4> <p>When you access the Service by or through a mobile device, we may collect certain information automatically, including, but not limited to, the type of mobile device you use, your mobile device unique ID, the IP address of your mobile device, your mobile operating system, the type of mobile Internet browser you use, unique device identifiers and other diagnostic data ('Usage Data').</p> <h4>Tracking & Cookies Data</h4> <p>We use cookies and similar tracking technologies to track the activity on our Service and we hold certain information.</p> <p>Cookies are files with a small amount of data which may include an anonymous unique identifier. Cookies are sent to your browser from a website and stored on your device. Other tracking technologies are also used such as beacons, tags and scripts to collect and track information and to improve and analyse our Service.</p> <p>You can instruct your browser to refuse all cookies or to indicate when a cookie is being sent. However, if you do not accept cookies, you may not be able to use some portions of our Service.</p> <p>Examples of Cookies we use:</p> <ul> <li><strong>Session Cookies.</strong> We use Session Cookies to operate our Service.</li> <li><strong>Preference Cookies.</strong> We use Preference Cookies to remember your preferences and various settings.</li> <li><strong>Security Cookies.</strong> We use Security Cookies for security purposes.</li> </ul> <h2>Use of Data</h2> <p>Pedal Patrol uses the collected data for various purposes:</p> <ul> <li>To provide and maintain the Service</li> <li>To notify you about changes to our Service</li> <li>To allow you to participate in interactive features of our Service when you choose to do so</li> <li>To provide customer care and support</li> <li>To provide analysis or valuable information so that we can improve the Service</li> <li>To monitor the usage of the Service</li> <li>To detect, prevent and address technical issues</li> </ul> <h2>Transfer Of Data</h2> <p>Your information, including Personal Data, may be transferred to - and maintained on - computers located outside of your state, province, country or other governmental jurisdiction where the data protection laws may differ than those from your jurisdiction.</p> <p>If you are located outside Canada and choose to provide information to us, please note that we transfer the data, including Personal Data, to Canada and process it there.</p> <p>Your consent to this Privacy Policy followed by your submission of such information represents your agreement to that transfer.</p> <p>Pedal Patrol will take all steps reasonably necessary to ensure that your data is treated securely and in accordance with this Privacy Policy and no transfer of your Personal Data will take place to an organization or a country unless there are adequate controls in place including the security of your data and other personal information.</p> <h2>Disclosure Of Data</h2> <h3>Legal Requirements</h3> <p>Pedal Patrol may disclose your Personal Data in the good faith belief that such action is necessary to:</p> <ul> <li>To comply with a legal obligation</li> <li>To protect and defend the rights or property of Pedal Patrol</li> <li>To prevent or investigate possible wrongdoing in connection with the Service</li> <li>To protect the personal safety of users of the Service or the public</li> <li>To protect against legal liability</li> </ul> <p>As an European citizen, under GDPR, you have certain individual rights. You can learn more about these guides in the <a href='https://termsfeed.com/blog/gdpr/#Individual_Rights_Under_the_GDPR'>GDPR Guide</a>.</p> <h2>Security of Data</h2> <p>The security of your data is important to us but remember that no method of transmission over the Internet or method of electronic storage is 100% secure. While we strive to use commercially acceptable means to protect your Personal Data, we cannot guarantee its absolute security.</p> <h2>Service Providers</h2> <p>We may employ third party companies and individuals to facilitate our Service ('Service Providers'), to provide the Service on our behalf, to perform Service-related services or to assist us in analyzing how our Service is used.</p> <p>These third parties have access to your Personal Data only to perform these tasks on our behalf and are obligated not to disclose or use it for any other purpose.</p> <h2>Links to Other Sites</h2> <p>Our Service may contain links to other sites that are not operated by us. If you click a third party link, you will be directed to that third party's site. We strongly advise you to review the Privacy Policy of every site you visit.</p> <p>We have no control over and assume no responsibility for the content, privacy policies or practices of any third party sites or services.</p> <h2>Children's Privacy</h2> <p>Our Service does not address anyone under the age of 18 ('Children').</p> <p>We do not knowingly collect personally identifiable information from anyone under the age of 18. If you are a parent or guardian and you are aware that your Child has provided us with Personal Data, please contact us. If we become aware that we have collected Personal Data from children without verification of parental consent, we take steps to remove that information from our servers.</p> <h2>Changes to This Privacy Policy</h2> <p>We may update our Privacy Policy from time to time. We will notify you of any changes by posting the new Privacy Policy on this page.</p> <p>We will let you know via email and/or a prominent notice on our Service, prior to the change becoming effective and update the 'effective date' at the top of this Privacy Policy.</p> <p>You are advised to review this Privacy Policy periodically for any changes. Changes to this Privacy Policy are effective when they are posted on this page.</p> <h2>Contact Us</h2> <p>If you have any questions about this Privacy Policy, please contact us:</p> <ul> <li>By email: pedalpatrolapp@gmail.com</li> </ul>\"\n}",
    "static": true,
    "longname": "/Users/seanr/Downloads/temp/src/assets/static/pedal-patrol-privacy-policy.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 56,
    "kind": "file",
    "name": "src/components/models/alert-model.js",
    "content": "import Model from './model';\nimport Database from '../../util/database';\nimport AuthState from '../../util/authenticationstate';\nimport TimeUtil from '../../util/timeutility';\n\n/**\n * Class for the alert model to be used by the alert Presenter\n * @extends Model \n */\nclass AlertModel extends Model {\n\t/**\n\t * Creates an instance of AlertModel. Initializes , creates an observerlist,\n\t * and registers an on read from the database.\n\t *\n\t * @constructor\n\t */\n\tconstructor() {\n\t\tsuper();\n\t\t\n\t\tthis.listener = null;\n\t\tthis._data = {data: []};\n\t\tthis._activeBookmarks = [];\n\t\tthis._callback = this._defaultCallback;\n\t\tthis._createObserverList();\n\t\tthis._registerDBReadListener();\n\t}\n\n\t/**\n\t * Default callback\n\t */\n\t_defaultCallback(message) {\n\t\tconsole.log(message);\n\t}\n\n\t/**\n\t * Set the model's callback to a new callback. This callback can be used anywhere and is usually passed in from a presenter.\n\t *\n\t * @param {Function} callback - A callback to run when certain code is executed\n\t */\n\tsetCallback(callback) {\n\t\tthis._callback = callback;\n\t}\n\n\t/**\n\t * Get method for presenters to get data.\n\t *\n\t * @return {Object} data stored in the model\n\t */\n\tget() {\n\t\treturn {...this._data} // immutable\n\t}\n\n\t/**\n\t * Return the number of notifications.\n\t *\n\t * @return {Number} The number of notifications\n\t */\n\tgetNotificationsCount() {\n\t\treturn this._data.numNotifications;\n\t}\n\n\t/**\n\t * Register an 'on' read from the database, supplying the callback when the database has changed.\n\t */\n\t_registerDBReadListener() {\n\t\tthis.listener = Database.readBikeDataOn((snapshot) => {\n\t\t\t// console.log(snapshot.val());\n\t\t\tthis._insertDataOnRead(snapshot.val());\n\t\t\tthis.moveTimeDataToFront();\n\t\t});\n\t}\n\n\t/**\n\t * Toggle the database listener off and then on again to get the data again.\n\t * TODO : Better method to do this?\n\t */\n\ttoggleListeners() {\n\t\tif (this.listener != null) {\n\t\t\tDatabase.readBikeDataOff(this.listener);\n\t\t\tthis._registerDBReadListener();\n\t\t}\n\t}\n\n\t/**\n\t * Insert data into the data object when data has changed from the database\n\t *\n\t * @param {Object} databaseData - Each data item is an object within the overall object\n\t */\n\t_insertDataOnRead(databaseData) {\n\t\tlet tempData = {data:[]};\n\t\tlet dataID = 0;\n\t\tconst currentUser = AuthState.getCurrentUserID();\n\n\t\tif (databaseData != null) { // Check if there are objects in the database\n\t\t\tfor (let val in databaseData) {\n\t\t\t\tif (!databaseData[val].hasOwnProperty('id')) { // Make sure id exists, otherwise skip\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (currentUser == null || databaseData[val].owner !== currentUser) {\n\t\t\t\t\t// console.log(currentUser)\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (databaseData[val].hasOwnProperty('found') && databaseData[val].found) {\n\t\t\t\t\tdatabaseData[val].dataID = dataID++;\n\t\t\t\t\t// Add timeago and datetime formatted info\n\t\t\t\t\tdatabaseData[val].timeago = TimeUtil.getTimeAgoFromMilliseconds(databaseData[val].milliseconds);\n\t\t\t\t\tdatabaseData[val].datetime = TimeUtil.getDateFormatFromDateTime(databaseData[val].milliseconds);\n\t\t\t\t\ttempData.data.push(databaseData[val]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._data = tempData;\n\t\t}\n\t}\n\n\t/**\n\t * Recalculates the 'timeago' property of the object, based on the milliseconds.\n\t */\n\trecalculateTimeAgo() {\n\t\tlet tempData = Object.assign(this._data.data);\n\t\tlet dataID = 0;\n\t\tfor (let i=0; i < tempData.length; i++) {\n\t\t\ttempData[i].dataID = dataID++;\n\t\t\t// Convert back to timeago from milliseconds\n\t\t\ttempData[i].timeago = TimeUtil.getTimeAgoFromMilliseconds(tempData[i].milliseconds);\n\t\t}\n\t\tthis._data.data = Object.assign(tempData);\n\t}\n\n\n\t/**\n\t * Moves the bookmarked data to the front of the list.\n\t */\n\tmoveTimeDataToFront() {\n\t\tif (typeof this._data !== \"undefined\" && this._data != undefined) {\n\t\t\tconst temp = this._data.data;\n\n\t\t\t// Reverse the lists because we want latest time first\n\t\t\tconst sortedData = TimeUtil.sortOnTime(temp).reverse();\n\n\t\t\tthis._data.data = sortedData;\n\t\t\tthis._data.numNotifications = sortedData.length;\n\t\t\tthis._notifyAll(this._data);\n\t\t}\n\t}\n\n\t/**\n\t * Update method for presenters to update the model's data.\n\t *\n\t * @param {Object} newData - New data to add\n\t */\n\tupdate(newData) {\n\t\tDatabase.editBikeData(newData, (data) => {\n\t\t\t// console.log(data);\n\t\t\tthis._callback(typeof data !== 'undefined' && data !== undefined);\n\t\t},(error) => {\n\t\t\tconsole.log(error);\n\t\t\tthis._callback(false);\n\t\t\t// this._callback(false);\n\t\t});\n\t}\n}\n\nexport default AlertModel;",
    "static": true,
    "longname": "/Users/seanr/Downloads/temp/src/components/models/alert-model.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 57,
    "kind": "class",
    "name": "AlertModel",
    "memberof": "src/components/models/alert-model.js",
    "static": true,
    "longname": "src/components/models/alert-model.js~AlertModel",
    "access": "public",
    "export": true,
    "importPath": "PedalPatrol/src/components/models/alert-model.js",
    "importStyle": "AlertModel",
    "description": "Class for the alert model to be used by the alert Presenter",
    "lineNumber": 10,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 58,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/components/models/alert-model.js~AlertModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/alert-model.js~AlertModel#constructor",
    "access": "public",
    "description": "Creates an instance of AlertModel. Initializes , creates an observerlist,\nand registers an on read from the database.",
    "lineNumber": 17,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ]
  },
  {
    "__docId__": 59,
    "kind": "member",
    "name": "listener",
    "memberof": "src/components/models/alert-model.js~AlertModel",
    "static": false,
    "longname": "src/components/models/alert-model.js~AlertModel#listener",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 60,
    "kind": "member",
    "name": "_data",
    "memberof": "src/components/models/alert-model.js~AlertModel",
    "static": false,
    "longname": "src/components/models/alert-model.js~AlertModel#_data",
    "access": "private",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "{\"data\": *}"
      ]
    }
  },
  {
    "__docId__": 61,
    "kind": "member",
    "name": "_activeBookmarks",
    "memberof": "src/components/models/alert-model.js~AlertModel",
    "static": false,
    "longname": "src/components/models/alert-model.js~AlertModel#_activeBookmarks",
    "access": "private",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 62,
    "kind": "member",
    "name": "_callback",
    "memberof": "src/components/models/alert-model.js~AlertModel",
    "static": false,
    "longname": "src/components/models/alert-model.js~AlertModel#_callback",
    "access": "private",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 63,
    "kind": "method",
    "name": "_defaultCallback",
    "memberof": "src/components/models/alert-model.js~AlertModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/alert-model.js~AlertModel#_defaultCallback",
    "access": "private",
    "description": "Default callback",
    "lineNumber": 31,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 64,
    "kind": "method",
    "name": "setCallback",
    "memberof": "src/components/models/alert-model.js~AlertModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/alert-model.js~AlertModel#setCallback",
    "access": "public",
    "description": "Set the model's callback to a new callback. This callback can be used anywhere and is usually passed in from a presenter.",
    "lineNumber": 40,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "A callback to run when certain code is executed"
      }
    ],
    "return": null
  },
  {
    "__docId__": 66,
    "kind": "method",
    "name": "get",
    "memberof": "src/components/models/alert-model.js~AlertModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/alert-model.js~AlertModel#get",
    "access": "public",
    "description": "Get method for presenters to get data.",
    "lineNumber": 49,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "data stored in the model"
    },
    "params": []
  },
  {
    "__docId__": 67,
    "kind": "method",
    "name": "getNotificationsCount",
    "memberof": "src/components/models/alert-model.js~AlertModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/alert-model.js~AlertModel#getNotificationsCount",
    "access": "public",
    "description": "Return the number of notifications.",
    "lineNumber": 58,
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "The number of notifications"
    },
    "params": []
  },
  {
    "__docId__": 68,
    "kind": "method",
    "name": "_registerDBReadListener",
    "memberof": "src/components/models/alert-model.js~AlertModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/alert-model.js~AlertModel#_registerDBReadListener",
    "access": "private",
    "description": "Register an 'on' read from the database, supplying the callback when the database has changed.",
    "lineNumber": 65,
    "params": [],
    "return": null
  },
  {
    "__docId__": 70,
    "kind": "method",
    "name": "toggleListeners",
    "memberof": "src/components/models/alert-model.js~AlertModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/alert-model.js~AlertModel#toggleListeners",
    "access": "public",
    "description": "Toggle the database listener off and then on again to get the data again.\nTODO : Better method to do this?",
    "lineNumber": 77,
    "params": [],
    "return": null
  },
  {
    "__docId__": 71,
    "kind": "method",
    "name": "_insertDataOnRead",
    "memberof": "src/components/models/alert-model.js~AlertModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/alert-model.js~AlertModel#_insertDataOnRead",
    "access": "private",
    "description": "Insert data into the data object when data has changed from the database",
    "lineNumber": 89,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "databaseData",
        "description": "Each data item is an object within the overall object"
      }
    ],
    "return": null
  },
  {
    "__docId__": 73,
    "kind": "method",
    "name": "recalculateTimeAgo",
    "memberof": "src/components/models/alert-model.js~AlertModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/alert-model.js~AlertModel#recalculateTimeAgo",
    "access": "public",
    "description": "Recalculates the 'timeago' property of the object, based on the milliseconds.",
    "lineNumber": 120,
    "params": [],
    "return": null
  },
  {
    "__docId__": 74,
    "kind": "method",
    "name": "moveTimeDataToFront",
    "memberof": "src/components/models/alert-model.js~AlertModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/alert-model.js~AlertModel#moveTimeDataToFront",
    "access": "public",
    "description": "Moves the bookmarked data to the front of the list.",
    "lineNumber": 135,
    "params": [],
    "return": null
  },
  {
    "__docId__": 75,
    "kind": "method",
    "name": "update",
    "memberof": "src/components/models/alert-model.js~AlertModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/alert-model.js~AlertModel#update",
    "access": "public",
    "description": "Update method for presenters to update the model's data.",
    "lineNumber": 153,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "newData",
        "description": "New data to add"
      }
    ],
    "return": null
  },
  {
    "__docId__": 76,
    "kind": "file",
    "name": "src/components/models/authloading-model.js",
    "content": "import Model from './model';\nimport Database from '../../util/database';\nimport PersistStorage from '../../util/persistentstorage';\nimport AuthState from '../../util/authenticationstate';\nimport NotificationMethod from '../../util/notification';\n\n/**\n * Class for the AuthLoading model to be used by the AuthLoadingPresenter\n * @extends Model\n */\nclass AuthLoadingModel extends Model {\n\t/**\n\t * Creates an instance of AuthLoadingModel and creates an observerlist.\n\t *\n\t * @constructor\n\t */\n\tconstructor(){\n\t\tsuper();\n\t\tthis._createObserverList();\n\t\tthis.unsubscribeAuthListener = this.defaultUnsubscribe;\n\t}\n\n\t/**\n\t * Default stub for unsubscribe function.\n\t */\n\tdefaultUnsubscribe() {\n\t\t// Stub\n\t}\n\n\n\t/**\n\t * Check the authentication state of the user.\n\t *\n\t * @param {Function} onComplete - A callback function to call when authentication has completed\n\t */\n\tasync checkAuthenticationState(onComplete) {\n\t\t// Offline authentication check first, if it fails, then check database\n\t\tawait PersistStorage.retrieveData('userToken', async (userToken) => {\n\t\t\tif (userToken == null || userToken == undefined) {\n\t\t\t\tconsole.log('No user token, checking database authentication...');\n\t\t\t\t// Only check database user if no user token stored\n\t\t\t\tthis.unsubscribeAuthListener = Database.getCurrentUser((userID) => {\n\t\t\t\t\tAuthState.setCurrentUserID(userID);\n\t\t\t\t\tonComplete(userID);\n\t\t\t\t});\t\n\t\t\t} else {\n\t\t\t\tconsole.log('User token found');\n\t\t\t\tAuthState.setCurrentUserID(userToken);\n\t\t\t\tonComplete(userToken);\n\t\t\t}\n\t\t}, (error) => {\n\t\t\tconsole.log(error);\n\t\t\tonComplete(null);\n\t\t});\n\t}\n\n\t/**\n\t * Tries to log out of the database and remove all stored keys.\n\t *\n\t * @param {Function} onSuccess - A callback function on a successful logout\n\t * @param {Function} onFailure - A callback function on a failure to logout\n\t */\n\tlogout(onSuccess, onFailure) {\n\t\tNotificationMethod.removeToken();\n\t\tDatabase.signOut(async () => {\n\t\t\tconst userID = AuthState.getCurrentUserID();\n\t\t\tawait PersistStorage.removeAllData([], (message) => {\n\t\t\t\tconsole.log('All data removed', message);\n\t\t\t}, (error) => {\n\t\t\t\tconsole.log('Error removing data:', error);\n\t\t\t});\n\t\t\tAuthState.setCurrentUserID(null);\n\t\t\tonSuccess();\n\t\t}, (error) => {\n\t\t\tonFailure();\n\t\t\tconsole.log('Logout error');\n\t\t});\n\t}\n}\n\nexport default AuthLoadingModel;",
    "static": true,
    "longname": "/Users/seanr/Downloads/temp/src/components/models/authloading-model.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 77,
    "kind": "class",
    "name": "AuthLoadingModel",
    "memberof": "src/components/models/authloading-model.js",
    "static": true,
    "longname": "src/components/models/authloading-model.js~AuthLoadingModel",
    "access": "public",
    "export": true,
    "importPath": "PedalPatrol/src/components/models/authloading-model.js",
    "importStyle": "AuthLoadingModel",
    "description": "Class for the AuthLoading model to be used by the AuthLoadingPresenter",
    "lineNumber": 11,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 78,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/components/models/authloading-model.js~AuthLoadingModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/authloading-model.js~AuthLoadingModel#constructor",
    "access": "public",
    "description": "Creates an instance of AuthLoadingModel and creates an observerlist.",
    "lineNumber": 17,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ]
  },
  {
    "__docId__": 79,
    "kind": "member",
    "name": "unsubscribeAuthListener",
    "memberof": "src/components/models/authloading-model.js~AuthLoadingModel",
    "static": false,
    "longname": "src/components/models/authloading-model.js~AuthLoadingModel#unsubscribeAuthListener",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 80,
    "kind": "method",
    "name": "defaultUnsubscribe",
    "memberof": "src/components/models/authloading-model.js~AuthLoadingModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/authloading-model.js~AuthLoadingModel#defaultUnsubscribe",
    "access": "public",
    "description": "Default stub for unsubscribe function.",
    "lineNumber": 26,
    "params": [],
    "return": null
  },
  {
    "__docId__": 81,
    "kind": "method",
    "name": "checkAuthenticationState",
    "memberof": "src/components/models/authloading-model.js~AuthLoadingModel",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/components/models/authloading-model.js~AuthLoadingModel#checkAuthenticationState",
    "access": "public",
    "description": "Check the authentication state of the user.",
    "lineNumber": 36,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "onComplete",
        "description": "A callback function to call when authentication has completed"
      }
    ],
    "return": null
  },
  {
    "__docId__": 83,
    "kind": "method",
    "name": "logout",
    "memberof": "src/components/models/authloading-model.js~AuthLoadingModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/authloading-model.js~AuthLoadingModel#logout",
    "access": "public",
    "description": "Tries to log out of the database and remove all stored keys.",
    "lineNumber": 63,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "onSuccess",
        "description": "A callback function on a successful logout"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "onFailure",
        "description": "A callback function on a failure to logout"
      }
    ],
    "return": null
  },
  {
    "__docId__": 84,
    "kind": "file",
    "name": "src/components/models/bike-model.js",
    "content": "import Model from './model';\nimport Database from '../../util/database';\nimport ImageUtil from '../../util/imageutility';\nimport TimeUtil from '../../util/timeutility';\nimport PersistStorage from '../../util/persistentstorage';\nimport AuthState from '../../util/authenticationstate';\n\nconst BIKE_TYPE = ImageUtil.getTypes().BIKE;\n\n/**\n * Class for the bike model to be used by the BikePresenter and AddBikePresenter\n * @extends Model\n */\nclass BikeModel extends Model {\n\t/**\n\t * Creates an instance of BikeModel. Sets the default callback, creates an observerlist,\n\t * and registers an on read from the database.\n\t *\n\t * @constructor\n\t */\n\tconstructor() {\n\t\tsuper();\n\t\tthis._callback = this._defaultCallback;\n\t\tthis.listener = null;\n\t\tthis._data = {data: []};\n\t\tthis._createObserverList();\n\t\tthis._registerDBReadListener();\n\t\tthis._checkForLocalData('data'); // Offline equivalent of _registerDBReadListener, only useful if the user hasn't logged out\t\n\t}\n\n\t/**\n\t * Delete a bike from the database\n\t *\n\t * @param {string} id - A bike id to delete\n\t * @param {Function} callback - A function to call when remove succeeds or fails\n\t */\n\tdeleteBikeByID(id, callback) {\n\t\tconst { index } = this._bikeIDExists(id);\n\t\tconst bike = JSON.parse(JSON.stringify(this._data.data[index]));\n\t\tthis._data.data = this._data.data.filter((el) => el.id !== id);\n\t\tDatabase.removeBikeItem(id, (resultItem) => {\n\t\t\tDatabase.removeImages(bike.thumbnail, (resultImage) => {\n\t\t\t\tcallback(resultItem && resultImage);\n\t\t\t\tthis._notifyAll(null);\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Returns the bike data by providing the bike ID.\n\t *\n\t * @param {string} id - A bike ID\n\t * @return {Object} The data coresponding to the bike id\n\t */\n\t_getBikeByID = (id) => {\n\t\treturn this._data.data.filter((el) => {\n\t\t\treturn el.id === id;\n\t\t})[0];\n\t}\n\n\t/**\n\t * Default callback\n\t */\n\t_defaultCallback(message) {\n\t\tconsole.log(message);\n\t}\n\n\t/**\n\t * Set the model's callback to a new callback. This callback can be used anywhere and is usually passed in from a presenter.\n\t *\n\t * @param {Function} callback - A callback to run when certain code is executed\n\t */\n\tsetCallback(callback) {\n\t\tthis._callback = callback;\n\t}\n\n\t/**\n\t * Register an 'on' read from the database to get updates anytime data changes in the database.\n\t */\n\t_registerDBReadListener() {\n\t\tthis.listener = Database.readBikeDataOn((snapshot) => {\n\t\t\t// console.log(snapshot.val());\n\t\t\tthis._insertDataOnRead(snapshot.val());\n\t\t\tthis._notifyAll(this._data); // Don't supply data to force a refresh by the presenter\n\t\t});\n\t}\n\n\t/**\n\t * Toggle the database listener off and then on again to get the data again.\n\t * TODO : Better method to do this?\n\t */\n\ttoggleListeners() {\n\t\tif (this.listener != null) {\n\t\t\tDatabase.readBikeDataOff(this.listener);\n\t\t\tthis._registerDBReadListener();\n\t\t}\n\t}\n\n\t/**\n\t * Get method for presenters to get data.\n\t *\n\t * @return {Object} data stored in the model\n\t */\n\tget() {\n\t\treturn {...this._data} // Immutable\n\t}\n\n\n\t/**\n\t * Update method for presenters to update the model's data. Datetime and Owner are handled in database class.\n\t * Callback needs to be set with BikeM.setCallback(callback); callback takes in 1 parameter.\n\t *\n\t * @param {Object} newData - New data to add\n\t */\n\tupdate(newData) {\n\t\t// Add ID here\n\t\tif (newData.data.id === '' || newData.data.id === undefined) {\n\t\t\tconsole.log('Fetching new ID...');\n\t\t\tnewData.data.id = Database.getNewBikeID();\n\t\t}\n\n\t\tnewData.data.milliseconds = TimeUtil.getDateTime();\n\n\t\ttry {\n\t\t\tconst {exists, index} = this._bikeDataExists(newData);\n\t\t\tif (exists && this._checkImages(index, newData.data.thumbnail)) {\n\t\t\t\tnewData.data.thumbnail = this._removeIllustrationKey(newData.data.thumbnail);\n\t\t\t\tthis._insertDataOnUpdate(newData, exists, index);\n\t\t\t\tthis._editExistingInDatabase(newData.data, (result) => {this._callback(true); this._notifyAll(this._data);});\n\n\t\t\t} else { \n\t\t\t\tconst { BikeImages } = Database.getImageFolders();\n\n\t\t\t\tnewData.data.stolen = false // true: if bike is stolen; false: if the bike is not stolen or the owner has marked it as found\n\t\t\t\tnewData.data.found = false // true: if stolen=true && bike was found; false: if stolen=false || (stolen=true && bike is not found)\n\n\t\t\t\t// Write to database\n\t\t\t\tthis._writeImageToDBStorage(newData.data.id, newData.data.thumbnail, BikeImages, (uploaded_images, num_defaults) => {\n\t\t\t\t\tnewData.data.thumbnail = uploaded_images;\n\n\t\t\t\t\t// Check if there's actually images \n\t\t\t\t\tif (!ImageUtil.checkImageListValid(uploaded_images)) {\n\t\t\t\t\t\tthis._callback(false);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst {exists, index} = this._bikeDataExists(newData); // Need to recompute each time because would have changed on second image\n\t\t\t\t\tthis._insertDataOnUpdate(newData, exists, index);\n\n\t\t\t\t\t// console.log(result);\n\t\t\t\t\t// console.log(this._data.data);\n\n\t\t\t\t\t// If the number of defaults in the original amount is the same \n\t\t\t\t\tconst finishCallback = ImageUtil.checkNumDefaults(BIKE_TYPE, num_defaults, uploaded_images) ? (result) => {this._callback(result); this._notifyAll(this._data);} : (_) => 'default';\n\n\t\t\t\t\t// variable 'result' - true: ID was found in database so edit it; false: ID not found in database so add it\n\t\t\t\t\t// const dbCall = result ? Database.editBikeData : Database.writeBikeData;\n\t\t\t\t\t// this._addToDatabase(dbCall, newData.data, finishCallback);\n\t\t\t\t\tconst funcCall = exists ? this._editExistingInDatabase : this._writeNewInDatabase;\n\t\t\t\t\tfuncCall(newData.data, finishCallback);\n\n\t\t\t\t}, this._callback);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t\tthis._callback(false);\n\t\t}\n\t}\n\n\t/**\n\t * Checks if there are new images in the bike stored vs what was passed in.\n\t *\n\t * @param {Number} index - The index of the bike in the local data\n\t * @param {List} thumbnails - A list of thumbnails\n\t * @return {Boolean} true: If the thumbnails are the same; false: If the thumbnails are different or if the bike doesn't exist\n\t */\n\t_checkImages(index, thumbnails) {\n\t\tif (index >= 0) {\n\t\t\tconst bike = JSON.parse(JSON.stringify(this._data.data[index]));\n\t\t\tconst bikeThumbnails = ImageUtil.addRemainingDefaults(ImageUtil.getTypes().BIKE, bike.thumbnail);\n\t\t\tconst paramThumbnailsDefaults = ImageUtil.addRemainingDefaults(ImageUtil.getTypes().BIKE, thumbnails);\n\t\t\tconst bikeThumbnailsNoIllustration = this._removeIllustrationKey(bikeThumbnails);\n\t\t\tconst thumbnailsNoIllustration = this._removeIllustrationKey(paramThumbnailsDefaults);\n\t\t\t// console.log(bikeThumbnailsNoIllustration, thumbnailsNoIllustration);\n\n\t\t\treturn JSON.stringify(bikeThumbnailsNoIllustration) === JSON.stringify(thumbnailsNoIllustration);\n\t\t} else {\n\t\t\treturn false; // Bike does not exist\n\t\t}\n\t}\n\n\t/**\n\t * Removes the illustration key from the object and only adds the actual link.\n\t *\n\t * @param {List} thumbnails - A list of thumbnail objects with the property 'illustration'\n\t * @return {List} A list of thumbnails\n\t */\n\t_removeIllustrationKey(thumbnails) {\n\t\tlet new_thumbnails = [];\n\t\tconst DEFAULT_IMAGE = ImageUtil.getDefaultImage(ImageUtil.getTypes().BIKE);\n\t\tfor (let i=0; i < thumbnails.length; i++) {\n\t\t\tif (thumbnails[i] === DEFAULT_IMAGE || (thumbnails[i].hasOwnProperty('illustration') && thumbnails[i].illustration === DEFAULT_IMAGE)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (thumbnails[i].hasOwnProperty('illustration')) {\n\t\t\t\tnew_thumbnails.push(thumbnails[i].illustration);\n\t\t\t} else {\n\t\t\t\tnew_thumbnails.push(thumbnails[i]);\n\t\t\t}\n\t\t}\n\t\treturn new_thumbnails;\n\t}\n\n\t/**\n\t * Write the image to the firebase storage and call the callbacks with the urls that were defined.\n\t *\n\t * @param {Number} id - The id of the bike corresponding to the image\n\t * @param {List} images - A list of objects with the property 'illustration'\n\t * @param {string} imagesFolder - The folder to upload images to\n\t * @param {Function} onSuccess - A callback to call when an image has been successfully uploaded\n\t * @param {Function} onError - A callback to call when an image has failed to upload\n\t */\n\t_writeImageToDBStorage(id, images, imagesFolder, onSuccess, onError) {\n\t\tconst FILE_EXTENSION = '.jpg';\n\t\tlet uploaded_pictures = [];\n\t\tlet count_default = 0;\n\n\t\t// If there are no images, return\n\t\tif (!ImageUtil.checkImageListValid(images)) {\n\t\t\tonError(false);\n\t\t\treturn;\n\t\t}\n\n\t\tfor (let i=0; i < images.length; i++) {\n\t\t\t// Check if there's a default image, if so, skip it\n\t\t\tif (ImageUtil.isDefaultImage(BIKE_TYPE, images[i].illustration)) {\n\t\t\t\tcount_default++;\n\t\t\t\tcontinue;\n\t\t\t} else if (ImageUtil.isAlreadyUploaded(images[i].illustration)) {\n\t\t\t\tuploaded_pictures.push(images[i].illustration);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Name of file is the name of the index and file extension\n\t\t\tconst filename = i + ImageUtil.getFileExtension();\n\t\t\t// Write image to database\n\t\t\tDatabase.writeImage(id, images[i].illustration, filename, imagesFolder, (url) => {\n\t\t\t\tuploaded_pictures.push(url);\n\t\t\t\tonSuccess(uploaded_pictures, count_default);\n\t\t\t\treturn url;\n\t\t\t}, (error) => {\n\t\t\t\tconsole.log(error);\n\t\t\t\tonError(false);\n\t\t\t});\n\t\t}\n\t}\n\n\t// Could generalize _writeNewInDatabase and _editExistingInDatabase into one function\n\t// But there was a problem with assigning the functions to variables so just went with this instead\n\n\t/**\n\t * Write new data in database and call the function callback depending on if it was successful or not.\n\t *\n\t * @param {Object} newData - Data to be written to the database\n\t * @param {Function} callback - A function to call on the success or failure of the call\n\t */\n\t_writeNewInDatabase(newData, callback) {\n\t\treturn Database.writeBikeData(newData, (data) => {\n\t\t\t// console.log(data);\n\t\t\tcallback(typeof data !== 'undefined' && data !== undefined);\n\t\t\t// return typeof data !== 'undefined' && data !== undefined\n\t\t\t// this._callback(typeof data !== 'undefined' && data !== undefined);\n\t\t},(error) => {\n\t\t\tconsole.log(error);\n\t\t\tcallback(false);\n\t\t\t// this._callback(false);\n\t\t});\n\t}\n\n\t/**\n\t * Overwrite existing data in database and call the function callback depending on if it was successful or not.\n\t *\n\t * @param {Object} newData - Data to be written to the database\n\t * @param {Function} callback - A function to call on the success or failure of the call\n\t */\n\t_editExistingInDatabase(newData, callback) {\n\t\treturn Database.editBikeData(newData, (data) => {\n\t\t\t// console.log(data);\n\t\t\tcallback(typeof data !== 'undefined' && data !== undefined);\n\t\t\t// return typeof data !== 'undefined' && data !== undefined;\n\t\t\t// this._callback(typeof data !== 'undefined' && data !== undefined);\n\t\t},(error) => {\n\t\t\tconsole.log(error);\n\t\t\tcallback(false);\n\t\t\t// this._callback(false);\n\t\t});\n\t}\n\n\t/**\n\t * Insert data into the data object on an update trigger (from Presenter).\n\t *\n\t * @param {Object} newData - New data passed in, of the form : {data: []}\n\t * @param {Boolean} exists - If the bike already exists\n\t * @param {Number} index - The index of the bike. Positive if it exists, negative if it doesn't\n\t * @return {Boolean} true: Data was an edited value; false: Data was a new value\n\t */\n\t_insertDataOnUpdate(newData, exists, index) {\n\t\tlet i = 0;\n\t\t// console.log(newData, exists, index);\n\n\t\t// If only one piece, just insert it\n\t\tif (this._data.data.length === 0) {\n\t\t\tthis._data.data.push(newData.data);\n\t\t\treturn false;\n\t\t}\n\n\t\tif (exists && index >= 0) {\n\t\t\tthis._data.data[index] = newData.data;  // Data found, overwrite\n\t\t\treturn true;\n\t\t} else {\n\t\t\tthis._data.data.push(newData.data); // Appends to the list - Use this if only a single piece of data is passed in \n\t\t\treturn false; // Data not found\n\t\t}\n\t}\n\n\t/**\n\t * Checks if the bike exists based on the data of the bike.\n\t * \n\t * @param {Object} bikeData - The data to check\n\t * @return {Boolean, Number} exists: true: If the bike exists; false: otherwise. index - The index of the bike if it exists, -1 if not\n\t */\n\t_bikeDataExists(bikeData) {\n\t\treturn this._bikeIDExists(bikeData.data.id)\n\t}\n\n\t/**\n\t * Checks if the bike exists based on the id.\n\t *\n\t * @param {string} id - The id of a bike\n\t * @return {Boolean, Number} exists: true: If the bike exists; false: otherwise. index - The index of the bike if it exists, -1 if not\n\t */\n\t_bikeIDExists(id) {\n\t\tlet i = 0;\n\t\t// Loop through and see if there's a match, probably a better way to do this with indexOf or filter\n\t\twhile (i < this._data.data.length && this._data.data[i].id !== id) {\n\t\t\ti++;\n\t\t}\n\t\tconst exists = i !== this._data.data.length;\n\t\tconst index = exists ? i : -1;\n\t\treturn { exists, index };\n\t}\n\n\t/**\n\t * Checks if an object has a certain property.\n\t * \n\t * @param {Object} obj - An object to check\n\t * @param {string} property - The name of a property\n\t * @return {Boolean} true: if the object has the property; false: otherwise\n\t */\n\t_hasProperty(obj, property) {\n\t\treturn obj.hasOwnProperty(property);\n\t}\n\n\t/**\n\t * Insert data into the data object on a read from the database.\n\t *\n\t * @param {Object} databaseData - An objects of objects containing data from the database.\n\t */\n\t_insertDataOnRead(databaseData) {\n\t\tlet tempData = {data:[]};\n\t\tlet dataID = 0;\n\t\tconst currentUser = AuthState.getCurrentUserID();\n\n\t\tif (databaseData != null) { // Check if there are objects in the database\n\t\t\tfor (let val in databaseData) {\n\t\t\t\tif (!this._hasProperty(databaseData[val], 'id')) { // If it doesn't have an id, skip it because it isn't valid\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Bike page only displays current user\n\t\t\t\tif (currentUser == null || currentUser != databaseData[val].owner) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Arrays don't show up in firebase so we manually have to insert to make sure we don't get errors in the view\n\t\t\t\tif (!this._hasProperty(databaseData[val], 'colour')) {\n\t\t\t\t\tdatabaseData[val].colour = [];\n\t\t\t\t}\n\t\t\t\tif (!this._hasProperty(databaseData[val], 'thumbnail')) {\n\t\t\t\t\tdatabaseData[val].thumbnail = [];\n\t\t\t\t}\n\n\t\t\t\tdatabaseData[val].dataID = dataID; // Assign a dataID which is just an incremental temporary value\n\t\t\t\ttempData.data.push(databaseData[val]);\n\t\t\t\tdataID++;\n\t\t\t}\n\t\t\tthis._data = tempData;\n\t\t\tthis._saveDataToLocalStorage('data', this._data);\n\t\t}\n\t}\n\n\t/**\n\t * Save data to local storage.\n\t *\n\t * @param {string} key - A key to store the data under\n\t * @param {Object} data - The data to store \n\t */\n\tasync _saveDataToLocalStorage(key, data) {\n\t\tawait PersistStorage.retrieveData(key, (retrievedData) => {\n\t\t\tif (retrievedData != [] && retrievedData != null && retrievedData != undefined) {\n\t\t\t\t// We only want to store data if there isn't already data.\n\t\t\t\tPersistStorage.storeData(key, JSON.stringify(data), (error) => {\n\t\t\t\t\tconsole.log(error);\n\t\t\t\t});\n\t\t\t}\n\t\t}, (error) => {\n\t\t\tconsole.log(error);\n\t\t});\n\t}\n\n\t/**\n\t * Checks if local data is stored, and if so, update the data. This is because we don't wait for this data\n\t * when authenticating and the user can see their bikes if offline.\n\t *\n\t * @param {string} key - Key to get data for \n\t */\n\tasync _checkForLocalData(key) {\n\t\tawait PersistStorage.retrieveData(key, (data) => {\n\t\t\tif (data != null) {\n\t\t\t\tthis._data = JSON.parse(data);\n\t\t\t\tthis._notifyAll(null);\n\t\t\t}\n\t\t}, (error) => {\n\t\t\tconsole.log(error);\n\t\t});\n\t}\n}\n\nexport default BikeModel;",
    "static": true,
    "longname": "/Users/seanr/Downloads/temp/src/components/models/bike-model.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 85,
    "kind": "variable",
    "name": "BIKE_TYPE",
    "memberof": "src/components/models/bike-model.js",
    "static": true,
    "longname": "src/components/models/bike-model.js~BIKE_TYPE",
    "access": "public",
    "export": false,
    "importPath": "PedalPatrol/src/components/models/bike-model.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 86,
    "kind": "class",
    "name": "BikeModel",
    "memberof": "src/components/models/bike-model.js",
    "static": true,
    "longname": "src/components/models/bike-model.js~BikeModel",
    "access": "public",
    "export": true,
    "importPath": "PedalPatrol/src/components/models/bike-model.js",
    "importStyle": "BikeModel",
    "description": "Class for the bike model to be used by the BikePresenter and AddBikePresenter",
    "lineNumber": 14,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 87,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/components/models/bike-model.js~BikeModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/bike-model.js~BikeModel#constructor",
    "access": "public",
    "description": "Creates an instance of BikeModel. Sets the default callback, creates an observerlist,\nand registers an on read from the database.",
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ]
  },
  {
    "__docId__": 88,
    "kind": "member",
    "name": "_callback",
    "memberof": "src/components/models/bike-model.js~BikeModel",
    "static": false,
    "longname": "src/components/models/bike-model.js~BikeModel#_callback",
    "access": "private",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 89,
    "kind": "member",
    "name": "listener",
    "memberof": "src/components/models/bike-model.js~BikeModel",
    "static": false,
    "longname": "src/components/models/bike-model.js~BikeModel#listener",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 90,
    "kind": "member",
    "name": "_data",
    "memberof": "src/components/models/bike-model.js~BikeModel",
    "static": false,
    "longname": "src/components/models/bike-model.js~BikeModel#_data",
    "access": "private",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "{\"data\": *}"
      ]
    }
  },
  {
    "__docId__": 91,
    "kind": "method",
    "name": "deleteBikeByID",
    "memberof": "src/components/models/bike-model.js~BikeModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/bike-model.js~BikeModel#deleteBikeByID",
    "access": "public",
    "description": "Delete a bike from the database",
    "lineNumber": 37,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "A bike id to delete"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "A function to call when remove succeeds or fails"
      }
    ],
    "return": null
  },
  {
    "__docId__": 92,
    "kind": "member",
    "name": "_getBikeByID",
    "memberof": "src/components/models/bike-model.js~BikeModel",
    "static": false,
    "longname": "src/components/models/bike-model.js~BikeModel#_getBikeByID",
    "access": "private",
    "description": "Returns the bike data by providing the bike ID.",
    "lineNumber": 55,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "A bike ID"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The data coresponding to the bike id"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 93,
    "kind": "method",
    "name": "_defaultCallback",
    "memberof": "src/components/models/bike-model.js~BikeModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/bike-model.js~BikeModel#_defaultCallback",
    "access": "private",
    "description": "Default callback",
    "lineNumber": 64,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 94,
    "kind": "method",
    "name": "setCallback",
    "memberof": "src/components/models/bike-model.js~BikeModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/bike-model.js~BikeModel#setCallback",
    "access": "public",
    "description": "Set the model's callback to a new callback. This callback can be used anywhere and is usually passed in from a presenter.",
    "lineNumber": 73,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "A callback to run when certain code is executed"
      }
    ],
    "return": null
  },
  {
    "__docId__": 96,
    "kind": "method",
    "name": "_registerDBReadListener",
    "memberof": "src/components/models/bike-model.js~BikeModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/bike-model.js~BikeModel#_registerDBReadListener",
    "access": "private",
    "description": "Register an 'on' read from the database to get updates anytime data changes in the database.",
    "lineNumber": 80,
    "params": [],
    "return": null
  },
  {
    "__docId__": 98,
    "kind": "method",
    "name": "toggleListeners",
    "memberof": "src/components/models/bike-model.js~BikeModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/bike-model.js~BikeModel#toggleListeners",
    "access": "public",
    "description": "Toggle the database listener off and then on again to get the data again.\nTODO : Better method to do this?",
    "lineNumber": 92,
    "params": [],
    "return": null
  },
  {
    "__docId__": 99,
    "kind": "method",
    "name": "get",
    "memberof": "src/components/models/bike-model.js~BikeModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/bike-model.js~BikeModel#get",
    "access": "public",
    "description": "Get method for presenters to get data.",
    "lineNumber": 104,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "data stored in the model"
    },
    "params": []
  },
  {
    "__docId__": 100,
    "kind": "method",
    "name": "update",
    "memberof": "src/components/models/bike-model.js~BikeModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/bike-model.js~BikeModel#update",
    "access": "public",
    "description": "Update method for presenters to update the model's data. Datetime and Owner are handled in database class.\nCallback needs to be set with BikeM.setCallback(callback); callback takes in 1 parameter.",
    "lineNumber": 115,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "newData",
        "description": "New data to add"
      }
    ],
    "return": null
  },
  {
    "__docId__": 101,
    "kind": "method",
    "name": "_checkImages",
    "memberof": "src/components/models/bike-model.js~BikeModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/bike-model.js~BikeModel#_checkImages",
    "access": "private",
    "description": "Checks if there are new images in the bike stored vs what was passed in.",
    "lineNumber": 177,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": "The index of the bike in the local data"
      },
      {
        "nullable": null,
        "types": [
          "List"
        ],
        "spread": false,
        "optional": false,
        "name": "thumbnails",
        "description": "A list of thumbnails"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true: If the thumbnails are the same; false: If the thumbnails are different or if the bike doesn't exist"
    }
  },
  {
    "__docId__": 102,
    "kind": "method",
    "name": "_removeIllustrationKey",
    "memberof": "src/components/models/bike-model.js~BikeModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/bike-model.js~BikeModel#_removeIllustrationKey",
    "access": "private",
    "description": "Removes the illustration key from the object and only adds the actual link.",
    "lineNumber": 198,
    "params": [
      {
        "nullable": null,
        "types": [
          "List"
        ],
        "spread": false,
        "optional": false,
        "name": "thumbnails",
        "description": "A list of thumbnail objects with the property 'illustration'"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "List"
      ],
      "spread": false,
      "description": "A list of thumbnails"
    }
  },
  {
    "__docId__": 103,
    "kind": "method",
    "name": "_writeImageToDBStorage",
    "memberof": "src/components/models/bike-model.js~BikeModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/bike-model.js~BikeModel#_writeImageToDBStorage",
    "access": "private",
    "description": "Write the image to the firebase storage and call the callbacks with the urls that were defined.",
    "lineNumber": 223,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "The id of the bike corresponding to the image"
      },
      {
        "nullable": null,
        "types": [
          "List"
        ],
        "spread": false,
        "optional": false,
        "name": "images",
        "description": "A list of objects with the property 'illustration'"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "imagesFolder",
        "description": "The folder to upload images to"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "onSuccess",
        "description": "A callback to call when an image has been successfully uploaded"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "onError",
        "description": "A callback to call when an image has failed to upload"
      }
    ],
    "return": null
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "_writeNewInDatabase",
    "memberof": "src/components/models/bike-model.js~BikeModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/bike-model.js~BikeModel#_writeNewInDatabase",
    "access": "private",
    "description": "Write new data in database and call the function callback depending on if it was successful or not.",
    "lineNumber": 267,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "newData",
        "description": "Data to be written to the database"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "A function to call on the success or failure of the call"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 105,
    "kind": "method",
    "name": "_editExistingInDatabase",
    "memberof": "src/components/models/bike-model.js~BikeModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/bike-model.js~BikeModel#_editExistingInDatabase",
    "access": "private",
    "description": "Overwrite existing data in database and call the function callback depending on if it was successful or not.",
    "lineNumber": 286,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "newData",
        "description": "Data to be written to the database"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "A function to call on the success or failure of the call"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 106,
    "kind": "method",
    "name": "_insertDataOnUpdate",
    "memberof": "src/components/models/bike-model.js~BikeModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/bike-model.js~BikeModel#_insertDataOnUpdate",
    "access": "private",
    "description": "Insert data into the data object on an update trigger (from Presenter).",
    "lineNumber": 307,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "newData",
        "description": "New data passed in, of the form : {data: []}"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "exists",
        "description": "If the bike already exists"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": "The index of the bike. Positive if it exists, negative if it doesn't"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true: Data was an edited value; false: Data was a new value"
    }
  },
  {
    "__docId__": 107,
    "kind": "method",
    "name": "_bikeDataExists",
    "memberof": "src/components/models/bike-model.js~BikeModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/bike-model.js~BikeModel#_bikeDataExists",
    "access": "private",
    "description": "Checks if the bike exists based on the data of the bike.",
    "lineNumber": 332,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "bikeData",
        "description": "The data to check"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean, Number"
      ],
      "spread": false,
      "description": "exists: true: If the bike exists; false: otherwise. index - The index of the bike if it exists, -1 if not"
    }
  },
  {
    "__docId__": 108,
    "kind": "method",
    "name": "_bikeIDExists",
    "memberof": "src/components/models/bike-model.js~BikeModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/bike-model.js~BikeModel#_bikeIDExists",
    "access": "private",
    "description": "Checks if the bike exists based on the id.",
    "lineNumber": 342,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "The id of a bike"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean, Number"
      ],
      "spread": false,
      "description": "exists: true: If the bike exists; false: otherwise. index - The index of the bike if it exists, -1 if not"
    }
  },
  {
    "__docId__": 109,
    "kind": "method",
    "name": "_hasProperty",
    "memberof": "src/components/models/bike-model.js~BikeModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/bike-model.js~BikeModel#_hasProperty",
    "access": "private",
    "description": "Checks if an object has a certain property.",
    "lineNumber": 360,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "An object to check"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "property",
        "description": "The name of a property"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true: if the object has the property; false: otherwise"
    }
  },
  {
    "__docId__": 110,
    "kind": "method",
    "name": "_insertDataOnRead",
    "memberof": "src/components/models/bike-model.js~BikeModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/bike-model.js~BikeModel#_insertDataOnRead",
    "access": "private",
    "description": "Insert data into the data object on a read from the database.",
    "lineNumber": 369,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "databaseData",
        "description": "An objects of objects containing data from the database."
      }
    ],
    "return": null
  },
  {
    "__docId__": 112,
    "kind": "method",
    "name": "_saveDataToLocalStorage",
    "memberof": "src/components/models/bike-model.js~BikeModel",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/components/models/bike-model.js~BikeModel#_saveDataToLocalStorage",
    "access": "private",
    "description": "Save data to local storage.",
    "lineNumber": 408,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "A key to store the data under"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The data to store"
      }
    ],
    "return": null
  },
  {
    "__docId__": 113,
    "kind": "method",
    "name": "_checkForLocalData",
    "memberof": "src/components/models/bike-model.js~BikeModel",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/components/models/bike-model.js~BikeModel#_checkForLocalData",
    "access": "private",
    "description": "Checks if local data is stored, and if so, update the data. This is because we don't wait for this data\nwhen authenticating and the user can see their bikes if offline.",
    "lineNumber": 427,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "Key to get data for"
      }
    ],
    "return": null
  },
  {
    "__docId__": 115,
    "kind": "file",
    "name": "src/components/models/home-model.js",
    "content": "import Model from './model';\nimport Database from '../../util/database';\nimport TimeUtil from '../../util/timeutility';\n\n/**\n * Class for the home/notification model to be used by the Home Presenter\n * @extends Model \n */\nclass HomeModel extends Model {\n\t/**\n\t * Creates an instance of HomeModel. Initializes , creates an observerlist,\n\t * and registers an on read from the database.\n\t *\n\t * @constructor\n\t */\n\tconstructor() {\n\t\tsuper();\n\t\t\n\t\tthis.listener = null;\n\t\tthis._data = {data: []};\n\t\tthis._activeBookmarks = [];\n\n\t\tthis._callback = this._defaultCallback;\n\t\tthis._createObserverList();\n\t\tthis._registerDBReadListener();\n\t}\n\n\t/**\n\t * Get method for presenters to get data.\n\t *\n\t * @return {Object} data stored in the model\n\t */\n\tget() {\n\t\treturn {...this._data} // immutable\n\t}\n\n\t/**\n\t * Default callback\n\t */\n\t_defaultCallback(message) {\n\t\tconsole.log(message);\n\t}\n\n\t/**\n\t * Set the model's callback to a new callback. This callback can be used anywhere and is usually passed in from a presenter.\n\t *\n\t * @param {Function} callback - A callback to run when certain code is executed\n\t */\n\tsetCallback(callback) {\n\t\tthis._callback = callback;\n\t}\n\n\t/**\n\t * Register an 'on' read from the database, supplying the callback when the database has changed.\n\t */\n\t_registerDBReadListener() {\n\t\tthis.listener = Database.readBikeDataOn((snapshot) => {\n\t\t\t// console.log(snapshot.val());\n\t\t\tthis._insertDataOnRead(snapshot.val());\n\t\t\tthis.moveBookmarkedDataToFront();\n\t\t});\n\t}\n\n\t/**\n\t * Toggle the database listener off and then on again to get the data again.\n\t * TODO : Better method to do this?\n\t */\n\ttoggleListeners() {\n\t\tif (this.listener != null) {\n\t\t\tDatabase.readBikeDataOff(this.listener);\n\t\t\tthis._registerDBReadListener();\n\t\t}\n\t}\n\n\t/**\n\t * Insert data into the data object when data has changed from the database\n\t *\n\t * @param {Object} databaseData - Each data item is an object within the overall object\n\t */\n\t_insertDataOnRead(databaseData) {\n\t\tlet tempData = {data:[]};\n\t\tlet dataID = 0;\n\t\t\n\t\tif (databaseData != null) { // Check if there are objects in the database\n\t\t\tfor (let val in databaseData) {\n\t\t\t\tif (!databaseData[val].hasOwnProperty('id')) { // Make sure id exists, otherwise skip\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// if (!databaseData[val].hasOwnProperty('stolen') || !databaseData[val].stolen) {\n\t\t\t\t// \tcontinue;\n\t\t\t\t// }\n\n\t\t\t\tif (databaseData[val].hasOwnProperty('stolen') && databaseData[val].stolen) {\n\t\t\t\t\tdatabaseData[val].dataID = dataID++;\n\t\t\t\t\t// Add timeago and datetime formatted info\n\t\t\t\t\tdatabaseData[val].timeago = TimeUtil.getTimeAgoFromMilliseconds(databaseData[val].milliseconds);\n\t\t\t\t\tdatabaseData[val].datetime = TimeUtil.getDateFormatFromDateTime(databaseData[val].milliseconds);\n\t\t\t\t\ttempData.data.push(databaseData[val]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._data = tempData;\n\t\t\t// console.log(this._data)\n\t\t}\n\t}\n\n\t/**\n\t * Recalculates the 'timeago' property of the object, based on the milliseconds.\n\t */\n\trecalculateTimeAgo() {\n\t\tlet tempData = Object.assign(this._data.data);\n\t\tlet dataID = 0;\n\t\tfor (let i=0; i < tempData.length; i++) {\n\t\t\ttempData[i].dataID = dataID++;\n\t\t\t// Convert back to timeago from milliseconds\n\t\t\ttempData[i].timeago = TimeUtil.getTimeAgoFromMilliseconds(tempData[i].milliseconds);\n\t\t}\n\t\tthis._data.data = Object.assign(tempData);\n\t}\n\n\n\t/**\n\t * Moves the bookmarked data to the front of the list.\n\t */\n\tmoveBookmarkedDataToFront() {\n\t\tif (typeof this._data !== \"undefined\" && this._data != undefined) {\n\t\t\tconst temp = this._data.data;\n\n\t\t\tconst nonBookmarkedData = this.getBookmarkedData(temp, false);\n\t\t\tconst bookmarkedData\t= this.getBookmarkedData(temp, true);\n\n\t\t\t// Reverse the lists because we want latest time first\n\t\t\tconst sortedBookmarkedData \t\t= TimeUtil.sortOnTime(bookmarkedData).reverse();\n\t\t\tconst sortedNonBookmarkedData \t= TimeUtil.sortOnTime(nonBookmarkedData).reverse();\n\t\t\n\t\t\t// console.log(sortedNonBookmarkedData);\n\n\t\t\tconst totalTempData = sortedBookmarkedData.concat(sortedNonBookmarkedData);\n\n\t\t\tthis._data.data = totalTempData;\n\t\t\tthis._notifyAll(this._data);\n\t\t}\n\t}\n\n\t/**\n\t * Gets the bookmarked or unbookmarked data from based on the toggle value.\n\t *\n\t * @param {List} data - A list of objects with property id\n\t * @param {Boolean} toggle - true: Look for bookmarked data; false: Look for unbookmarked data\n\t * @return {List} A list of bookmarked or unbookmarked data depending on the toggle value\n\t */\n\tgetBookmarkedData(data, toggle) {\n\t\treturn data.filter(obj => this.isBookmarked(obj.id) === toggle);\n\t}\n\n\t/**\n\t * Update method for presenters to update the model's data.\n\t *\n\t * @param {Object} newData - New data to add\n\t */\n\tupdate(newData) {\n\t\tnewData.data.found_milliseconds = TimeUtil.getDateTime();\n\n\t\tif (newData.hasOwnProperty('foundTriggered') && newData.foundTriggered && newData.data.found) {\n\t\t\tthis._editExistingInDatabase(newData.data, (result) => {\n\t\t\t\tthis._callback(true); \n\t\t\t\tthis._removeFromData(newData.data); \n\t\t\t\tthis._notifyAll(this._data);\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t * TEST CASE USE ONLY\n\t * Function for tests only to inject data.\n\t */\n\ttestUpdateInjection(newData) {\n\t\tthis._data.data.push(newData.data);\n\t\tthis._notifyAll(this._data);\n\t}\n\n\t/**\n\t * Remove data from the home model's data.\n\t * \n\t * @param {Object} data - Data to remove\n\t */\n\t_removeFromData(data) {\n\t\tthis._data.data = this._data.data.filter((el) => el != data);\n\t}\n\n\t/**\n\t * Returns the bookmarked state for a bike ID\n\t *\n\t * @param {Number} id - A bike notification ID\n\t * @return {Boolean} true: if ID is bookmarked by user; false: otherwise\n\t */\n\tisBookmarked(id) {\n\t\treturn this._activeBookmarks.includes(id);\n\t}\n\n\t/**\n\t * Sets a bookmark for a specific ID\n\t *\n\t * @param {Number} id - A bike notification ID to bookmark\n\t */\n\tsetBookmark(id) {\n\t\tthis._activeBookmarks.push(id);\n\t}\n\n\t/**\n\t * Unsets a bookmark for a specific ID\n\t *\n\t * @param {Number} id - A bike nofication ID to unbookmark\n\t */\n\tunsetBookmark(id) {\n\t\tthis._activeBookmarks = this._activeBookmarks.filter(bid => {return bid != id;})\n\t}\n\n\t/**\n\t * @private\n\t * DON'T USE THIS FUNCTION IF YOU DON'T HAVE TO.\n\t * I hope you know what you're doing.\n\t * We force a notifyAll here because if a presenter subscribes too late and needs data on startup, it won't\n\t * receive anything because it mounts after data is received. Force a notifyAll so it can start with data.\n\t */\n\tforceNotifyAll() {\n\t\tthis._notifyAll(this._data);\n\t}\n\n\t/**\n\t * Overwrite existing data in database and call the function callback depending on if it was successful or not.\n\t *\n\t * @param {Object} newData - Data to be written to the database\n\t * @param {Function} callback - A function to call on the success or failure of the call\n\t */\n\t_editExistingInDatabase(newData, callback) {\n\t\treturn Database.editBikeData(newData, (data) => {\n\t\t\t// console.log(data);\n\t\t\tcallback(typeof data !== 'undefined' && data !== undefined);\n\t\t\t// return typeof data !== 'undefined' && data !== undefined;\n\t\t\t// this._callback(typeof data !== 'undefined' && data !== undefined);\n\t\t},(error) => {\n\t\t\tconsole.log(error);\n\t\t\tcallback(false);\n\t\t\t// this._callback(false);\n\t\t});\n\t}\n}\n\nexport default HomeModel;",
    "static": true,
    "longname": "/Users/seanr/Downloads/temp/src/components/models/home-model.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 116,
    "kind": "class",
    "name": "HomeModel",
    "memberof": "src/components/models/home-model.js",
    "static": true,
    "longname": "src/components/models/home-model.js~HomeModel",
    "access": "public",
    "export": true,
    "importPath": "PedalPatrol/src/components/models/home-model.js",
    "importStyle": "HomeModel",
    "description": "Class for the home/notification model to be used by the Home Presenter",
    "lineNumber": 9,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 117,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/components/models/home-model.js~HomeModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/home-model.js~HomeModel#constructor",
    "access": "public",
    "description": "Creates an instance of HomeModel. Initializes , creates an observerlist,\nand registers an on read from the database.",
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ]
  },
  {
    "__docId__": 118,
    "kind": "member",
    "name": "listener",
    "memberof": "src/components/models/home-model.js~HomeModel",
    "static": false,
    "longname": "src/components/models/home-model.js~HomeModel#listener",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 119,
    "kind": "member",
    "name": "_data",
    "memberof": "src/components/models/home-model.js~HomeModel",
    "static": false,
    "longname": "src/components/models/home-model.js~HomeModel#_data",
    "access": "private",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "{\"data\": *}"
      ]
    }
  },
  {
    "__docId__": 120,
    "kind": "member",
    "name": "_activeBookmarks",
    "memberof": "src/components/models/home-model.js~HomeModel",
    "static": false,
    "longname": "src/components/models/home-model.js~HomeModel#_activeBookmarks",
    "access": "private",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 121,
    "kind": "member",
    "name": "_callback",
    "memberof": "src/components/models/home-model.js~HomeModel",
    "static": false,
    "longname": "src/components/models/home-model.js~HomeModel#_callback",
    "access": "private",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 122,
    "kind": "method",
    "name": "get",
    "memberof": "src/components/models/home-model.js~HomeModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/home-model.js~HomeModel#get",
    "access": "public",
    "description": "Get method for presenters to get data.",
    "lineNumber": 33,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "data stored in the model"
    },
    "params": []
  },
  {
    "__docId__": 123,
    "kind": "method",
    "name": "_defaultCallback",
    "memberof": "src/components/models/home-model.js~HomeModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/home-model.js~HomeModel#_defaultCallback",
    "access": "private",
    "description": "Default callback",
    "lineNumber": 40,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 124,
    "kind": "method",
    "name": "setCallback",
    "memberof": "src/components/models/home-model.js~HomeModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/home-model.js~HomeModel#setCallback",
    "access": "public",
    "description": "Set the model's callback to a new callback. This callback can be used anywhere and is usually passed in from a presenter.",
    "lineNumber": 49,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "A callback to run when certain code is executed"
      }
    ],
    "return": null
  },
  {
    "__docId__": 126,
    "kind": "method",
    "name": "_registerDBReadListener",
    "memberof": "src/components/models/home-model.js~HomeModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/home-model.js~HomeModel#_registerDBReadListener",
    "access": "private",
    "description": "Register an 'on' read from the database, supplying the callback when the database has changed.",
    "lineNumber": 56,
    "params": [],
    "return": null
  },
  {
    "__docId__": 128,
    "kind": "method",
    "name": "toggleListeners",
    "memberof": "src/components/models/home-model.js~HomeModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/home-model.js~HomeModel#toggleListeners",
    "access": "public",
    "description": "Toggle the database listener off and then on again to get the data again.\nTODO : Better method to do this?",
    "lineNumber": 68,
    "params": [],
    "return": null
  },
  {
    "__docId__": 129,
    "kind": "method",
    "name": "_insertDataOnRead",
    "memberof": "src/components/models/home-model.js~HomeModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/home-model.js~HomeModel#_insertDataOnRead",
    "access": "private",
    "description": "Insert data into the data object when data has changed from the database",
    "lineNumber": 80,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "databaseData",
        "description": "Each data item is an object within the overall object"
      }
    ],
    "return": null
  },
  {
    "__docId__": 131,
    "kind": "method",
    "name": "recalculateTimeAgo",
    "memberof": "src/components/models/home-model.js~HomeModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/home-model.js~HomeModel#recalculateTimeAgo",
    "access": "public",
    "description": "Recalculates the 'timeago' property of the object, based on the milliseconds.",
    "lineNumber": 109,
    "params": [],
    "return": null
  },
  {
    "__docId__": 132,
    "kind": "method",
    "name": "moveBookmarkedDataToFront",
    "memberof": "src/components/models/home-model.js~HomeModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/home-model.js~HomeModel#moveBookmarkedDataToFront",
    "access": "public",
    "description": "Moves the bookmarked data to the front of the list.",
    "lineNumber": 124,
    "params": [],
    "return": null
  },
  {
    "__docId__": 133,
    "kind": "method",
    "name": "getBookmarkedData",
    "memberof": "src/components/models/home-model.js~HomeModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/home-model.js~HomeModel#getBookmarkedData",
    "access": "public",
    "description": "Gets the bookmarked or unbookmarked data from based on the toggle value.",
    "lineNumber": 151,
    "params": [
      {
        "nullable": null,
        "types": [
          "List"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "A list of objects with property id"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "toggle",
        "description": "true: Look for bookmarked data; false: Look for unbookmarked data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "List"
      ],
      "spread": false,
      "description": "A list of bookmarked or unbookmarked data depending on the toggle value"
    }
  },
  {
    "__docId__": 134,
    "kind": "method",
    "name": "update",
    "memberof": "src/components/models/home-model.js~HomeModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/home-model.js~HomeModel#update",
    "access": "public",
    "description": "Update method for presenters to update the model's data.",
    "lineNumber": 160,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "newData",
        "description": "New data to add"
      }
    ],
    "return": null
  },
  {
    "__docId__": 135,
    "kind": "method",
    "name": "testUpdateInjection",
    "memberof": "src/components/models/home-model.js~HomeModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/home-model.js~HomeModel#testUpdateInjection",
    "access": "private",
    "description": "",
    "lineNumber": 177,
    "params": [
      {
        "name": "newData",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 136,
    "kind": "method",
    "name": "_removeFromData",
    "memberof": "src/components/models/home-model.js~HomeModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/home-model.js~HomeModel#_removeFromData",
    "access": "private",
    "description": "Remove data from the home model's data.",
    "lineNumber": 187,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Data to remove"
      }
    ],
    "return": null
  },
  {
    "__docId__": 137,
    "kind": "method",
    "name": "isBookmarked",
    "memberof": "src/components/models/home-model.js~HomeModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/home-model.js~HomeModel#isBookmarked",
    "access": "public",
    "description": "Returns the bookmarked state for a bike ID",
    "lineNumber": 197,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "A bike notification ID"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true: if ID is bookmarked by user; false: otherwise"
    }
  },
  {
    "__docId__": 138,
    "kind": "method",
    "name": "setBookmark",
    "memberof": "src/components/models/home-model.js~HomeModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/home-model.js~HomeModel#setBookmark",
    "access": "public",
    "description": "Sets a bookmark for a specific ID",
    "lineNumber": 206,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "A bike notification ID to bookmark"
      }
    ],
    "return": null
  },
  {
    "__docId__": 139,
    "kind": "method",
    "name": "unsetBookmark",
    "memberof": "src/components/models/home-model.js~HomeModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/home-model.js~HomeModel#unsetBookmark",
    "access": "public",
    "description": "Unsets a bookmark for a specific ID",
    "lineNumber": 215,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "A bike nofication ID to unbookmark"
      }
    ],
    "return": null
  },
  {
    "__docId__": 141,
    "kind": "method",
    "name": "forceNotifyAll",
    "memberof": "src/components/models/home-model.js~HomeModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/home-model.js~HomeModel#forceNotifyAll",
    "access": "private",
    "description": "",
    "lineNumber": 226,
    "params": [],
    "return": null
  },
  {
    "__docId__": 142,
    "kind": "method",
    "name": "_editExistingInDatabase",
    "memberof": "src/components/models/home-model.js~HomeModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/home-model.js~HomeModel#_editExistingInDatabase",
    "access": "private",
    "description": "Overwrite existing data in database and call the function callback depending on if it was successful or not.",
    "lineNumber": 236,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "newData",
        "description": "Data to be written to the database"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "A function to call on the success or failure of the call"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 143,
    "kind": "file",
    "name": "src/components/models/login-model.js",
    "content": "//model\n// attributes: password, username\n// function : getUsername/password setUsername/password\n// function2 : login: connect to database and exchange data\n//login () if login success, create a new user object; else fail.\n\nimport Model from './model';\nimport Database from '../../util/database';\nimport PersistStorage from '../../util/persistentstorage';\nimport AuthState from '../../util/authenticationstate';\nimport ImageUtil from '../../util/imageutility';\nimport NotificationMethod from '../../util/notification';\n\nimport { Platform } from 'react-native'; // Temporary\n\n/**\n * Class for the login model to be used by the LoginPresenter and SignupPresenter\n * @extends Model\n */\nclass LoginModel extends Model {\n\t/**\n\t * Creates an instance of LoginModelCreates an observerlist.\n\t *\n\t * @constructor\n\t */\n\tconstructor(){\n\t\tsuper();\n\t\tthis._data = {\n\t\t\tdata: [\n\t\t\t\t\t{\n\t\t\t\t\t\tusername:\"\",\n\t\t\t\t\t\tpassword:\"\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t}\n\t\n\t\tthis._createObserverList();\n\t}\n\n\t/**\n\t * Returns the data from the model.\n\t *\n\t * @return {Object} A deconstructed copy of the data object\n\t */\n\tget() {\n\t\treturn {...this._data}\n\t}\n\n\t/**\n\t * Request sign-in with Twitter.\n\t *\n\t * @param {Function} onError - Callback function to call if there is an error\n\t */\n\tupdateT(onError) {\n\t\tDatabase.signInwithTwitter(onError);\n\t}\n\t\n\t/**\n\t * Request sign-in with Facebook.\n\t *\n\t * @param {Function} onError - Callback function to call if there is an error\n\t */\n\tupdateF(onError) {\n\t\tDatabase.signinwithFB(onError);\n\t}\n\n\t/**\n\t * async method for presenters to know if the username and password is existed in the database\n\t * @param {Object} newData - data including username and password.\n\t */\n\tasync update(newData) {\n\t\t// this._data = {...this._data, ...newData} // Overwrite - Use this if the data is appended to previous data in the presenter\n\t\tthis._data.data.splice(0,1,newData.data); // Appends to the list - Use this if only a single piece of data is passed in\n\n\t\tlet errorMessage = true;\n\t\t// console.log('errorbeforecheck: '+errorMessage)\n\t\t// await firebase.auth().signInWithEmailAndPassword(this._data.data[0].username, this._data.data[0].password).catch(function(error) {\n\t\t// \t// Handle Errors here.\n\t\t// \terrorMessage = 'false';\n\t\t// \tconsole.log('erroraftercheck: '+errorMessage);\n\t\t// });\n\n\t\tawait Database.signIn(this._data.data[0].username, this._data.data[0].password, (error) => {\n\t\t\t// Handle Errors here.\n\t\t\terrorMessage = false;\n\n\t\t\tsetTimeout(() => {\n\t\t\t\tconsole.log('errormessage in timeout'+errorMessage)\n\t\t\t\tconsole.log(error)\n\t\t\t}, 600);\n\t\t});\n\n\t\n\t\tlet verify = await Database.checkVerify();\n\t\tif (verify === 'email not verified'){\n\t\t    errorMessage = false;\n\t\t    await Database.signOut();\n\t\t}\n\n\t\tif (errorMessage) {\t\t\n\t\t\tif (Platform.OS !== 'ios') {\n\t\t\t\tconst fcm = NotificationMethod.checkPermission();\n\t\t        //do something to overwrite database device token;\n\t\t        if (fcm) {\n\n\t\t        }\n\t    \t}\n\t\t\tthis._authenticationSuccess();\n\t\t}\n\t\tthis._notifyAll(errorMessage);\n\t}\n\n\t/**\n\t * Function to call on a successful authentication of the user signing in to the database.\n\t */\n\t_authenticationSuccess() {\n\t\tDatabase.getCurrentUser((userID) => {\n\t\t\tAuthState.setCurrentUserID(userID);\n\t\t\tPersistStorage.storeData('userToken', userID, (error) => {console.log(error)});\n\t\t\tthis._checkProfileImageExists(userID);\n\t\t\tthis.triggerOnReads();\n\t\t});\n\t}\n\n\t/**\n\t * Check if a profile image exists.\n\t *\n\t * @param {string} userID - The current user's id\n\t */\n\t_checkProfileImageExists(userID) {\n\t\tPersistStorage.retrieveData(userID, (image) => {\n\t\t\tif (image == null || image == undefined) {\n\t\t\t\tPersistStorage.storeData(userID, ImageUtil.getDefaultImage(ImageUtil.getTypes().PROFILE), (error) => {console.log(error)});\n\t\t\t}\n\t\t}, (error) => {\n\t\t\tconsole.log(error);\n\t\t});\n\t}\n\n\t/**\n\t * Trigger the on reads for models by adding a new item to the Bike list\n\t */\n\ttriggerOnReads() {\n\t\tconst newData = {tempID: 0}\n\t\tDatabase.triggerTemporaryItem(newData, (error) => {\n\t\t\tconsole.log(error);\n\t\t});\n\t}\n}\n\nexport default LoginModel;",
    "static": true,
    "longname": "/Users/seanr/Downloads/temp/src/components/models/login-model.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 144,
    "kind": "class",
    "name": "LoginModel",
    "memberof": "src/components/models/login-model.js",
    "static": true,
    "longname": "src/components/models/login-model.js~LoginModel",
    "access": "public",
    "export": true,
    "importPath": "PedalPatrol/src/components/models/login-model.js",
    "importStyle": "LoginModel",
    "description": "Class for the login model to be used by the LoginPresenter and SignupPresenter",
    "lineNumber": 20,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 145,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/components/models/login-model.js~LoginModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/login-model.js~LoginModel#constructor",
    "access": "public",
    "description": "Creates an instance of LoginModelCreates an observerlist.",
    "lineNumber": 26,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ]
  },
  {
    "__docId__": 146,
    "kind": "member",
    "name": "_data",
    "memberof": "src/components/models/login-model.js~LoginModel",
    "static": false,
    "longname": "src/components/models/login-model.js~LoginModel#_data",
    "access": "private",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "{\"data\": *}"
      ]
    }
  },
  {
    "__docId__": 147,
    "kind": "method",
    "name": "get",
    "memberof": "src/components/models/login-model.js~LoginModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/login-model.js~LoginModel#get",
    "access": "public",
    "description": "Returns the data from the model.",
    "lineNumber": 45,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "A deconstructed copy of the data object"
    },
    "params": []
  },
  {
    "__docId__": 148,
    "kind": "method",
    "name": "updateT",
    "memberof": "src/components/models/login-model.js~LoginModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/login-model.js~LoginModel#updateT",
    "access": "public",
    "description": "Request sign-in with Twitter.",
    "lineNumber": 54,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "onError",
        "description": "Callback function to call if there is an error"
      }
    ],
    "return": null
  },
  {
    "__docId__": 149,
    "kind": "method",
    "name": "updateF",
    "memberof": "src/components/models/login-model.js~LoginModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/login-model.js~LoginModel#updateF",
    "access": "public",
    "description": "Request sign-in with Facebook.",
    "lineNumber": 63,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "onError",
        "description": "Callback function to call if there is an error"
      }
    ],
    "return": null
  },
  {
    "__docId__": 150,
    "kind": "method",
    "name": "update",
    "memberof": "src/components/models/login-model.js~LoginModel",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/components/models/login-model.js~LoginModel#update",
    "access": "public",
    "description": "async method for presenters to know if the username and password is existed in the database",
    "lineNumber": 71,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "newData",
        "description": "data including username and password."
      }
    ],
    "return": null
  },
  {
    "__docId__": 151,
    "kind": "method",
    "name": "_authenticationSuccess",
    "memberof": "src/components/models/login-model.js~LoginModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/login-model.js~LoginModel#_authenticationSuccess",
    "access": "private",
    "description": "Function to call on a successful authentication of the user signing in to the database.",
    "lineNumber": 116,
    "params": [],
    "return": null
  },
  {
    "__docId__": 152,
    "kind": "method",
    "name": "_checkProfileImageExists",
    "memberof": "src/components/models/login-model.js~LoginModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/login-model.js~LoginModel#_checkProfileImageExists",
    "access": "private",
    "description": "Check if a profile image exists.",
    "lineNumber": 130,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userID",
        "description": "The current user's id"
      }
    ],
    "return": null
  },
  {
    "__docId__": 153,
    "kind": "method",
    "name": "triggerOnReads",
    "memberof": "src/components/models/login-model.js~LoginModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/login-model.js~LoginModel#triggerOnReads",
    "access": "public",
    "description": "Trigger the on reads for models by adding a new item to the Bike list",
    "lineNumber": 143,
    "params": [],
    "return": null
  },
  {
    "__docId__": 154,
    "kind": "file",
    "name": "src/components/models/map-model.js",
    "content": "import Model from './model';\nimport Database from '../../util/database';\n\nimport { showLocation } from 'react-native-map-link';\n\n/**\n * Class for the Map model which controls the map view and the markers.\n * @extends Model\n */\nclass MapModel extends Model {\n\t/**\n\t * Creates an instance of the MapModel\n\t * @constructor\n\t */\n\tconstructor() {\n\t\tsuper();\n\t\t\n\t\tthis._data = [];\n\t\tthis._createObserverList();\n\t\t/*\n\t\t * Since data in MapModel should be the same as the from the HomeModel, we don't have to read from the database in the MapModel\n\t\t * and we can just wait for data to be received.\n\t\t */\n\t}\n\n\t/**\n\t * Returns the data from the model.\n\t *\n\t * @return {Object} The data stored in the model. Has property 'data' which is a list of objects\n\t */\n\tget = () => {\n\t\treturn (this._data);\n\t}\n\n\t/**\n\t * Updates the map model data by inserting the data as markers\n\t */\n\tupdate = (newData) => {\n\t\tthis._insertDataOnRead(newData);\n\t}\n\n\t/**\n\t * Inserts an object with a list of objects into the map model as new data.\n\t *\n\t * @param {Object} newData - An object with the property 'data' which contains a list of objects\n\t */\n\t_insertDataOnRead = (newdata) => {\n\t\t//let temp = [{coordinate:{latitude:44.237424,longitude:-76.5131},title:\"bike1\",description:\"help\"}];\n\t\tlet temp = [];\n\t\t// console.log(Object.values(newdata));\n\t\tlet newdatalist = Object.values(newdata.data);\n\t\tfor (let i = 0; i < newdatalist.length; i ++ ){\n\t\t\tif (newdatalist[i].hasOwnProperty(\"longitude\") &&\n\t\t\t\tnewdatalist[i].hasOwnProperty(\"latitude\")  &&\n\t\t\t\t(typeof newdatalist[i].longitude === \"number\") && \n\t\t\t\t(typeof newdatalist[i].latitude === \"number\")  && \n\t\t\t\tnewdatalist[i].hasOwnProperty(\"stolen\") && \n\t\t\t\tnewdatalist[i].stolen) {\n\t\t\t\t\n\t\t\t\ttemp.push(this.createMarker(newdatalist[i]));\n\t\t\t}\n\t\t}\n\n\t\tthis._data = temp;\n\t}\n\t\n\t/**\n\t * Creates a marker from provided data.\n\t *\n\t * @param {Object} markerElement - An object element\n\t * @return {Object} A formed marker\n\t */\n\tcreateMarker(markerElement){\n\t\tlet singleMarker={\n\t\t\tcoordinate:{\n\t\t\t\tlatitude: markerElement.latitude,\n\t\t\t\tlongitude: markerElement.longitude,\n\t\t\t},\n\t\t\tkey : markerElement.id,\n\t\t\tdata: markerElement\n\t\t}\n\t\treturn singleMarker;\n\t}\n\n\t/**\n\t * Returns the user's current location.\n\t *\n\t * @return {Object} The current user's location, with longitude and latitude\n\t */\n\tgetCurrentLocation = () => {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tnavigator.geolocation.getCurrentPosition(position => resolve(position), e => reject(e));\n\t\t});\n\t};\n\n\t/**\n\t * Opens the prompt to get the user to pick a third-party app to get directions from.\n\t * Default source location is the user's current location.\n\t *\n\t * @param {Object} destination - The destination longitude and latitude for directions.\n\t */\n\tshowMaps = (destination) => {\n\t\tthis.getCurrentLocation().then(source => {\n\t\t\tif (source) {\n\t\t\t\tshowLocation({\n\t\t\t\t\tlatitude: destination.latitude,\n\t\t\t\t\tlongitude: destination.longitude,\n\t\t\t\t\tsourceLatitude: source.coords.latitude,  // optionally specify starting location for directions\n\t\t\t\t\tsourceLongitude: source.coords.longitude,  // not optional if sourceLatitude is specified\n\t\t\t\t\t// title: 'Current Location',  // optional\n\t\t\t\t\tgoogleForceLatLon: false,  // optionally force GoogleMaps to use the latlon for the query instead of the title\n\t\t\t\t\t// googlePlaceId: 'ChIJGVtI4by3t4kRr51d_Qm_x58',  // optionally specify the google-place-id\n\t\t\t\t\tdialogTitle: 'Open in Maps', // optional (default: 'Open in Maps')\n\t\t\t\t\tdialogMessage: 'What app would you like to use?', // optional (default: 'What app would you like to use?')\n\t\t\t\t\tcancelText: 'Cancel', // optional (default: 'Cancel')\n\t\t\t\t \t// appsWhiteList: ['google-maps', 'apple-maps'] // optionally you can set which apps to show (default: will show all supported apps installed on device)\n\t\t\t\t\t// app: 'apple-maps'  // optionally specify specific app to use\n\t\t\t\t})\n\t\t\t}\n\t\t});\n\t}\n}\n\nexport default MapModel;",
    "static": true,
    "longname": "/Users/seanr/Downloads/temp/src/components/models/map-model.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 155,
    "kind": "class",
    "name": "MapModel",
    "memberof": "src/components/models/map-model.js",
    "static": true,
    "longname": "src/components/models/map-model.js~MapModel",
    "access": "public",
    "export": true,
    "importPath": "PedalPatrol/src/components/models/map-model.js",
    "importStyle": "MapModel",
    "description": "Class for the Map model which controls the map view and the markers.",
    "lineNumber": 10,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 156,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/components/models/map-model.js~MapModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/map-model.js~MapModel#constructor",
    "access": "public",
    "description": "Creates an instance of the MapModel",
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ]
  },
  {
    "__docId__": 157,
    "kind": "member",
    "name": "_data",
    "memberof": "src/components/models/map-model.js~MapModel",
    "static": false,
    "longname": "src/components/models/map-model.js~MapModel#_data",
    "access": "private",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 158,
    "kind": "member",
    "name": "get",
    "memberof": "src/components/models/map-model.js~MapModel",
    "static": false,
    "longname": "src/components/models/map-model.js~MapModel#get",
    "access": "public",
    "description": "Returns the data from the model.",
    "lineNumber": 31,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The data stored in the model. Has property 'data' which is a list of objects"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 159,
    "kind": "member",
    "name": "update",
    "memberof": "src/components/models/map-model.js~MapModel",
    "static": false,
    "longname": "src/components/models/map-model.js~MapModel#update",
    "access": "public",
    "description": "Updates the map model data by inserting the data as markers",
    "lineNumber": 38,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 160,
    "kind": "member",
    "name": "_insertDataOnRead",
    "memberof": "src/components/models/map-model.js~MapModel",
    "static": false,
    "longname": "src/components/models/map-model.js~MapModel#_insertDataOnRead",
    "access": "private",
    "description": "Inserts an object with a list of objects into the map model as new data.",
    "lineNumber": 47,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "newData",
        "description": "An object with the property 'data' which contains a list of objects"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 162,
    "kind": "method",
    "name": "createMarker",
    "memberof": "src/components/models/map-model.js~MapModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/map-model.js~MapModel#createMarker",
    "access": "public",
    "description": "Creates a marker from provided data.",
    "lineNumber": 73,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "markerElement",
        "description": "An object element"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "A formed marker"
    }
  },
  {
    "__docId__": 163,
    "kind": "member",
    "name": "getCurrentLocation",
    "memberof": "src/components/models/map-model.js~MapModel",
    "static": false,
    "longname": "src/components/models/map-model.js~MapModel#getCurrentLocation",
    "access": "public",
    "description": "Returns the user's current location.",
    "lineNumber": 90,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The current user's location, with longitude and latitude"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 164,
    "kind": "member",
    "name": "showMaps",
    "memberof": "src/components/models/map-model.js~MapModel",
    "static": false,
    "longname": "src/components/models/map-model.js~MapModel#showMaps",
    "access": "public",
    "description": "Opens the prompt to get the user to pick a third-party app to get directions from.\nDefault source location is the user's current location.",
    "lineNumber": 102,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "destination",
        "description": "The destination longitude and latitude for directions."
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 165,
    "kind": "file",
    "name": "src/components/models/model.js",
    "content": "import {Subject} from 'rxjs';\n\n/**\n * Base class for all models\n */\nclass Model {\n\t/**\n\t * @deprecated\n\t * Use _createEventStream instead. This function is only used because currently all classes call it\n\t */\n\t_createObserverList() {\n\t\tthis._createEventStream();\n\t}\n\n\t/**\n\t * Creates an event stream (Subject/Observable) for presenters to subscribe to.\n\t */\n\t_createEventStream() {\n\t\tthis.eventStream = new Subject();\n\t\tthis.observers = [];\n\t}\n\n\t/**\n\t * Subscribes to the event stream.\n\t *\n\t * @param {Class} observer - A class that will observe the event stream. Must implement onUpdated\n\t * @param {Boolean} force - Force the model to retrigger their listeners by toggling them off and on\n\t */\n\tsubscribe(observer, force=false) {\n\t\tif (this.eventStream != null && this.eventStream != undefined) {\n\t\t\tconst subscription = this.eventStream.subscribe(\n\t\t\t\tobserver.onUpdated,\n\t\t\t\t(error) => {console.log(error)},\n\t\t\t\t() => {console.log('Completed')}\n\t\t\t);\n\n\t\t\tconst newObserver = {observer, subscription};\n\t\t\tthis.observers.push(newObserver);\n\t\t}\n\n\t\tif (force) {\n\t\t\tthis.force();\n\t\t}\n\t}\n\n\t/**\n\t * Unsubscribe from the event stream.\n\t *\n\t * @param {Class} observer - A class that is subscribed to be unsubscribed.\n\t */\n\tunsubscribe(observer) {\n\t\tlet newObservers = [];\n\t\tfor (let i=0; i < this.observers.length; i++) {\n\t\t\tif (this.observers[i].observer == observer) {\n\t\t\t\tconst {subscription} = this.observers[i];\n\t\t\t\tsubscription.unsubscribe();\n\t\t\t} else {\n\t\t\t\tnewObservers.push(this.observers[i]);\n\t\t\t}\n\t\t}\n\t\tthis.observers = this._deepCopy(newObservers);\n\t}\n\n\t/**\n\t * Notify all observers with a message.\n\t *\n\t * @param {Object} message - A message to send to the observers.\n\t */\n\t_notifyAll(message) {\n\t\tthis.eventStream.next(message);\n\t}\n\n\t/**\n\t * Returns a deep copy of the array by reassigning the values. This is to make sure we can clear the data.\n\t *\n\t * @return {List} A list to copy\n\t */\n\t_deepCopy = (array) => {\n\t\treturn array.map(a => Object.assign({}, a));\n\t}\n\n\t/**\n\t * Force a toggle of the database listeners by the children.\n\t */\n\tforce() {\n\t\tthis.toggleListeners();\n\t}\n\n\t/**\n\t * Toggle the database listeners from on to off. Must be defined by children to take effect.\n\t */\n\ttoggleListeners() {/* Method stub - Must be defined by children */}\n\n}\n\nexport default Model;",
    "static": true,
    "longname": "/Users/seanr/Downloads/temp/src/components/models/model.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 166,
    "kind": "class",
    "name": "Model",
    "memberof": "src/components/models/model.js",
    "static": true,
    "longname": "src/components/models/model.js~Model",
    "access": "public",
    "export": true,
    "importPath": "PedalPatrol/src/components/models/model.js",
    "importStyle": "Model",
    "description": "Base class for all models",
    "lineNumber": 6,
    "interface": false
  },
  {
    "__docId__": 167,
    "kind": "method",
    "name": "_createObserverList",
    "memberof": "src/components/models/model.js~Model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/model.js~Model#_createObserverList",
    "access": "private",
    "description": "",
    "lineNumber": 11,
    "deprecated": "Use _createEventStream instead. This function is only used because currently all classes call it",
    "params": [],
    "return": null
  },
  {
    "__docId__": 168,
    "kind": "method",
    "name": "_createEventStream",
    "memberof": "src/components/models/model.js~Model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/model.js~Model#_createEventStream",
    "access": "private",
    "description": "Creates an event stream (Subject/Observable) for presenters to subscribe to.",
    "lineNumber": 18,
    "params": [],
    "return": null
  },
  {
    "__docId__": 169,
    "kind": "member",
    "name": "eventStream",
    "memberof": "src/components/models/model.js~Model",
    "static": false,
    "longname": "src/components/models/model.js~Model#eventStream",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 170,
    "kind": "member",
    "name": "observers",
    "memberof": "src/components/models/model.js~Model",
    "static": false,
    "longname": "src/components/models/model.js~Model#observers",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 171,
    "kind": "method",
    "name": "subscribe",
    "memberof": "src/components/models/model.js~Model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/model.js~Model#subscribe",
    "access": "public",
    "description": "Subscribes to the event stream.",
    "lineNumber": 29,
    "params": [
      {
        "nullable": null,
        "types": [
          "Class"
        ],
        "spread": false,
        "optional": false,
        "name": "observer",
        "description": "A class that will observe the event stream. Must implement onUpdated"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "force",
        "description": "Force the model to retrigger their listeners by toggling them off and on"
      }
    ],
    "return": null
  },
  {
    "__docId__": 172,
    "kind": "method",
    "name": "unsubscribe",
    "memberof": "src/components/models/model.js~Model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/model.js~Model#unsubscribe",
    "access": "public",
    "description": "Unsubscribe from the event stream.",
    "lineNumber": 51,
    "params": [
      {
        "nullable": null,
        "types": [
          "Class"
        ],
        "spread": false,
        "optional": false,
        "name": "observer",
        "description": "A class that is subscribed to be unsubscribed."
      }
    ],
    "return": null
  },
  {
    "__docId__": 174,
    "kind": "method",
    "name": "_notifyAll",
    "memberof": "src/components/models/model.js~Model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/model.js~Model#_notifyAll",
    "access": "private",
    "description": "Notify all observers with a message.",
    "lineNumber": 69,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "A message to send to the observers."
      }
    ],
    "return": null
  },
  {
    "__docId__": 175,
    "kind": "member",
    "name": "_deepCopy",
    "memberof": "src/components/models/model.js~Model",
    "static": false,
    "longname": "src/components/models/model.js~Model#_deepCopy",
    "access": "private",
    "description": "Returns a deep copy of the array by reassigning the values. This is to make sure we can clear the data.",
    "lineNumber": 78,
    "return": {
      "nullable": null,
      "types": [
        "List"
      ],
      "spread": false,
      "description": "A list to copy"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 176,
    "kind": "method",
    "name": "force",
    "memberof": "src/components/models/model.js~Model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/model.js~Model#force",
    "access": "public",
    "description": "Force a toggle of the database listeners by the children.",
    "lineNumber": 85,
    "params": [],
    "return": null
  },
  {
    "__docId__": 177,
    "kind": "method",
    "name": "toggleListeners",
    "memberof": "src/components/models/model.js~Model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/model.js~Model#toggleListeners",
    "access": "public",
    "description": "Toggle the database listeners from on to off. Must be defined by children to take effect.",
    "lineNumber": 92,
    "params": [],
    "return": null
  },
  {
    "__docId__": 178,
    "kind": "file",
    "name": "src/components/models/modelOld.js",
    "content": "import ObserverList from '../../util/observerlist';\n\n/**\n * @deprecated Use Model.js and associated functions instead.\n * Base class for all models\n */\nclass ModelOld {\n\t/**\n\t * @deprecated \n\t * Private method to only be used by classes that extend Model.\n\t * Creates an observer list for the child that classes can subscribe to.\n\t */\n\t_createObserverList = () => {\n\t\tthis.observerList = {...(new ObserverList())};\n\t}\n\n\t/**\n\t * @deprecated \n\t * Private method to only be used by classes that extend Model.\n\t * Notifies all subscribers/observers of the calling child. \n\t * This function forces the presenter to fetch any data from the model itself.\n\t */\n\t_notifyAll = () => {\n\t\tlet count = this.observerList.count();\n\t\tfor (let i=0; i < count; i++) {\n\t\t\tthis.observerList.get(i).onUpdated(); // Calls the update function\n\t\t}\n\t}\n\n\t/**\n\t * @deprecated \n\t * Private method to only be used by classes that extend Model.\n\t * Notifies all subscribers/observers of the calling child and sends a message.\n\t *\n\t * @param {Object} message - A message to send to the observers\n\t */\n\t_notifyAll = (message) => {\n\t\tlet count = this.observerList.count();\n\t\tfor (let i=0; i < count; i++) {\n\t\t\tconsole.log(this.observerList);\n\t\t\t// console.log(message);\n\t\t\t// console.log(this.observerList.get(i));\n\t\t\t// console.log(this.observerList.getObservers())\n\t\t\tthis.observerList.get(this.observerList, i).onUpdated(message); // Calls the update function\n\t\t}\n\t}\n\n\t/**\n\t * @deprecated \n\t * Private method to only be used by classes that extend Model.\n\t * Notifies a specific subscriber/observer of the calling child.\n\t *\n\t * @param {Object} observer - An observer to send a message to\n\t * @param {Object} message - A message to send to the observer\n\t * @return {Boolean} true: if the observer exists, a message will be sent; false: if the observer does not exist, no message sent\n\t */\n\t_notify = (observer, message) => {\n\t\tif (this.observerList.exists(observer)) {\n\t\t\tobserver.onUpdated(message);\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * @deprecated \n\t * Adds (subscribes) an observer to the calling child/subject to the subscription list.\n\t *\n\t * @param {Object} observer - An observing class\n\t */\n\tsubscribe = (observer) => {\n\t\tthis.observerList.add(observer);\n\t}\n\n\t/**\n\t * @deprecated \n\t * Removes (unsubscribes) an observer from the calling child/subject's subscription list.\n\t *\n\t * @param {Object} observer - An observing class\n\t */\n\tunsubscribe = (observer) => {\n\t\tthis.observerList.remove(observer);\n\t}\n\n\t/**\n\t * @deprecated \n\t * Checks if an observer exists in the observer list.\n\t * \n\t * @param {Object} objectClass - A class\n\t * @return {Boolean} true: if the class is an observer; false: if the class is not an observer\n\t */\n\texists = (objectClass) => {\n\t \treturn this.observerList.exists(objectClass);\n\t}\n}\n\nexport default ModelOld;",
    "static": true,
    "longname": "/Users/seanr/Downloads/temp/src/components/models/modelOld.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 179,
    "kind": "class",
    "name": "ModelOld",
    "memberof": "src/components/models/modelOld.js",
    "static": true,
    "longname": "src/components/models/modelOld.js~ModelOld",
    "access": "public",
    "export": true,
    "importPath": "PedalPatrol/src/components/models/modelOld.js",
    "importStyle": "ModelOld",
    "description": "",
    "lineNumber": 7,
    "deprecated": "Use Model.js and associated functions instead.\nBase class for all models",
    "interface": false
  },
  {
    "__docId__": 180,
    "kind": "member",
    "name": "_createObserverList",
    "memberof": "src/components/models/modelOld.js~ModelOld",
    "static": false,
    "longname": "src/components/models/modelOld.js~ModelOld#_createObserverList",
    "access": "private",
    "description": "",
    "lineNumber": 13,
    "deprecated": "Private method to only be used by classes that extend Model.\nCreates an observer list for the child that classes can subscribe to.",
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 181,
    "kind": "member",
    "name": "observerList",
    "memberof": "src/components/models/modelOld.js~ModelOld",
    "longname": "src/components/models/modelOld.js~ModelOld#observerList",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "{...undefined: Object}"
      ]
    }
  },
  {
    "__docId__": 182,
    "kind": "member",
    "name": "_notifyAll",
    "memberof": "src/components/models/modelOld.js~ModelOld",
    "static": false,
    "longname": "src/components/models/modelOld.js~ModelOld#_notifyAll",
    "access": "private",
    "description": "",
    "lineNumber": 23,
    "deprecated": "Private method to only be used by classes that extend Model.\nNotifies all subscribers/observers of the calling child. \nThis function forces the presenter to fetch any data from the model itself.",
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 184,
    "kind": "member",
    "name": "_notify",
    "memberof": "src/components/models/modelOld.js~ModelOld",
    "static": false,
    "longname": "src/components/models/modelOld.js~ModelOld#_notify",
    "access": "private",
    "description": "",
    "lineNumber": 57,
    "deprecated": "Private method to only be used by classes that extend Model.\nNotifies a specific subscriber/observer of the calling child.",
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "observer",
        "description": "An observer to send a message to"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "A message to send to the observer"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true: if the observer exists, a message will be sent; false: if the observer does not exist, no message sent"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 185,
    "kind": "member",
    "name": "subscribe",
    "memberof": "src/components/models/modelOld.js~ModelOld",
    "static": false,
    "longname": "src/components/models/modelOld.js~ModelOld#subscribe",
    "access": "public",
    "description": "",
    "lineNumber": 72,
    "deprecated": "Adds (subscribes) an observer to the calling child/subject to the subscription list.",
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "observer",
        "description": "An observing class"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 186,
    "kind": "member",
    "name": "unsubscribe",
    "memberof": "src/components/models/modelOld.js~ModelOld",
    "static": false,
    "longname": "src/components/models/modelOld.js~ModelOld#unsubscribe",
    "access": "public",
    "description": "",
    "lineNumber": 82,
    "deprecated": "Removes (unsubscribes) an observer from the calling child/subject's subscription list.",
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "observer",
        "description": "An observing class"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 187,
    "kind": "member",
    "name": "exists",
    "memberof": "src/components/models/modelOld.js~ModelOld",
    "static": false,
    "longname": "src/components/models/modelOld.js~ModelOld#exists",
    "access": "public",
    "description": "",
    "lineNumber": 93,
    "deprecated": "Checks if an observer exists in the observer list.",
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "objectClass",
        "description": "A class"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true: if the class is an observer; false: if the class is not an observer"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 188,
    "kind": "file",
    "name": "src/components/models/profile-model.js",
    "content": "import Model from './model';\nimport Database from '../../util/database';\nimport AuthState from '../../util/authenticationstate';\nimport PersistStorage from '../../util/persistentstorage';\nimport ImageUtil from '../../util/imageutility';\n\nconst PROFILE_TYPE = ImageUtil.getTypes().PROFILE;\n\n/**\n * Class for the Profile model to be used by the ProfilePresenter\n * @extends Model\n */\nclass ProfileModel extends Model {\n\t/**\n\t * Creates an instance of ProfileModel. Sets the default callback, creates an observerlist,\n\t * and registers an on read from the database.\n\t *\n\t * @constructor\n\t */\n\tconstructor() {\n\t\tsuper();\n\t\tthis._callback = this._defaultCallback;\n\n\t\tthis._data = {data: []};\n\t\tthis._createObserverList();\n\t\tthis._getUserDataFromDB();\t\t\n\t}\n\n\t/**\n\t * Default callback\n\t */\n\t_defaultCallback(message) {\n\t\tconsole.log(message);\n\t}\n\n\t/**\n\t * Set the model's callback to a new callback. This callback can be used anywhere and is usually passed in from a presenter.\n\t *\n\t * @param {Function} callback - A callback to run when certain code is executed\n\t */\n\tsetCallback(callback) {\n\t\tthis._callback = callback;\n\t}\n\n\t/**\n\t * Get the user ID from the database, authstate or persistent storage, then read from the database.\n\t */\n\t_getUserDataFromDB() {\n\t\tconst userID = AuthState.getCurrentUserID(); // Check this first, data might already be loaded\n\t\tif (userID == null) {\n\t\t\tthis.checkAuthenticationState((verifiedUserID) => {\n\t\t\t\tthis._readDBUserOnce(verifiedUserID);\n\t\t\t})\n\t\t} else {\n\t\t\tthis._readDBUserOnce(userID);\n\t\t}\n\t}\n\n\t/**\n\t * Read from the database once with the user id.\n\t *\n\t * @param {string} userID - The user's ID\n\t */\n\t_readDBUserOnce(userID) {\n\t\tDatabase.readProfileDataOnce(userID, (snapshot) => {\n\t\t\tconst retrievedData = snapshot.val();\n\t\t\tif (retrievedData != null && retrievedData != undefined) {\n\t\t\t\tconst toStore = {\n\t\t\t\t\tprofilePicture: retrievedData.thumbnail[0],\n\t\t\t\t\tfull_name: retrievedData.full_name,\n\t\t\t\t\temail: retrievedData.email,\n\t\t\t\t\tphone_num: retrievedData.phone_num\n\t\t\t\t}\n\t\t\t\tthis._insertDataOnRead(userID, retrievedData);\n\t\t\t\tthis._addProfileDataLocally(userID, toStore);\n\t\t\t\tthis._notifyAll(null); // Don't supply data to force a refresh by the presenter\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Check the authentication state of the user.\n\t * TODO : Consider extracting out to AuthenticationModel\n\t *\n\t * @param {Function} onComplete - A callback function to call when authentication has completed\n\t */\n\tasync checkAuthenticationState(onComplete) {\n\t\t// Offline authentication check first, if it fails, then check database\n\t\tawait PersistStorage.retrieveData('userToken', async (userToken) => {\n\t\t\tif (userToken == null || userToken == undefined) {\n\t\t\t\t// Only check database user if no user token stored\n\t\t\t\tawait Database.getCurrentUser((userID) => {\n\t\t\t\t\tonComplete(userID);\n\t\t\t\t});\t\n\t\t\t} else {\n\t\t\t\tonComplete(userToken);\n\t\t\t}\n\t\t}, (error) => {\n\t\t\tonComplete(null);\n\t\t});\n\t}\n\n\t/**\n\t * Get method for presenters to get data.\n\t *\n\t * @return {Object} data stored in the model\n\t */\n\tget() {\n\t\treturn {...this._data} // Immutable\n\t}\n\n\t/**\n\t * Gets the profile data from Asyncstorage.\n\t * @deprecated Use getProfileData instead\n\t */\n\tgetProfilePicture(callback) {\n\t\tthis.getProfileData(callback);\n\t}\n\n\t/**\n\t * Gets the profile data from Asyncstorage.\n\t * @param {Function} callback - A callback to call with the retrieved data\n\t */\n\tasync getProfileData(callback) {\n\t\tconst DEFAULT_PROFILE_IMAGE = ImageUtil.getDefaultImage(PROFILE_TYPE);\n\t\tconst userID = AuthState.getCurrentUserID();\n\t\tconst default_data = {id: userID, full_name: 'Not Found', thumbnail: [DEFAULT_PROFILE_IMAGE]};\n\t\tawait PersistStorage.retrieveData(userID, (data) => {\n\t\t\t// console.log(data);\n\t\t\tif (data != null && data.startsWith('{') && data.endsWith('}')) {\n\t\t\t\tcallback(JSON.parse(data));\n\t\t\t\tthis._notifyAll(data); // Must supply data otherwise recursive call will start\n\t\t\t}\n\t\t}, (error) => {\n\t\t\tcallback(default_data);\n\t\t\tthis._notifyAll(default_data); // Must supply data otherwise recursive call will start\n\t\t\tconsole.log(error);\n\t\t});\n\t}\n\n\t/**\n\t * Writes the profile data to Asyncstorage so it can be used later.\n\t *\n\t * @param {string} userID - The current user's id\n\t * @param {Object} data - The data to be stored\n\t */\n\tasync _addProfileDataLocally(userID, data) {\n\t\tif (data != null && data != undefined && data != {}) {\n\t\t\tawait PersistStorage.storeData(userID, JSON.stringify(data), (error) => {console.log(error)});\n\t\t}\n\t}\n\n\t/**\n\t * Update method for presenters to update the model's data. Datetime and Owner are handled in database class.\n\t *\n\t * @param {Object} newData - New data to add\n\t */\n\tupdate(newData) {\n\t\tif (newData.data.id === '' || newData.data.id == undefined) {\n\t\t\tnewData.data.id = AuthState.getCurrentUserID();\n\t\t\t// This should never happen, but a fail safe just in-case\n\t\t\tif (newData.data.id == null || newData.data.id == undefined) {\n\t\t\t\tthis._callback(false);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\t// Check if it exists, and get index\n\t\t\tconst {exists, index} = this._profileDataExists(newData);\n\n\t\t\tif (exists && this._checkImages(index, newData.data.thumbnail)) {\n\t\t\t\tnewData.data.thumbnail = this._removeIllustrationKey(newData.data.thumbnail);\n\t\t\t\tthis._insertDataOnUpdate(newData);\n\t\t\t\tthis._editExistingInDatabase(newData.data, (result) => {this._callback(true); this._notifyAll(this._data);});\n\n\t\t\t} else {\n\t\t\t\tconst { ProfileImages } = Database.getImageFolders();\n\n\t\t\t\t// Write to database\n\t\t\t\tthis._writeImageToDBStorage(newData.data.id, newData.data.thumbnail, ProfileImages, (uploaded_images) => {\n\t\t\t\t\tnewData.data.thumbnail = uploaded_images;\n\n\t\t\t\t\t// Check if there's actually images \n\t\t\t\t\tif (!ImageUtil.checkImageListValid(uploaded_images)) {\n\t\t\t\t\t\tthis._callback(false);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._insertDataOnUpdate(newData);\n\n\t\t\t\t\tconst funcCall = exists ? this._editExistingInDatabase : this._writeNewInDatabase;\n\t\t\t\t\tfuncCall(newData.data, (result) => {\n\n\t\t\t\t\t\tthis._callback(result); \n\t\t\t\t\t\tthis._notifyAll(this._data);\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\tconst toStore = {\n\t\t\t\t\t\temail: newData.data.email,\n\t\t\t\t\t\tfull_name: newData.data.full_name,\n\t\t\t\t\t\tid: newData.data.id,\n\t\t\t\t\t\tphoneNum: newData.data.phoneNum,\n\t\t\t\t\t\tprofilePicture: newData.data.thumbnail[0]\n\t\t\t\t\t}\n\t\t\t\t\tthis._addProfileDataLocally(newData.data.id, toStore);\n\n\t\t\t\t}, this._callback);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t\tthis._callback(false);\n\t\t}\n\t}\n\n\t/**\n\t * Checks if there are new images in the bike stored vs what was passed in.\n\t *\n\t * @param {Number} index - The index of the bike in the local data\n\t * @param {List} thumbnails - A list of thumbnails\n\t * @return {Boolean} true: If the thumbnails are the same; false: If the thumbnails are different or if the bike doesn't exist\n\t */\n\t_checkImages(index, thumbnails) {\n\t\tif (index >= 0) {\n\t\t\tconst profile = this._data.data[index];\n\t\t\treturn JSON.stringify(profile.thumbnail) == JSON.stringify(thumbnails);\n\t\t} else {\n\t\t\treturn false; // Profile does not exist\n\t\t}\n\t}\n\n\t/**\n\t * Removes the illustration key from the object and only adds the actual link.\n\t *\n\t * @param {List} thumbnails - A list of thumbnail objects with the property 'illustration'\n\t * @return {List} A list of thumbnails\n\t */\n\t_removeIllustrationKey(thumbnails) {\n\t\tlet new_thumbnails = [];\n\t\tfor (let i=0; i < thumbnails.length; i++) {\n\t\t\tnew_thumbnails.push(thumbnails[i].illustration);\n\t\t}\n\t\treturn new_thumbnails;\n\t}\n\n\t/**\n\t * Write the image to the firebase storage and call the callbacks with the urls that were defined.\n\t *\n\t * @param {Number} id - The id of the profile corresponding to the image\n\t * @param {List} images - A list of objects with the property 'illustration'\n\t * @param {string} imagesFolder - The folder to upload images to\n\t * @param {Function} onSuccess - A callback to call when an image has been successfully uploaded\n\t * @param {Function} onError - A callback to call when an image has failed to upload\n\t */\n\t_writeImageToDBStorage(id, images, imagesFolder, onSuccess, onError) {\n\t\tconst FILE_EXTENSION = '.jpg';\n\t\tconst DEFAULT_INDEX = 0;\n\t\tlet uploaded_pictures = [];\n\n\t\t// If there are no images, return\n\t\tif (!ImageUtil.checkImageListValid(images)) {\n\t\t\tonError(false);\n\t\t\treturn;\n\t\t}\n\t\n\t\t// Check if there's a default image, if so, skip it and just use the default image\n\t\tif (ImageUtil.isDefaultImage(PROFILE_TYPE, images[DEFAULT_INDEX].illustration)) {\n\t\t\tonSuccess([images[DEFAULT_INDEX].illustration]);\n\t\t\treturn;\n\t\t}\n\n\t\t// Check if the image has already been uploaded, if it has, just skip it\n\t\tif (ImageUtil.isAlreadyUploaded(images[DEFAULT_INDEX].illustration)) {\n\t\t\tuploaded_pictures.push(images[DEFAULT_INDEX].illustration);\n\t\t\tonSuccess(uploaded_pictures);\n\t\t\treturn;\n\t\t}\n\n\t\t// Name of file is the index and the file extension\n\t\tconst filename = DEFAULT_INDEX + ImageUtil.getFileExtension();\n\t\t// Write image to database\n\t\tDatabase.writeImage(id, images[DEFAULT_INDEX].illustration, filename, imagesFolder, (url) => {\n\t\t\tuploaded_pictures.push(url);\n\t\t\tonSuccess(uploaded_pictures);\n\t\t\treturn url;\n\t\t}, (error) => {\n\t\t\tconsole.log(error);\n\t\t\tonError(false);\n\t\t});\n\n\t}\n\n\t// Could generalize _writeNewInDatabase and _editExistingInDatabase into one function\n\n\t/**\n\t * Write new data in database and call the function callback depending on if it was successful or not.\n\t *\n\t * @param {Object} newData - Data to be written to the database\n\t * @param {Function} callback - A function to call on the success or failure of the call\n\t */\n\t_writeNewInDatabase(newData, callback) {\n\t\treturn Database.writeProfileData(newData, (data) => {\n\t\t\t// console.log(data);\n\t\t\tcallback(typeof data !== 'undefined' && data !== undefined);\n\t\t\t// return typeof data !== 'undefined' && data !== undefined\n\t\t\t// this._callback(typeof data !== 'undefined' && data !== undefined);\n\t\t},(error) => {\n\t\t\tconsole.log(error);\n\t\t\tcallback(false);\n\t\t\t// this._callback(false);\n\t\t});\n\t}\n\n\t/**\n\t * Overwrite existing data in database and call the function callback depending on if it was successful or not.\n\t *\n\t * @param {Object} newData - Data to be written to the database\n\t * @param {Function} callback - A function to call on the success or failure of the call\n\t */\n\t_editExistingInDatabase(newData, callback) {\n\t\treturn Database.editProfileData(newData, (data) => {\n\t\t\t// console.log(data);\n\t\t\tcallback(typeof data !== 'undefined' && data !== undefined);\n\t\t\t// return typeof data !== 'undefined' && data !== undefined;\n\t\t\t// this._callback(typeof data !== 'undefined' && data !== undefined);\n\t\t},(error) => {\n\t\t\tconsole.log(error);\n\t\t\tcallback(false);\n\t\t\t// this._callback(false);\n\t\t});\n\t}\n\n\t/**\n\t * Insert data into the data object on an update trigger (from Presenter).\n\t *\n\t * @param {Object} newData - New data passed in, of the form : {data: []}\n\t * @return {Boolean} true: Data was an edited value; false: Data was a new value\n\t */\n\t_insertDataOnUpdate(newData) {\n\t\tlet i = 0;\n\n\t\t// If only one piece, just insert it\n\t\tif (this._data.data.length === 0) {\n\t\t\tthis._data.data.push(newData.data);\n\t\t\treturn false;\n\t\t}\n\n\t\tthis._data.data[0] = newData.data;  // Data found, overwrite\n\t\treturn true;\n\t}\n\n\t/**\n\t * Checks if the profile exists based on the data of the profile.\n\t * \n\t * @param {Object} profileData - The data to check\n\t * @return {Boolean, Number} exists: true: If the profile exists; false: otherwise. index - The index of the profile if it exists, -1 if not\n\t */\n\t_profileDataExists(profileData) {\n\t\treturn this._profileIDExists(profileData.data.id)\n\t}\n\n\t/**\n\t * Checks if the profile exists based on the id.\n\t *\n\t * @param {string} id - The id of a profile\n\t * @return {Boolean, Number} exists: true: If the profile exists; false: otherwise. index - The index of the profile if it exists, -1 if not\n\t */\n\t_profileIDExists(id) {\n\t\tconst exists = this._data.data[0].id === id;\n\t\tconst index = exists ? 0 : -1;\n\t\treturn { exists, index };\n\t}\n\n\t/**\n\t * Checks if an object has a certain property.\n\t * \n\t * @param {Object} obj - An object to check\n\t * @param {string} property - The name of a property\n\t * @return {Boolean} true: if the object has the property; false: otherwise\n\t */\n\t_hasProperty(obj, property) {\n\t\treturn obj.hasOwnProperty(property);\n\t}\n\n\t/**\n\t * Insert data into the data object on a read from the database.\n\t *\n\t * @param {string} currentUser - The user id of the current user\n\t * @param {Object} databaseData - An objects of objects containing data from the database.\n\t */\n\t_insertDataOnRead(currentUser, databaseData) {\n\t\tlet tempData = {data:[]};\n\t\tif (databaseData != null) { // Check if there are objects in the database\n\n\t\t\t// If it doesn't have an id, skip it because it isn't valid\n\t\t\tif (!this._hasProperty(databaseData, 'id') || currentUser == null || currentUser != databaseData.id) { \n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\ttempData.data.push(databaseData);\n\t\t\tthis._data = tempData;\n\t\t}\n\t\t// console.log(this._data);\n\t}\n}\n\nexport default ProfileModel;",
    "static": true,
    "longname": "/Users/seanr/Downloads/temp/src/components/models/profile-model.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 189,
    "kind": "variable",
    "name": "PROFILE_TYPE",
    "memberof": "src/components/models/profile-model.js",
    "static": true,
    "longname": "src/components/models/profile-model.js~PROFILE_TYPE",
    "access": "public",
    "export": false,
    "importPath": "PedalPatrol/src/components/models/profile-model.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 190,
    "kind": "class",
    "name": "ProfileModel",
    "memberof": "src/components/models/profile-model.js",
    "static": true,
    "longname": "src/components/models/profile-model.js~ProfileModel",
    "access": "public",
    "export": true,
    "importPath": "PedalPatrol/src/components/models/profile-model.js",
    "importStyle": "ProfileModel",
    "description": "Class for the Profile model to be used by the ProfilePresenter",
    "lineNumber": 13,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 191,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/components/models/profile-model.js~ProfileModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/profile-model.js~ProfileModel#constructor",
    "access": "public",
    "description": "Creates an instance of ProfileModel. Sets the default callback, creates an observerlist,\nand registers an on read from the database.",
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ]
  },
  {
    "__docId__": 192,
    "kind": "member",
    "name": "_callback",
    "memberof": "src/components/models/profile-model.js~ProfileModel",
    "static": false,
    "longname": "src/components/models/profile-model.js~ProfileModel#_callback",
    "access": "private",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 193,
    "kind": "member",
    "name": "_data",
    "memberof": "src/components/models/profile-model.js~ProfileModel",
    "static": false,
    "longname": "src/components/models/profile-model.js~ProfileModel#_data",
    "access": "private",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "{\"data\": *}"
      ]
    }
  },
  {
    "__docId__": 194,
    "kind": "method",
    "name": "_defaultCallback",
    "memberof": "src/components/models/profile-model.js~ProfileModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/profile-model.js~ProfileModel#_defaultCallback",
    "access": "private",
    "description": "Default callback",
    "lineNumber": 32,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 195,
    "kind": "method",
    "name": "setCallback",
    "memberof": "src/components/models/profile-model.js~ProfileModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/profile-model.js~ProfileModel#setCallback",
    "access": "public",
    "description": "Set the model's callback to a new callback. This callback can be used anywhere and is usually passed in from a presenter.",
    "lineNumber": 41,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "A callback to run when certain code is executed"
      }
    ],
    "return": null
  },
  {
    "__docId__": 197,
    "kind": "method",
    "name": "_getUserDataFromDB",
    "memberof": "src/components/models/profile-model.js~ProfileModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/profile-model.js~ProfileModel#_getUserDataFromDB",
    "access": "private",
    "description": "Get the user ID from the database, authstate or persistent storage, then read from the database.",
    "lineNumber": 48,
    "params": [],
    "return": null
  },
  {
    "__docId__": 198,
    "kind": "method",
    "name": "_readDBUserOnce",
    "memberof": "src/components/models/profile-model.js~ProfileModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/profile-model.js~ProfileModel#_readDBUserOnce",
    "access": "private",
    "description": "Read from the database once with the user id.",
    "lineNumber": 64,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userID",
        "description": "The user's ID"
      }
    ],
    "return": null
  },
  {
    "__docId__": 199,
    "kind": "method",
    "name": "checkAuthenticationState",
    "memberof": "src/components/models/profile-model.js~ProfileModel",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/components/models/profile-model.js~ProfileModel#checkAuthenticationState",
    "access": "public",
    "description": "Check the authentication state of the user.\nTODO : Consider extracting out to AuthenticationModel",
    "lineNumber": 87,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "onComplete",
        "description": "A callback function to call when authentication has completed"
      }
    ],
    "return": null
  },
  {
    "__docId__": 200,
    "kind": "method",
    "name": "get",
    "memberof": "src/components/models/profile-model.js~ProfileModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/profile-model.js~ProfileModel#get",
    "access": "public",
    "description": "Get method for presenters to get data.",
    "lineNumber": 108,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "data stored in the model"
    },
    "params": []
  },
  {
    "__docId__": 201,
    "kind": "method",
    "name": "getProfilePicture",
    "memberof": "src/components/models/profile-model.js~ProfileModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/profile-model.js~ProfileModel#getProfilePicture",
    "access": "public",
    "description": "Gets the profile data from Asyncstorage.",
    "lineNumber": 116,
    "deprecated": "Use getProfileData instead",
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 202,
    "kind": "method",
    "name": "getProfileData",
    "memberof": "src/components/models/profile-model.js~ProfileModel",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/components/models/profile-model.js~ProfileModel#getProfileData",
    "access": "public",
    "description": "Gets the profile data from Asyncstorage.",
    "lineNumber": 124,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "A callback to call with the retrieved data"
      }
    ],
    "return": null
  },
  {
    "__docId__": 203,
    "kind": "method",
    "name": "_addProfileDataLocally",
    "memberof": "src/components/models/profile-model.js~ProfileModel",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/components/models/profile-model.js~ProfileModel#_addProfileDataLocally",
    "access": "private",
    "description": "Writes the profile data to Asyncstorage so it can be used later.",
    "lineNumber": 147,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userID",
        "description": "The current user's id"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The data to be stored"
      }
    ],
    "return": null
  },
  {
    "__docId__": 204,
    "kind": "method",
    "name": "update",
    "memberof": "src/components/models/profile-model.js~ProfileModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/profile-model.js~ProfileModel#update",
    "access": "public",
    "description": "Update method for presenters to update the model's data. Datetime and Owner are handled in database class.",
    "lineNumber": 158,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "newData",
        "description": "New data to add"
      }
    ],
    "return": null
  },
  {
    "__docId__": 205,
    "kind": "method",
    "name": "_checkImages",
    "memberof": "src/components/models/profile-model.js~ProfileModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/profile-model.js~ProfileModel#_checkImages",
    "access": "private",
    "description": "Checks if there are new images in the bike stored vs what was passed in.",
    "lineNumber": 223,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": "The index of the bike in the local data"
      },
      {
        "nullable": null,
        "types": [
          "List"
        ],
        "spread": false,
        "optional": false,
        "name": "thumbnails",
        "description": "A list of thumbnails"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true: If the thumbnails are the same; false: If the thumbnails are different or if the bike doesn't exist"
    }
  },
  {
    "__docId__": 206,
    "kind": "method",
    "name": "_removeIllustrationKey",
    "memberof": "src/components/models/profile-model.js~ProfileModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/profile-model.js~ProfileModel#_removeIllustrationKey",
    "access": "private",
    "description": "Removes the illustration key from the object and only adds the actual link.",
    "lineNumber": 238,
    "params": [
      {
        "nullable": null,
        "types": [
          "List"
        ],
        "spread": false,
        "optional": false,
        "name": "thumbnails",
        "description": "A list of thumbnail objects with the property 'illustration'"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "List"
      ],
      "spread": false,
      "description": "A list of thumbnails"
    }
  },
  {
    "__docId__": 207,
    "kind": "method",
    "name": "_writeImageToDBStorage",
    "memberof": "src/components/models/profile-model.js~ProfileModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/profile-model.js~ProfileModel#_writeImageToDBStorage",
    "access": "private",
    "description": "Write the image to the firebase storage and call the callbacks with the urls that were defined.",
    "lineNumber": 255,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "The id of the profile corresponding to the image"
      },
      {
        "nullable": null,
        "types": [
          "List"
        ],
        "spread": false,
        "optional": false,
        "name": "images",
        "description": "A list of objects with the property 'illustration'"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "imagesFolder",
        "description": "The folder to upload images to"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "onSuccess",
        "description": "A callback to call when an image has been successfully uploaded"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "onError",
        "description": "A callback to call when an image has failed to upload"
      }
    ],
    "return": null
  },
  {
    "__docId__": 208,
    "kind": "method",
    "name": "_writeNewInDatabase",
    "memberof": "src/components/models/profile-model.js~ProfileModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/profile-model.js~ProfileModel#_writeNewInDatabase",
    "access": "private",
    "description": "Write new data in database and call the function callback depending on if it was successful or not.",
    "lineNumber": 301,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "newData",
        "description": "Data to be written to the database"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "A function to call on the success or failure of the call"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 209,
    "kind": "method",
    "name": "_editExistingInDatabase",
    "memberof": "src/components/models/profile-model.js~ProfileModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/profile-model.js~ProfileModel#_editExistingInDatabase",
    "access": "private",
    "description": "Overwrite existing data in database and call the function callback depending on if it was successful or not.",
    "lineNumber": 320,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "newData",
        "description": "Data to be written to the database"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "A function to call on the success or failure of the call"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 210,
    "kind": "method",
    "name": "_insertDataOnUpdate",
    "memberof": "src/components/models/profile-model.js~ProfileModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/profile-model.js~ProfileModel#_insertDataOnUpdate",
    "access": "private",
    "description": "Insert data into the data object on an update trigger (from Presenter).",
    "lineNumber": 339,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "newData",
        "description": "New data passed in, of the form : {data: []}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true: Data was an edited value; false: Data was a new value"
    }
  },
  {
    "__docId__": 211,
    "kind": "method",
    "name": "_profileDataExists",
    "memberof": "src/components/models/profile-model.js~ProfileModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/profile-model.js~ProfileModel#_profileDataExists",
    "access": "private",
    "description": "Checks if the profile exists based on the data of the profile.",
    "lineNumber": 358,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "profileData",
        "description": "The data to check"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean, Number"
      ],
      "spread": false,
      "description": "exists: true: If the profile exists; false: otherwise. index - The index of the profile if it exists, -1 if not"
    }
  },
  {
    "__docId__": 212,
    "kind": "method",
    "name": "_profileIDExists",
    "memberof": "src/components/models/profile-model.js~ProfileModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/profile-model.js~ProfileModel#_profileIDExists",
    "access": "private",
    "description": "Checks if the profile exists based on the id.",
    "lineNumber": 368,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "The id of a profile"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean, Number"
      ],
      "spread": false,
      "description": "exists: true: If the profile exists; false: otherwise. index - The index of the profile if it exists, -1 if not"
    }
  },
  {
    "__docId__": 213,
    "kind": "method",
    "name": "_hasProperty",
    "memberof": "src/components/models/profile-model.js~ProfileModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/profile-model.js~ProfileModel#_hasProperty",
    "access": "private",
    "description": "Checks if an object has a certain property.",
    "lineNumber": 381,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "An object to check"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "property",
        "description": "The name of a property"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true: if the object has the property; false: otherwise"
    }
  },
  {
    "__docId__": 214,
    "kind": "method",
    "name": "_insertDataOnRead",
    "memberof": "src/components/models/profile-model.js~ProfileModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/profile-model.js~ProfileModel#_insertDataOnRead",
    "access": "private",
    "description": "Insert data into the data object on a read from the database.",
    "lineNumber": 391,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "currentUser",
        "description": "The user id of the current user"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "databaseData",
        "description": "An objects of objects containing data from the database."
      }
    ],
    "return": null
  },
  {
    "__docId__": 216,
    "kind": "file",
    "name": "src/components/models/signup-model.js",
    "content": "//model\n// attributes: password, username\n// function : getUsername/password setUsername/password\n\n\nimport Model from './model';\nimport Database from '../../util/database';\n\n/**\n * Class for the signup model to be used by the SignupPresenter\n * @extends Model\n */\nclass SignupModel extends Model {\n\t/**\n\t * Creates an instance of SignupModel.\n\t * @constructor\n\t */\n\tconstructor(){\n\t\tsuper();\n\t\tthis._data = {\n\t\t\tdata: [\n\t\t\t\t\t{\n\t\t\t\t\t\tusername:\"\",\n\t\t\t\t\t\tpassword:\"\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t}\n\t\tthis._createObserverList();\n\t}\n\n\t/**\n\t * Return the data from the model.\n\t *\n\t * @return {Object} The data stored in the model\n\t */\n\tget() {\n\t\treturn {...this._data}\n\t}\n\t\n\n\t/**\n\t * async method for presenters to know if the username and password is existed in the database\n\t * @param {Object} newData - data including username and password.\n\t */\n\tasync update(newData) {\n\t\t// this._data = {...this._data, ...newData} // Overwrite - Use this if the data is appended to previous data in the presenter\n\t\tthis._data.data.splice(0,1,newData.data); // Appends to the list - Use this if only a single piece of data is passed in\n\n\t\tlet errorMessage = true;\n\t\tDatabase.signUp(this._data.data[0].username, this._data.data[0].password).then(\n\t\t\t(userData) => {\n\t\t\tif (userData) {\n\t\t\t\tconsole.log('-----------------------------------------------------------------------')\n\t\t\t\tconsole.log(userData.user.uid);\n\t\t\t\tconsole.log(\"signup user id is: \"+userData.user.uid)\n\t\t\t\tDatabase.sendEmail(userData.user);\n\t\t\t\tDatabase.setAccount(userData.user);\n\t\t\t\tDatabase.signOut(this.onSuccessSignOut, this.onErrorCallback);\n\t\t\t}\n\t\t}).catch(this.onErrorCallback);\n\t}\n\n\t/**\n\t * Signout the user\n\t */\n\tonSuccessSignOut = () => {\n\t\t// console.log('Signed Out');\n\t\tthis._notifyAll(true);\n\t}\n\n\t/**\n\t * Error callback to call if there is an error.\n\t *\n\t * @param {string} error - The message of the error that occurred. default: null\n\t */\n\tonErrorCallback = (error=null) => {\n\t\tif (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\n\t\t// Handle Errors here.\n\t\terrorMessage = false;\n\t\tthis._notifyAll(errorMessage);\n\t}\n}\n\nexport default SignupModel;",
    "static": true,
    "longname": "/Users/seanr/Downloads/temp/src/components/models/signup-model.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 217,
    "kind": "class",
    "name": "SignupModel",
    "memberof": "src/components/models/signup-model.js",
    "static": true,
    "longname": "src/components/models/signup-model.js~SignupModel",
    "access": "public",
    "export": true,
    "importPath": "PedalPatrol/src/components/models/signup-model.js",
    "importStyle": "SignupModel",
    "description": "Class for the signup model to be used by the SignupPresenter",
    "lineNumber": 13,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 218,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/components/models/signup-model.js~SignupModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/signup-model.js~SignupModel#constructor",
    "access": "public",
    "description": "Creates an instance of SignupModel.",
    "lineNumber": 18,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ]
  },
  {
    "__docId__": 219,
    "kind": "member",
    "name": "_data",
    "memberof": "src/components/models/signup-model.js~SignupModel",
    "static": false,
    "longname": "src/components/models/signup-model.js~SignupModel#_data",
    "access": "private",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "{\"data\": *}"
      ]
    }
  },
  {
    "__docId__": 220,
    "kind": "method",
    "name": "get",
    "memberof": "src/components/models/signup-model.js~SignupModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/models/signup-model.js~SignupModel#get",
    "access": "public",
    "description": "Return the data from the model.",
    "lineNumber": 36,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The data stored in the model"
    },
    "params": []
  },
  {
    "__docId__": 221,
    "kind": "method",
    "name": "update",
    "memberof": "src/components/models/signup-model.js~SignupModel",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/components/models/signup-model.js~SignupModel#update",
    "access": "public",
    "description": "async method for presenters to know if the username and password is existed in the database",
    "lineNumber": 45,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "newData",
        "description": "data including username and password."
      }
    ],
    "return": null
  },
  {
    "__docId__": 222,
    "kind": "member",
    "name": "onSuccessSignOut",
    "memberof": "src/components/models/signup-model.js~SignupModel",
    "static": false,
    "longname": "src/components/models/signup-model.js~SignupModel#onSuccessSignOut",
    "access": "public",
    "description": "Signout the user",
    "lineNumber": 66,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 223,
    "kind": "member",
    "name": "onErrorCallback",
    "memberof": "src/components/models/signup-model.js~SignupModel",
    "static": false,
    "longname": "src/components/models/signup-model.js~SignupModel#onErrorCallback",
    "access": "public",
    "description": "Error callback to call if there is an error.",
    "lineNumber": 76,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": "The message of the error that occurred. default: null"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 224,
    "kind": "file",
    "name": "src/components/presenters/addbike-presenter.js",
    "content": "import BasePresenter from './presenter';\nimport { BikeM } from '../models/export-models'; // Using the BikeModel class because an AddBikeModel class would have the same purpose\nimport ImageUtil from '../../util/imageutility';\n\nconst NO_DATA = 'NO-DATA';\nconst BIKE_TYPE = ImageUtil.getTypes().BIKE;\n\n/**\n * Class for the AddBike presenter and view\n * @extends BasePresenter\n */\nclass AddBikePresenter extends BasePresenter {\n\t/**\n\t * Creates an instance of AddBikePresenter\n\t *\n\t * @constructor\n\t * @param {Object} view - An instance of a view class\n\t */\n\tconstructor(view) {\n\t\tsuper();\n\t\tthis.view = view;\n\t\tthis.currentPhotos = Object.assign(ImageUtil.getPhotoEntries(BIKE_TYPE));\n\t\t// this.currentPhotos = Object.assign(ImageUtil.getPhotoEntries());\n\t\tBikeM.subscribe(this);\n\t}\n\n\t/**\n\t * Updates the bike model with new data.\n\t *\n\t * @param {Object} newData - New data to update the model's data with.\n\t * @param {Function} callback - A function that will execute a callback when accessing is complete\n\t */\n\tupdate = (newData, callback) => {\n\t\tconst builtData = this._buildDataFromView(newData);\n\n\t\t// TODO : Proper checking to see if it was uploaded. Consider adding callback to onUpdated\n\t\tBikeM.setCallback(callback);\n\n\t\tBikeM.update(builtData);\n\t}\n\n\t/**\n\t * Delete a bike from the database\n\t *\n\t * @param {string} id - A bike id to delete\n\t * @param {Function} callback - A function to call when remove succeeds or fails\n\t */\n\tdeleteBike = (id, callback) => {\n\t\tBikeM.deleteBikeByID(id, (dataRemoved) => {\n\t\t\t// Need to do any processing here?\n\t\t\tcallback(dataRemoved);\n\t\t});\n\t}\n\n\t/**\n\t * Build the data obtained from the view and insert it into a new data object.\n\t * Current attributes of newData object: \n\t * \t\t\t{Object} inputTextData: [{name, multiline, disabled, text}]\n\t * \t\t\t{List} selectedColours\n\t * \t\t\t{Object} picture: uri\n\t *\t\t\n\t *\n\t * @param {Object} newData - The new data from the view. \n\t * @return {Object} The built data of the object. Attributes: data\n\t */\n\t_buildDataFromView = (newData) => {\n\t\tconst inputTextData = newData.inputTextData;\n\t\tconst selectedColours = newData.selectedColours;\n\t\tconst pictureSource = newData.picture;\n\t\tconst currentID = newData.currentID;\n\n\t\t// Just add the data into an object. More concise way to do this?\n\t\tlet builtData = {\n\t\t\tdata: {\n\t\t\t\tid: currentID,\n\t\t\t\tname: inputTextData[inputDataList.index.name].text,\n\t\t\t\tmodel: inputTextData[inputDataList.index.model].text,\n\t\t\t\tbrand: inputTextData[inputDataList.index.brand].text,\n\t\t\t\tcolour: selectedColours,\n\t\t\t\tserial_number: inputTextData[inputDataList.index.serial_number].text,\n\t\t\t\twheel_size: inputTextData[inputDataList.index.wheel_size].text,\n\t\t\t\tframe_size: inputTextData[inputDataList.index.frame_size].text,\n\t\t\t\tnotable_features: inputTextData[inputDataList.index.notable_features].text,\n\t\t\t\tthumbnail: pictureSource != null ? pictureSource : [{illustration: ImageUtil.getDefaultImage(BIKE_TYPE)}],\n\t\t\t}\n\t\t}\n\n\t\treturn builtData;\n\t}\n\n\n\t/**\n\t * Called when the model is updated with new data. Refreshes the state of the view.\n\t * Method is supplied with the data to add.\n\t * Better way to refresh the state?\n\t *\n\t * @param {Object} newData - New data to add.\n\t */\n\tonUpdated = (newData) => {\n\t\t// Do something with the new data or let the view auto update?\n\t\t// console.log(newData)\n\t\tthis.view.refreshState();\n\t};\n\n\t/**\n\t * Gets the data from the model and returns it to the caller.\n\t *\n\t * @return {Object} Data from the model.\n\t */\n\tgetData = () => {\n\t\treturn JSON.parse(JSON.stringify(BikeM.get().data));\n\t};\n\n\t/**\n\t * If the view or presenter is destroyed, unsubscribe the presenter from the model.\n\t */\n\tonDestroy = () => {\n\t\tBikeM.unsubscribe(this);\n\t};\n\n\n\t/**\n\t * Checks the editing state of the view and calls one of its passed in functions.\n\t *\n\t * @param {Boolean} editingState - The editing state of the view\n\t * @param {Function} success - A function to call on a true value of the editing state\n\t * @param {Function} failure - A function to call on a false value of the editing state\n\t */\n\tcheckEditingState = (editingState, success, failure) => {\n\t\t// Do any checks on the editing state\n\t\tif (editingState) {\n\t\t\tsuccess();\n\t\t} else {\n\t\t\tfailure();\n\t\t}\n\t}\n\n\t\n\t/**\n\t * Open the image picker. Set the editing option to true.\n\t *\n\t * @param {Object} imagePicker - The ImagePicker class from react-native-image-picker\n\t * @param {Function} setEditing - A function so the presenter can set the editing value\n\t * @param {Number} id - The index of the photo to change\n\t * @param {List} photos - A list of photos as strings\n\t */\n\tselectPhotoTapped(imagePicker, setEditing, id, photos) {\n\t\tconst options = {\n\t\t\tquality: 1.0,\n\t\t\tmaxWidth: 500,\n\t\t\tmaxHeight: 500,\n\t\t\tstorageOptions: {\n\t\t\t\tskipBackup: true,\n\t\t\t},\n\t\t};\n\n\t\t // Set the editing state to true by calling a passed in function where the view can do what it needs to\n\t\tsetEditing(true);\n\n\t\timagePicker.showImagePicker(options, (response) => {\n\t\t\tconsole.log('Response = ', response);\n\n\t\t\tif (response.didCancel) {\n\t\t\t\tconsole.log('User cancelled photo picker');\n\t\t\t} else if (response.error) {\n\t\t\t\tconsole.log('ImagePicker Error: ', response.error);\n\t\t\t} else if (response.customButton) {\n\t\t\t\tconsole.log('User tapped custom button: ', response.customButton);\n\t\t\t} else {\n\t\t\t\tlet source = { uri: response.uri };\n\n\t\t\t\t// You can also display the image using data:\n\t\t\t\t// let source = { uri: 'data:image/jpeg;base64,' + response.data };\n\n\t\t\t\tphotos[id].illustration = source;\n\t\t\t\tthis.currentPhotos = photos;\n\n\t\t\t\tconsole.log(id, photos);\n\n\t\t\t\tthis.view.setState({\n\t\t\t\t\tphotoEntries: JSON.parse(JSON.stringify(this.currentPhotos)),\n\t\t\t\t});\n\n\t\t\t\tthis.view.refreshState();\n\t\t\t}\n\t\t});\n\t}\n\n\n\t/**\n\t * Converts a list of colour objects to a list of objects with a component using the renderer function.\n\t *\n\t * @param {List} colours - A list of colour objects (name, colour)\n\t * @param {Function} renderer - A function that will produce the component to render for this colour\n\t */\n\tchangeText = (colours, renderer) => {\n\t\tlet new_colours = []\n\t\tlet new_item = {}\n\t\tlet count = 0\n\t\tfor (const item of colours) {\n\t\t\tconst colour = item.colour\n\t\t\tnew_item.text_component = renderer(colour, item.name); // Render the component using a callback\n\t\t\t// <Text style={[{color: colour}, styles.colourText]}>{item.name}</Text>\n\t\t\tnew_item.name = item.name;\n\t\t\tnew_colours.push(new_item);\n\t\t\tnew_item = {} // Need to reset the item because sometimes it doesn't clear\n\t\t}\n\t\t\n\t\t// Yeah don't do this, but calling a function in the view doesn't seem to work well either\n\t\tthis.view.setState({\n\t\t\tcolours: new_colours\n\t\t});\n\t}\n\n\t/**\n\t * @private\n\t * Makes sure the object with the key exists.\n\t */\n\tgetProp = (object, key) => object && this.check(object[key]);\n\n\t/**\n\t * @private\n\t * Simple regex check\n\t * \n\t * return {Boolean}\n\t */\n\tcheck = (s) => {\n\t\treturn s.replace(/[\\W\\[\\] ]/g, function (a) {\n\t\t\treturn a;\n\t\t})\n\t};\n\n\t/**\n\t * @private\n\t * This function is an adaptation of the filter function used in SectionedMultiSelect.\n\t * This one filters on uniqueKey instead of displayKey and ignores accents since it is\n\t * a predefined list of colours.\n\t *\n\t * Link: https://github.com/renrizzolo/react-native-sectioned-multi-select/blob/master/exampleapp/App.js#L337\n\t */\n\tfilterItems = (searchTerm, items, { subKey, displayKey, uniqueKey }) => {\n\t\tlet filteredItems = [];\n\t\tlet newFilteredItems = [];\n\t\titems.forEach((item) => {\n\t\t\tconst parts = searchTerm.trim().split(/[[ \\][)(\\\\/?\\-:]+/);\n\t\t\tconst regex = new RegExp(`(${parts.join('|')})`, 'i');\n\t\t\tif (regex.test(this.getProp(item, uniqueKey))) {\n\t\t\t\tfilteredItems.push(item);\n\t\t  \t}\n\t\t\tif (item[subKey]) {\n\t\t\t\tconst newItem = Object.assign({}, item);\n\t\t\t\tnewItem[subKey] = [];\n\t\t\t\titem[subKey].forEach((sub) => {\n\t\t\t\t\tif (regex.test(this.getProp(sub, uniqueKey))) {\n\t\t\t\t\t\tnewItem[subKey] = [...newItem[subKey], sub];\n\t\t\t\t\t\tnewFilteredItems = this.rejectProp(filteredItems, singleItem =>\n\t\t\t\t\t  \t\titem[uniqueKey] !== singleItem[uniqueKey]);\n\t\t\t\t\t\tnewFilteredItems.push(newItem);\n\t\t\t\t\t\tfilteredItems = newFilteredItems;\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t  \t}\n\t\t})\n\t\treturn filteredItems\n\t}\n\n\t/**\n\t * Checks the input data for required inputs and calls an alert function if inputs are missing.\n\t *\n\t * @param {List} inputData - A list of input data (see inputDataList for structure)\n\t * @param {Function} inputRequirementFailure - A function that will define the alert to be displayed.\n\t * @return {Boolean} true: some required inputs are blank; false: required inputs are not blank\n\t */\n\tcheckInputs = (inputData, inputRequirementFailure) => {\n\t\tconst all_defaults = ImageUtil.checkPhotosForDefaults(BIKE_TYPE, this.currentPhotos);\n\t\tlet required = this._getRequiredInputs(inputData);\n\t\tlet names = [];\n\t\tfor (let i=0; i < required.length; i++) {\n\t\t\tif (required[i].text === \"\") { // If it's empty then push\n\t\t\t\tnames.push(required[i].name);\n\t\t\t}\n\t\t}\n\n\t\tif (names.length !== 0 || all_defaults) { // If inputs or images were empty, call the callback\n\t\t\tall_defaults ? names.push('Images') : '';\n\t\t\tinputRequirementFailure(names);\n\t\t\treturn false;\n\t\t} else {\n\t\t\treturn !!(true & !all_defaults); // !! converts to boolean because '&' converts to number\n\t\t}\n\t}\n\n\t/**\n\t * Returns the required inputs based on the required property\n\t *\n\t * @param {List} inputs - A list of input data\n\t * @return {List} A list of required text inputs\n\t */\n\t_getRequiredInputs = (inputs) => {\n\t\treturn inputs.filter(obj => {return obj.required});\n\t}\n\n\n\t/**\n\t * Return the data for the text inputs.\n\t * Object:\n\t *\t\tname: the name/label of the text input\n\t * \t\tdisabled: true: if the field is disabled; false: otherwise\n\t * \t\tmultiline: true: if the input is allowed to span multiple lines; false: otherwise\n\t *\t\ttext: initial text of the input\n\t *\n\t * @param {Object} data - type 'Object' if there is data, type 'string' if no data\n\t * @param {Boolean} isEditPage - true: If the current page is 'Edit Bike' page; false: If 'Add Bike' page\n\t * @return {List} A list of data objects (name, multiline, text)\n\t */\n\tgetTextInputData = (data, isEditPage) => {\n\t\t// Do something with isEditPage to make sure that data isn't cleared that can't be edited.\n\t\t// For example, if we don't want user to edit the Serial Number, it would be disabled and not cleared when the 'Clear' button is clicked\n\t\treturn data === NO_DATA ? this._deepCopy(inputDataList.data) : this._translateDataToInput(data);\n\t}\n\n\n\t/**\n\t * Translates data input (Bike data) to the text inputs. Could be refactored to be made easier for adaptations.\n\t *\n\t * @param {Object} data - The data from the view (=== 'NO-DATA' if not set)\n\t * @return {List} A copy of the data that is now in the form of the text input\n\t */\n\t_translateDataToInput = (data) => {\n\t\tlet dataCopy = this._deepCopy(inputDataList.data);\n\n\t\t// To be safe, convert data to string\n\t\tdataCopy[inputDataList.index.name].text \t\t\t\t= this._getString(data.name);\n\t\tdataCopy[inputDataList.index.serial_number].text \t\t= this._getString(data.serial_number);\n\t\tdataCopy[inputDataList.index.brand].text \t\t\t\t= this._getString(data.brand);\n\t\tdataCopy[inputDataList.index.model].text\t\t\t\t= this._getString(data.model);\n\t\tdataCopy[inputDataList.index.notable_features].text \t= this._getString(data.notable_features);\n\t\tdataCopy[inputDataList.index.wheel_size].text\t\t\t= this._getString(data.wheel_size);\n\t\tdataCopy[inputDataList.index.frame_size].text\t\t\t= this._getString(data.frame_size);\n\n\t\tconst thumbnail = ImageUtil.formThumbnail(data.thumbnail);\n\t\tthis.currentPhotos = ImageUtil.addRemainingDefaults(BIKE_TYPE, thumbnail);\n\t\tthis.view.setState({ currentID: data.id });\n\n\t\treturn this._deepCopy(dataCopy); \n\t}\n\n\t/**\n\t * Checks if the value is valid and if so, convert it to a string.\n\t *\n\t * @param {Number/string} val - A number or string to check\n\t * @return {string} Value converted to a string\n\t */\n\t_getString = (val) => {\n\t\treturn val == undefined || val == null ? '' : val.toString();\n\t}\n\n\t/**\n\t * Resets the current photos to the default photos.\n\t */\n\tclearPhotos = () => {\n\t\tthis.currentPhotos = ImageUtil.getDefaultPhotos(BIKE_TYPE);\n\t}\n\n\t/**\n\t * Returns a deep copy of the current photos.\n\t *\n\t * @return {List} A list of the current photos\n\t */\n\tgetCurrentPhotos = () => {\n\t\treturn JSON.parse(JSON.stringify(this.currentPhotos));\n\t}\n\n\t/**\n\t * Returns a deep copy of the array by reassigning the values. This is to make sure we can clear the data.\n\t *\n\t * @return {List} A list to copy\n\t */\n\t_deepCopy = (array) => {\n\t\treturn array.map(a => Object.assign({}, a));\n\t}\n\n\n\t/**\n\t * Toggles the colours from the data if the data is present.\n\t *\n\t * @param {Object} sectionedMultiSelect - The multi select component from the view\n\t * @param {Object} data - The data from the view (=== 'NO-DATA' if not set)\n\t * @param {Function} onColoursFound - A function that submits the selected items back to the view\n\t * @param {string} UNIQUE_KEY - A unique key that is used to get the data from the item (same one that is used when defining the sectioned select)\n\t */\n\ttoggleColours = (sectionedMultiSelect, data, onColoursFound, UNIQUE_KEY) => {\n\t\tlet selectedItems = [];\n\t\tif (data !== NO_DATA) {\n\t\t\tfor (const colour of data.colour) {\n\t\t\t\titem = sectionedMultiSelect._findItem(colour);\n\t\t\t\tsectionedMultiSelect._itemSelected(item);\n\t\t\t\tsectionedMultiSelect._toggleItem(item, false);\n\t\t\t\tselectedItems.push(item[UNIQUE_KEY]); // Unique key corresponding to sectioned list\n\t\t\t}\n\t\t\tonColoursFound(selectedItems);\n\t\t}\n\t}\n}\n\nexport default AddBikePresenter;\n\n\n// List of text inputs for adding bike. Items in list appear in this order\n/*\n * data:\n *\t\tname: The name/label of the text input\n *\t\tdisabled: true: if the user can edit the field; false: otherwise\n *\t\tmultiline: true: if the user's text can span multiple lines; false: otherwise\n *\t\ttext: The initial text of the name/label\n */\nconst inputDataList = {\n\tindex: {\n\t\tbrand: \t\t\t\t0,\n\t\tmodel:\t\t\t\t1,\n\t\tserial_number: \t\t2,\n\t\tnotable_features: \t3,\n\t\twheel_size:\t\t\t4,\n\t\tframe_size:\t\t\t5,\n\t\tname: \t\t\t\t6,\n\t},\n\tdata: [\n\t\t{\n\t\t\tname: 'Brand',\n\t\t\tmultiline: false,\n\t\t\tdisabled: false,\n\t\t\trequired: true,\n\t\t\ttext: ''\n\t\t},\n\t\t{\n\t\t\tname: 'Model',\n\t\t\tmultiline: false,\n\t\t\tdisabled: false,\n\t\t\trequired: true,\n\t\t\ttext: ''\n\t\t},\n\t\t{\n\t\t\tname: 'Serial Number',\n\t\t\tmultiline: false,\n\t\t\tdisabled: false,\n\t\t\trequired: true,\n\t\t\ttext: ''\n\t\t},\n\t\t{\n\t\t\tname: 'Notable Features',\n\t\t\tmultiline: true,\n\t\t\tdisabled: false,\n\t\t\trequired: false,\n\t\t\ttext: ''\n\t\t},\n\t\t{\n\t\t\tname: 'Wheel Size',\n\t\t\tmultiline: false,\n\t\t\tdisabled: false,\n\t\t\trequired: false,\n\t\t\ttext: ''\n\t\t},\n\t\t{\n\t\t\tname: 'Frame Size',\n\t\t\tmultiline: false,\n\t\t\tdisabled: false,\n\t\t\trequired: false,\n\t\t\ttext: ''\n\t\t},\n\t\t{\n\t\t\tname: 'Nickname',\n\t\t\tmultiline: false,\n\t\t\tdisabled: false,\n\t\t\trequired: false,\n\t\t\ttext: '',\n\t\t}\n\t]\n}",
    "static": true,
    "longname": "/Users/seanr/Downloads/temp/src/components/presenters/addbike-presenter.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 225,
    "kind": "variable",
    "name": "NO_DATA",
    "memberof": "src/components/presenters/addbike-presenter.js",
    "static": true,
    "longname": "src/components/presenters/addbike-presenter.js~NO_DATA",
    "access": "public",
    "export": false,
    "importPath": "PedalPatrol/src/components/presenters/addbike-presenter.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 226,
    "kind": "variable",
    "name": "BIKE_TYPE",
    "memberof": "src/components/presenters/addbike-presenter.js",
    "static": true,
    "longname": "src/components/presenters/addbike-presenter.js~BIKE_TYPE",
    "access": "public",
    "export": false,
    "importPath": "PedalPatrol/src/components/presenters/addbike-presenter.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 227,
    "kind": "variable",
    "name": "inputDataList",
    "memberof": "src/components/presenters/addbike-presenter.js",
    "static": true,
    "longname": "src/components/presenters/addbike-presenter.js~inputDataList",
    "access": "public",
    "export": false,
    "importPath": "PedalPatrol/src/components/presenters/addbike-presenter.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 417,
    "undocument": true,
    "type": {
      "types": [
        "{\"index\": *, \"data\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 228,
    "kind": "class",
    "name": "AddBikePresenter",
    "memberof": "src/components/presenters/addbike-presenter.js",
    "static": true,
    "longname": "src/components/presenters/addbike-presenter.js~AddBikePresenter",
    "access": "public",
    "export": true,
    "importPath": "PedalPatrol/src/components/presenters/addbike-presenter.js",
    "importStyle": "AddBikePresenter",
    "description": "Class for the AddBike presenter and view",
    "lineNumber": 12,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 229,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/components/presenters/addbike-presenter.js~AddBikePresenter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/presenters/addbike-presenter.js~AddBikePresenter#constructor",
    "access": "public",
    "description": "Creates an instance of AddBikePresenter",
    "lineNumber": 19,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "view",
        "description": "An instance of a view class"
      }
    ]
  },
  {
    "__docId__": 230,
    "kind": "member",
    "name": "view",
    "memberof": "src/components/presenters/addbike-presenter.js~AddBikePresenter",
    "static": false,
    "longname": "src/components/presenters/addbike-presenter.js~AddBikePresenter#view",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 231,
    "kind": "member",
    "name": "currentPhotos",
    "memberof": "src/components/presenters/addbike-presenter.js~AddBikePresenter",
    "static": false,
    "longname": "src/components/presenters/addbike-presenter.js~AddBikePresenter#currentPhotos",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 232,
    "kind": "member",
    "name": "update",
    "memberof": "src/components/presenters/addbike-presenter.js~AddBikePresenter",
    "static": false,
    "longname": "src/components/presenters/addbike-presenter.js~AddBikePresenter#update",
    "access": "public",
    "description": "Updates the bike model with new data.",
    "lineNumber": 33,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "newData",
        "description": "New data to update the model's data with."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "A function that will execute a callback when accessing is complete"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 233,
    "kind": "member",
    "name": "deleteBike",
    "memberof": "src/components/presenters/addbike-presenter.js~AddBikePresenter",
    "static": false,
    "longname": "src/components/presenters/addbike-presenter.js~AddBikePresenter#deleteBike",
    "access": "public",
    "description": "Delete a bike from the database",
    "lineNumber": 48,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "A bike id to delete"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "A function to call when remove succeeds or fails"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 234,
    "kind": "member",
    "name": "_buildDataFromView",
    "memberof": "src/components/presenters/addbike-presenter.js~AddBikePresenter",
    "static": false,
    "longname": "src/components/presenters/addbike-presenter.js~AddBikePresenter#_buildDataFromView",
    "access": "private",
    "description": "Build the data obtained from the view and insert it into a new data object.\nCurrent attributes of newData object: \n\t\t\t{Object} inputTextData: [{name, multiline, disabled, text}]\n\t\t\t{List} selectedColours\n\t\t\t{Object} picture: uri\n\t",
    "lineNumber": 66,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "newData",
        "description": "The new data from the view."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The built data of the object. Attributes: data"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 235,
    "kind": "member",
    "name": "onUpdated",
    "memberof": "src/components/presenters/addbike-presenter.js~AddBikePresenter",
    "static": false,
    "longname": "src/components/presenters/addbike-presenter.js~AddBikePresenter#onUpdated",
    "access": "public",
    "description": "Called when the model is updated with new data. Refreshes the state of the view.\nMethod is supplied with the data to add.\nBetter way to refresh the state?",
    "lineNumber": 99,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "newData",
        "description": "New data to add."
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 236,
    "kind": "member",
    "name": "getData",
    "memberof": "src/components/presenters/addbike-presenter.js~AddBikePresenter",
    "static": false,
    "longname": "src/components/presenters/addbike-presenter.js~AddBikePresenter#getData",
    "access": "public",
    "description": "Gets the data from the model and returns it to the caller.",
    "lineNumber": 110,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Data from the model."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 237,
    "kind": "member",
    "name": "onDestroy",
    "memberof": "src/components/presenters/addbike-presenter.js~AddBikePresenter",
    "static": false,
    "longname": "src/components/presenters/addbike-presenter.js~AddBikePresenter#onDestroy",
    "access": "public",
    "description": "If the view or presenter is destroyed, unsubscribe the presenter from the model.",
    "lineNumber": 117,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 238,
    "kind": "member",
    "name": "checkEditingState",
    "memberof": "src/components/presenters/addbike-presenter.js~AddBikePresenter",
    "static": false,
    "longname": "src/components/presenters/addbike-presenter.js~AddBikePresenter#checkEditingState",
    "access": "public",
    "description": "Checks the editing state of the view and calls one of its passed in functions.",
    "lineNumber": 129,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "editingState",
        "description": "The editing state of the view"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "success",
        "description": "A function to call on a true value of the editing state"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "failure",
        "description": "A function to call on a false value of the editing state"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 239,
    "kind": "method",
    "name": "selectPhotoTapped",
    "memberof": "src/components/presenters/addbike-presenter.js~AddBikePresenter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/presenters/addbike-presenter.js~AddBikePresenter#selectPhotoTapped",
    "access": "public",
    "description": "Open the image picker. Set the editing option to true.",
    "lineNumber": 147,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "imagePicker",
        "description": "The ImagePicker class from react-native-image-picker"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "setEditing",
        "description": "A function so the presenter can set the editing value"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "The index of the photo to change"
      },
      {
        "nullable": null,
        "types": [
          "List"
        ],
        "spread": false,
        "optional": false,
        "name": "photos",
        "description": "A list of photos as strings"
      }
    ],
    "return": null
  },
  {
    "__docId__": 241,
    "kind": "member",
    "name": "changeText",
    "memberof": "src/components/presenters/addbike-presenter.js~AddBikePresenter",
    "static": false,
    "longname": "src/components/presenters/addbike-presenter.js~AddBikePresenter#changeText",
    "access": "public",
    "description": "Converts a list of colour objects to a list of objects with a component using the renderer function.",
    "lineNumber": 196,
    "params": [
      {
        "nullable": null,
        "types": [
          "List"
        ],
        "spread": false,
        "optional": false,
        "name": "colours",
        "description": "A list of colour objects (name, colour)"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "renderer",
        "description": "A function that will produce the component to render for this colour"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 242,
    "kind": "member",
    "name": "getProp",
    "memberof": "src/components/presenters/addbike-presenter.js~AddBikePresenter",
    "static": false,
    "longname": "src/components/presenters/addbike-presenter.js~AddBikePresenter#getProp",
    "access": "private",
    "description": "",
    "lineNumber": 219,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 243,
    "kind": "member",
    "name": "check",
    "memberof": "src/components/presenters/addbike-presenter.js~AddBikePresenter",
    "static": false,
    "longname": "src/components/presenters/addbike-presenter.js~AddBikePresenter#check",
    "access": "private",
    "description": "",
    "lineNumber": 227,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 244,
    "kind": "member",
    "name": "filterItems",
    "memberof": "src/components/presenters/addbike-presenter.js~AddBikePresenter",
    "static": false,
    "longname": "src/components/presenters/addbike-presenter.js~AddBikePresenter#filterItems",
    "access": "private",
    "description": "",
    "lineNumber": 241,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 245,
    "kind": "member",
    "name": "checkInputs",
    "memberof": "src/components/presenters/addbike-presenter.js~AddBikePresenter",
    "static": false,
    "longname": "src/components/presenters/addbike-presenter.js~AddBikePresenter#checkInputs",
    "access": "public",
    "description": "Checks the input data for required inputs and calls an alert function if inputs are missing.",
    "lineNumber": 274,
    "params": [
      {
        "nullable": null,
        "types": [
          "List"
        ],
        "spread": false,
        "optional": false,
        "name": "inputData",
        "description": "A list of input data (see inputDataList for structure)"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "inputRequirementFailure",
        "description": "A function that will define the alert to be displayed."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true: some required inputs are blank; false: required inputs are not blank"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 246,
    "kind": "member",
    "name": "_getRequiredInputs",
    "memberof": "src/components/presenters/addbike-presenter.js~AddBikePresenter",
    "static": false,
    "longname": "src/components/presenters/addbike-presenter.js~AddBikePresenter#_getRequiredInputs",
    "access": "private",
    "description": "Returns the required inputs based on the required property",
    "lineNumber": 299,
    "params": [
      {
        "nullable": null,
        "types": [
          "List"
        ],
        "spread": false,
        "optional": false,
        "name": "inputs",
        "description": "A list of input data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "List"
      ],
      "spread": false,
      "description": "A list of required text inputs"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 247,
    "kind": "member",
    "name": "getTextInputData",
    "memberof": "src/components/presenters/addbike-presenter.js~AddBikePresenter",
    "static": false,
    "longname": "src/components/presenters/addbike-presenter.js~AddBikePresenter#getTextInputData",
    "access": "public",
    "description": "Return the data for the text inputs.\nObject:\n\tname: the name/label of the text input\n\t\tdisabled: true: if the field is disabled; false: otherwise\n\t\tmultiline: true: if the input is allowed to span multiple lines; false: otherwise\n\ttext: initial text of the input",
    "lineNumber": 316,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "type 'Object' if there is data, type 'string' if no data"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "isEditPage",
        "description": "true: If the current page is 'Edit Bike' page; false: If 'Add Bike' page"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "List"
      ],
      "spread": false,
      "description": "A list of data objects (name, multiline, text)"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 248,
    "kind": "member",
    "name": "_translateDataToInput",
    "memberof": "src/components/presenters/addbike-presenter.js~AddBikePresenter",
    "static": false,
    "longname": "src/components/presenters/addbike-presenter.js~AddBikePresenter#_translateDataToInput",
    "access": "private",
    "description": "Translates data input (Bike data) to the text inputs. Could be refactored to be made easier for adaptations.",
    "lineNumber": 329,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The data from the view (=== 'NO-DATA' if not set)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "List"
      ],
      "spread": false,
      "description": "A copy of the data that is now in the form of the text input"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 250,
    "kind": "member",
    "name": "_getString",
    "memberof": "src/components/presenters/addbike-presenter.js~AddBikePresenter",
    "static": false,
    "longname": "src/components/presenters/addbike-presenter.js~AddBikePresenter#_getString",
    "access": "private",
    "description": "Checks if the value is valid and if so, convert it to a string.",
    "lineNumber": 354,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number/string"
        ],
        "spread": false,
        "optional": false,
        "name": "val",
        "description": "A number or string to check"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Value converted to a string"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 251,
    "kind": "member",
    "name": "clearPhotos",
    "memberof": "src/components/presenters/addbike-presenter.js~AddBikePresenter",
    "static": false,
    "longname": "src/components/presenters/addbike-presenter.js~AddBikePresenter#clearPhotos",
    "access": "public",
    "description": "Resets the current photos to the default photos.",
    "lineNumber": 361,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 253,
    "kind": "member",
    "name": "getCurrentPhotos",
    "memberof": "src/components/presenters/addbike-presenter.js~AddBikePresenter",
    "static": false,
    "longname": "src/components/presenters/addbike-presenter.js~AddBikePresenter#getCurrentPhotos",
    "access": "public",
    "description": "Returns a deep copy of the current photos.",
    "lineNumber": 370,
    "return": {
      "nullable": null,
      "types": [
        "List"
      ],
      "spread": false,
      "description": "A list of the current photos"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 254,
    "kind": "member",
    "name": "_deepCopy",
    "memberof": "src/components/presenters/addbike-presenter.js~AddBikePresenter",
    "static": false,
    "longname": "src/components/presenters/addbike-presenter.js~AddBikePresenter#_deepCopy",
    "access": "private",
    "description": "Returns a deep copy of the array by reassigning the values. This is to make sure we can clear the data.",
    "lineNumber": 379,
    "return": {
      "nullable": null,
      "types": [
        "List"
      ],
      "spread": false,
      "description": "A list to copy"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 255,
    "kind": "member",
    "name": "toggleColours",
    "memberof": "src/components/presenters/addbike-presenter.js~AddBikePresenter",
    "static": false,
    "longname": "src/components/presenters/addbike-presenter.js~AddBikePresenter#toggleColours",
    "access": "public",
    "description": "Toggles the colours from the data if the data is present.",
    "lineNumber": 392,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "sectionedMultiSelect",
        "description": "The multi select component from the view"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The data from the view (=== 'NO-DATA' if not set)"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "onColoursFound",
        "description": "A function that submits the selected items back to the view"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "UNIQUE_KEY",
        "description": "A unique key that is used to get the data from the item (same one that is used when defining the sectioned select)"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 256,
    "kind": "file",
    "name": "src/components/presenters/alert-presenter.js",
    "content": "import BasePresenter from './presenter';\nimport { AlertM, ProfileM } from '../models/export-models';\n\n/**\n * Class for the Home presenter and view\n * @extends BasePresenter\n */\nclass AlertPresenter extends BasePresenter {\n\t/**\n\t * Creates an instance of AlertPresenter\n\t *\n\t * @constructor\n\t * @param {Object} view - An instance of a view class\n\t */\n\tconstructor(view) {\n\t\tsuper()\n\t\t\n\t\tthis.view = view;\n\t\tAlertM.subscribe(this);\n\t\tProfileM.subscribe(this);\n\t}\n\n\t/**\n\t * Updates the bike model with new data.\n\t *\n\t * @param {Object} newData - New data to update the model's data with.\n\t */\n\tupdate = (newData) => {\n\t\tAlertM.update(newData); \n\t};\n\n\n\t/**\n\t * Called when the model is updated with new data. Refreshes the state of the view.\n\t * Method is supplied with the data to add.\n\t * Better way to refresh the state?\n\t *\n\t * @param {Object} newData - New data to add.\n\t */\n\tonUpdated = (newData) => {\n\t\t// Do something with the new data or let the view auto update?\n\t\tthis.view.refreshState();\n\t};\n\n\t/**\n\t * Gets the data from the model and returns it to the caller.\n\t *\n\t * @return {Object} Data from the model.\n\t */\n\tgetData = () => {\n\t\treturn AlertM.get().data;\n\t};\n\n\t/**\n\t * Gets the profile image from the ProfileModel.\n\t * \n\t * @param {Function} callback - A function to be called with the profileData\n\t */\n\tgetProfileImage = (callback) => {\n\t\tProfileM.getProfileData(callback);\n\t}\n\n\t/**\n\t * If the view or presenter is destroyed, unsubscribe the presenter from the model.\n\t */\n\tonDestroy = () => {\n\t\tAlertM.unsubscribe(this);\n\t\tProfileM.unsubscribe(this);\n\t};\n\n\t// Maybe differentiate between cancel and clear\t\n\t/**\n\t * Handle the search cancel.\n\t */\n\thandleSearchCancel = () => {\n\t\tthis.view.setState({\n\t\t\tdata: this.getData()\n\t\t});\n\t};\n\n\t/**\n\t * Handle the search clear\n\t */\n\thandleSearchClear = () => {\n\t\tthis.view.setState({\n\t\t\tdata: this.getData()\n\t\t});\n\t};\n\n\t/**\n\t * Filter the items in the list based on the text passed in. Called every time a letter is typed.\n\t *\n\t * @param {string} text - A word(s) to filter on\n\t */\n\thandleSearchFilter = (text) => {\n\t\tconst newData = this.getData().filter(item => {\n\t\t\tconst itemData = `${item.model.toUpperCase()}}`;\n\t\t\tconst textData = text.toUpperCase();\n\t\t\treturn itemData.indexOf(textData) > -1;\n\t\t});\n\t\tthis.view.setState({\n\t\t\tdata: newData\n\t\t});\n\t};\n\n\t/**\n\t * Forces a refresh for the view by recalcuating the timeago property, resorting bookmarked data and setting the state again.\n\t */\n\tforceRefresh = () => {\n\t\tAlertM.recalculateTimeAgo();\n\t\tAlertM.moveTimeDataToFront();\n\t\tthis.view.setState({\n\t\t\tdata: this.getData()\n\t\t});\n\t};\n}\n\nexport default AlertPresenter;",
    "static": true,
    "longname": "/Users/seanr/Downloads/temp/src/components/presenters/alert-presenter.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 257,
    "kind": "class",
    "name": "AlertPresenter",
    "memberof": "src/components/presenters/alert-presenter.js",
    "static": true,
    "longname": "src/components/presenters/alert-presenter.js~AlertPresenter",
    "access": "public",
    "export": true,
    "importPath": "PedalPatrol/src/components/presenters/alert-presenter.js",
    "importStyle": "AlertPresenter",
    "description": "Class for the Home presenter and view",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 258,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/components/presenters/alert-presenter.js~AlertPresenter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/presenters/alert-presenter.js~AlertPresenter#constructor",
    "access": "public",
    "description": "Creates an instance of AlertPresenter",
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "view",
        "description": "An instance of a view class"
      }
    ]
  },
  {
    "__docId__": 259,
    "kind": "member",
    "name": "view",
    "memberof": "src/components/presenters/alert-presenter.js~AlertPresenter",
    "static": false,
    "longname": "src/components/presenters/alert-presenter.js~AlertPresenter#view",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 260,
    "kind": "member",
    "name": "update",
    "memberof": "src/components/presenters/alert-presenter.js~AlertPresenter",
    "static": false,
    "longname": "src/components/presenters/alert-presenter.js~AlertPresenter#update",
    "access": "public",
    "description": "Updates the bike model with new data.",
    "lineNumber": 28,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "newData",
        "description": "New data to update the model's data with."
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 261,
    "kind": "member",
    "name": "onUpdated",
    "memberof": "src/components/presenters/alert-presenter.js~AlertPresenter",
    "static": false,
    "longname": "src/components/presenters/alert-presenter.js~AlertPresenter#onUpdated",
    "access": "public",
    "description": "Called when the model is updated with new data. Refreshes the state of the view.\nMethod is supplied with the data to add.\nBetter way to refresh the state?",
    "lineNumber": 40,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "newData",
        "description": "New data to add."
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 262,
    "kind": "member",
    "name": "getData",
    "memberof": "src/components/presenters/alert-presenter.js~AlertPresenter",
    "static": false,
    "longname": "src/components/presenters/alert-presenter.js~AlertPresenter#getData",
    "access": "public",
    "description": "Gets the data from the model and returns it to the caller.",
    "lineNumber": 50,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Data from the model."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 263,
    "kind": "member",
    "name": "getProfileImage",
    "memberof": "src/components/presenters/alert-presenter.js~AlertPresenter",
    "static": false,
    "longname": "src/components/presenters/alert-presenter.js~AlertPresenter#getProfileImage",
    "access": "public",
    "description": "Gets the profile image from the ProfileModel.",
    "lineNumber": 59,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "A function to be called with the profileData"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 264,
    "kind": "member",
    "name": "onDestroy",
    "memberof": "src/components/presenters/alert-presenter.js~AlertPresenter",
    "static": false,
    "longname": "src/components/presenters/alert-presenter.js~AlertPresenter#onDestroy",
    "access": "public",
    "description": "If the view or presenter is destroyed, unsubscribe the presenter from the model.",
    "lineNumber": 66,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 265,
    "kind": "member",
    "name": "handleSearchCancel",
    "memberof": "src/components/presenters/alert-presenter.js~AlertPresenter",
    "static": false,
    "longname": "src/components/presenters/alert-presenter.js~AlertPresenter#handleSearchCancel",
    "access": "public",
    "description": "Handle the search cancel.",
    "lineNumber": 75,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 266,
    "kind": "member",
    "name": "handleSearchClear",
    "memberof": "src/components/presenters/alert-presenter.js~AlertPresenter",
    "static": false,
    "longname": "src/components/presenters/alert-presenter.js~AlertPresenter#handleSearchClear",
    "access": "public",
    "description": "Handle the search clear",
    "lineNumber": 84,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 267,
    "kind": "member",
    "name": "handleSearchFilter",
    "memberof": "src/components/presenters/alert-presenter.js~AlertPresenter",
    "static": false,
    "longname": "src/components/presenters/alert-presenter.js~AlertPresenter#handleSearchFilter",
    "access": "public",
    "description": "Filter the items in the list based on the text passed in. Called every time a letter is typed.",
    "lineNumber": 95,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "A word(s) to filter on"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 268,
    "kind": "member",
    "name": "forceRefresh",
    "memberof": "src/components/presenters/alert-presenter.js~AlertPresenter",
    "static": false,
    "longname": "src/components/presenters/alert-presenter.js~AlertPresenter#forceRefresh",
    "access": "public",
    "description": "Forces a refresh for the view by recalcuating the timeago property, resorting bookmarked data and setting the state again.",
    "lineNumber": 109,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 269,
    "kind": "file",
    "name": "src/components/presenters/authloading-presenter.js",
    "content": "import AsyncLock from 'async-lock';\n\nimport BasePresenter from './presenter';\nimport { AuthLoadingM, HomeM } from '../models/export-models';\n\nconst lock = new AsyncLock({timeout: 10000});\n\n/**\n * Class for the auth loading presenter to check if the authentication state is valid. \n * Uses the persist storage as the model.\n */\nclass AuthLoadingPresenter extends BasePresenter {\n\t/**\n\t * Creates an instance of AuthLoadingPresenter. Subscribes to models to await data \n\t *\n\t * @constructor\n\t */\n\tconstructor() {\n\t\tsuper();\n\t\tthis._dataLoaded = false;\n\t\tthis._dataCount = 0;\n\t\tthis._callback = null;\n\n\t\t// This is just used to see how many models we have\n\t\t// We could declare the import using 'as Models' but doing Object.keys(Models).length is O(n) so this is faster\n\t\t// Only add models that we expect data from\n\t\tthis._numModels = [HomeM].length;\n\t\t// AlertM.subscribe(this);\n\n\t\t/*\n\t\t * The true in the subscribe forces the model to toggle it's database listeners.\n\t\t * This is helpful when leaving the app and reentering on Android.\n\t\t * Has not been tested with more than one subscribed model that we expect data from.\n\t\t */\n\t\tHomeM.subscribe(this, true); \n\n\t\t// This model is really only used to logout, so we don't expect an onUpdated call from it\n\t\t// We use callbacks since logout is an async call\n\t\tAuthLoadingM.subscribe(this); // We don't expect data from it so don't need to add it to '_numModels'\n\t}\n\n\t/**\n\t * Asynchronously check the authentication state of the user to see if they are logged in.\n\t *\n\t * @param {Function} onSuccess - A success callback\n\t * @param {Function} onFailure - A failure callback\n\t */\n\tasync checkAuthState(onSuccess, onFailure) {\n\t\tawait AuthLoadingM.checkAuthenticationState((userID) => {\n\t\t\tif (this._dataLoaded) { // In-case this is reached after data is received\n\t\t\t\tthis.onRetrievalSuccess(userID, onSuccess, onFailure);\n\t\t\t} else { // If data is received after authentication completes\n\t\t\t\tthis.setCallback(() => {\n\t\t\t\t\tthis.onRetrievalSuccess(userID, onSuccess, onFailure);\n\t\t\t\t});\n\t\t\t}\n\t\t})\n\t}\n\n\t/**\n\t * Sets the callback to be called when data is received.\n\t *\n\t * @param {Function} callback - A function to call when data is received\n\t */\n\tsetCallback(callback) {\n\t\tthis._callback = callback;\n\t}\n\n\t/**\n\t * Check if the userToken is valid and if it is, then call the onSuccess callback, otherwise call the onFailure callback.\n\t *\n\t * @param {string} userToken - A user token\n\t * @param {Function} onSuccess - A success callback\n\t * @param {Function} onFailure - A failure callback\n\t */\n\tonRetrievalSuccess(userToken, onSuccess, onFailure) {\n\t\t// console.log(userToken);\n\t\tuserToken ? onSuccess() : onFailure();\n\t\tAuthLoadingM.unsubscribeAuthListener();\n\t}\n\n\t/**\n\t * Called when a response is received from the Home and the Alert models after it has received data.\n\t * Acquires a lock to make sure that both don't enter at the same time.\n\t *\n\t * @param {Object} data - The data received from the model\n\t */\n\tonUpdated = (data) => {\n\t\t// Acquire the lock on some key\n\t\tlock.acquire('key', (done) => {\n\t\t\tthis._dataCount++; // Increment on the amount of data we receive (The reason for the lock)\n\t\t\t// console.log(this._dataCount);\n\n\t\t\t// Check if the amount of data received is the same as the number of models we expect data from\n\t\t\tif (this._dataCount === this._numModels) {\n\t\t\t\tthis.onDestroy(); // Unsubscribe from the models\n\t\t\t\tthis._dataLoaded = true; // In-case authentication occurs after data is received\n\t\t\t\tif (this._callback != null) {\n\t\t\t\t\tthis._callback();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdone(); // Need to say we are finished with the lock\n\t\t}, (err, ret) => {\n\t\t\t// Lock is released\n\t\t\t// console.log(err);\n\t\t});\n\t}\n\n\t/**\n\t * Unsubscribe from models\n\t */\n\tonDestroy = () => {\n\t\t// AlertM.unsubscribe(this);\n\t\tAuthLoadingM.unsubscribe(this);\n\t\tHomeM.unsubscribe(this);\n\t}\n\n\t/**\n\t * Try to logout. Function is called on every entry to the authloading view so only execute logout if logout is requested.\n\t *\n\t * @param {Boolean} shouldLogout - true: if a logout is requested; false: otherwise\n\t * @param {Function} onSuccess - A function to call on a successful logout\n\t * @param {Function} onFailure - A function to call on failure to logout\n\t */\n\ttryLogout = (shouldLogout, onSuccess, onFailure) => {\n\t\t// console.log(shouldLogout);\n\t\tif (shouldLogout) {\n\t\t\tAuthLoadingM.logout(onSuccess, onFailure);\n\t\t}\n\t}\n\n}\n\nexport default AuthLoadingPresenter;",
    "static": true,
    "longname": "/Users/seanr/Downloads/temp/src/components/presenters/authloading-presenter.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 270,
    "kind": "variable",
    "name": "lock",
    "memberof": "src/components/presenters/authloading-presenter.js",
    "static": true,
    "longname": "src/components/presenters/authloading-presenter.js~lock",
    "access": "public",
    "export": false,
    "importPath": "PedalPatrol/src/components/presenters/authloading-presenter.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 271,
    "kind": "class",
    "name": "AuthLoadingPresenter",
    "memberof": "src/components/presenters/authloading-presenter.js",
    "static": true,
    "longname": "src/components/presenters/authloading-presenter.js~AuthLoadingPresenter",
    "access": "public",
    "export": true,
    "importPath": "PedalPatrol/src/components/presenters/authloading-presenter.js",
    "importStyle": "AuthLoadingPresenter",
    "description": "Class for the auth loading presenter to check if the authentication state is valid. \nUses the persist storage as the model.",
    "lineNumber": 12,
    "interface": false,
    "extends": [
      "src/components/presenters/presenter.js~BasePresenter"
    ]
  },
  {
    "__docId__": 272,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/components/presenters/authloading-presenter.js~AuthLoadingPresenter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/presenters/authloading-presenter.js~AuthLoadingPresenter#constructor",
    "access": "public",
    "description": "Creates an instance of AuthLoadingPresenter. Subscribes to models to await data ",
    "lineNumber": 18,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ]
  },
  {
    "__docId__": 273,
    "kind": "member",
    "name": "_dataLoaded",
    "memberof": "src/components/presenters/authloading-presenter.js~AuthLoadingPresenter",
    "static": false,
    "longname": "src/components/presenters/authloading-presenter.js~AuthLoadingPresenter#_dataLoaded",
    "access": "private",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 274,
    "kind": "member",
    "name": "_dataCount",
    "memberof": "src/components/presenters/authloading-presenter.js~AuthLoadingPresenter",
    "static": false,
    "longname": "src/components/presenters/authloading-presenter.js~AuthLoadingPresenter#_dataCount",
    "access": "private",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 275,
    "kind": "member",
    "name": "_callback",
    "memberof": "src/components/presenters/authloading-presenter.js~AuthLoadingPresenter",
    "static": false,
    "longname": "src/components/presenters/authloading-presenter.js~AuthLoadingPresenter#_callback",
    "access": "private",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 276,
    "kind": "member",
    "name": "_numModels",
    "memberof": "src/components/presenters/authloading-presenter.js~AuthLoadingPresenter",
    "static": false,
    "longname": "src/components/presenters/authloading-presenter.js~AuthLoadingPresenter#_numModels",
    "access": "private",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 277,
    "kind": "method",
    "name": "checkAuthState",
    "memberof": "src/components/presenters/authloading-presenter.js~AuthLoadingPresenter",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/components/presenters/authloading-presenter.js~AuthLoadingPresenter#checkAuthState",
    "access": "public",
    "description": "Asynchronously check the authentication state of the user to see if they are logged in.",
    "lineNumber": 48,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "onSuccess",
        "description": "A success callback"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "onFailure",
        "description": "A failure callback"
      }
    ],
    "return": null
  },
  {
    "__docId__": 278,
    "kind": "method",
    "name": "setCallback",
    "memberof": "src/components/presenters/authloading-presenter.js~AuthLoadingPresenter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/presenters/authloading-presenter.js~AuthLoadingPresenter#setCallback",
    "access": "public",
    "description": "Sets the callback to be called when data is received.",
    "lineNumber": 65,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "A function to call when data is received"
      }
    ],
    "return": null
  },
  {
    "__docId__": 280,
    "kind": "method",
    "name": "onRetrievalSuccess",
    "memberof": "src/components/presenters/authloading-presenter.js~AuthLoadingPresenter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/presenters/authloading-presenter.js~AuthLoadingPresenter#onRetrievalSuccess",
    "access": "public",
    "description": "Check if the userToken is valid and if it is, then call the onSuccess callback, otherwise call the onFailure callback.",
    "lineNumber": 76,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "A user token"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "onSuccess",
        "description": "A success callback"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "onFailure",
        "description": "A failure callback"
      }
    ],
    "return": null
  },
  {
    "__docId__": 281,
    "kind": "member",
    "name": "onUpdated",
    "memberof": "src/components/presenters/authloading-presenter.js~AuthLoadingPresenter",
    "static": false,
    "longname": "src/components/presenters/authloading-presenter.js~AuthLoadingPresenter#onUpdated",
    "access": "public",
    "description": "Called when a response is received from the Home and the Alert models after it has received data.\nAcquires a lock to make sure that both don't enter at the same time.",
    "lineNumber": 88,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The data received from the model"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 283,
    "kind": "member",
    "name": "onDestroy",
    "memberof": "src/components/presenters/authloading-presenter.js~AuthLoadingPresenter",
    "static": false,
    "longname": "src/components/presenters/authloading-presenter.js~AuthLoadingPresenter#onDestroy",
    "access": "public",
    "description": "Unsubscribe from models",
    "lineNumber": 113,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 284,
    "kind": "member",
    "name": "tryLogout",
    "memberof": "src/components/presenters/authloading-presenter.js~AuthLoadingPresenter",
    "static": false,
    "longname": "src/components/presenters/authloading-presenter.js~AuthLoadingPresenter#tryLogout",
    "access": "public",
    "description": "Try to logout. Function is called on every entry to the authloading view so only execute logout if logout is requested.",
    "lineNumber": 126,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "shouldLogout",
        "description": "true: if a logout is requested; false: otherwise"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "onSuccess",
        "description": "A function to call on a successful logout"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "onFailure",
        "description": "A function to call on failure to logout"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 285,
    "kind": "file",
    "name": "src/components/presenters/bike-presenter.js",
    "content": "import BasePresenter from './presenter';\nimport { BikeM, AlertM, ProfileM } from '../models/export-models';\n\n/**\n * Class for the Bike presenter and view\n * @extends BasePresenter\n */\nclass BikePresenter extends BasePresenter {\n\t/**\n\t * Creates an instance of BikePresenter\n\t *\n\t * @constructor\n\t * @param {Object} view - An instance of a view class\n\t */\n\tconstructor(view) {\n\t\tsuper();\n\t\tthis.view = view;\n\t\tBikeM.subscribe(this);\n\t\tAlertM.subscribe(this);\n\t\tProfileM.subscribe(this);\n\t}\n\n\t/**\n\t * Updates the bike model with new data.\n\t *\n\t * @param {Object} newData - New data to update the model's data with.\n\t */\n\tupdate = (newData) => {\n\t\tBikeM.update(newData); \n\t};\n\n\n\t/**\n\t * Called when the model is updated with new data. Refreshes the state of the view.\n\t * Method is supplied with the data to add.\n\t * Better way to refresh the state?\n\t *\n\t * @param {Object} newData - New data to add.\n\t */\n\tonUpdated = (newData) => {\n\t\t// Do something with the new data or let the view auto update?\n\t\tif (newData == null) {\n\t\t\tthis.forceRefresh(); // Force a refresh here because we got the data from the database\n\t\t} else {\n\t\t\tthis.view.refreshState();\n\t\t}\n\t};\n\n\t/**\n\t * Gets the data from the model and returns it to the caller.\n\t *\n\t * @return {Object} Data from the model.\n\t */\n\tgetData = () => {\n\t\treturn BikeM.get().data;\n\t};\n\n\t/**\n\t * Get the number of notifications from the Alerts model.\n\t *\n\t * @return {Number} The number of notifications\n\t */\n\tgetNotificationCount = () => {\n\t\treturn AlertM.getNotificationsCount();\n\t}\n\n\t/**\n\t * Gets the profile image from the ProfileModel.\n\t * \n\t * @param {Function} callback - A function to be called with the profileData\n\t */\n\tgetProfileImage = (callback) => {\n\t\tProfileM.getProfileData(callback);\n\t}\n\n\t/**\n\t * If the view or presenter is destroyed, unsubscribe the presenter from the model.\n\t */\n\tonDestroy = () => {\n\t\tBikeM.unsubscribe(this);\n\t\tAlertM.unsubscribe(this);\n\t\tProfileM.unsubscribe(this);\n\t};\n\n\t\n\t// Maybe differentiate between cancel and clear\n\t/**\n\t * Handle the search cancel.\n\t */\n\thandleSearchCancel = () => {\n\t\tthis.view.setState({\n\t\t\tdata: this.getData()\n\t\t});\n\t};\n\n\t/**\n\t * Handle the search clear\n\t */\n\thandleSearchClear = () => {\n\t\tthis.view.setState({\n\t\t\tdata: this.getData()\n\t\t});\n\t};\n\n\t/**\n\t * Filter the items in the list based on the text passed in. Called every time a letter is typed.\n\t *\n\t * @param {string} text - A word(s) to filter on\n\t */\n\thandleSearchFilter = (text) => {\n\t\t// console.log(this.getData());\n\t\tconst newData = this.getData().filter(item => {\n\t\t\tconst itemData = `${item.name.toUpperCase()}}`;\n\t\t\tconst textData = text.toUpperCase();\n\t\t\treturn itemData.indexOf(textData) > -1;\n\t\t});\n\t\tthis.view.setState({\n\t\t\tdata: newData\n\t\t});\n\t}; \n\n\t/**\n\t * Forces a refresh of the view by fetching the data again.\n\t */\n\tforceRefresh = () => {\n\t\tthis.view.setState({\n\t\t\tdata: this.getData(),\n\t\t});\n\t\tthis.getProfileImage((result) => this.view.setState({profilePicture: result}));\n\t};\n}\n\nexport default BikePresenter;",
    "static": true,
    "longname": "/Users/seanr/Downloads/temp/src/components/presenters/bike-presenter.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 286,
    "kind": "class",
    "name": "BikePresenter",
    "memberof": "src/components/presenters/bike-presenter.js",
    "static": true,
    "longname": "src/components/presenters/bike-presenter.js~BikePresenter",
    "access": "public",
    "export": true,
    "importPath": "PedalPatrol/src/components/presenters/bike-presenter.js",
    "importStyle": "BikePresenter",
    "description": "Class for the Bike presenter and view",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 287,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/components/presenters/bike-presenter.js~BikePresenter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/presenters/bike-presenter.js~BikePresenter#constructor",
    "access": "public",
    "description": "Creates an instance of BikePresenter",
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "view",
        "description": "An instance of a view class"
      }
    ]
  },
  {
    "__docId__": 288,
    "kind": "member",
    "name": "view",
    "memberof": "src/components/presenters/bike-presenter.js~BikePresenter",
    "static": false,
    "longname": "src/components/presenters/bike-presenter.js~BikePresenter#view",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 289,
    "kind": "member",
    "name": "update",
    "memberof": "src/components/presenters/bike-presenter.js~BikePresenter",
    "static": false,
    "longname": "src/components/presenters/bike-presenter.js~BikePresenter#update",
    "access": "public",
    "description": "Updates the bike model with new data.",
    "lineNumber": 28,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "newData",
        "description": "New data to update the model's data with."
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 290,
    "kind": "member",
    "name": "onUpdated",
    "memberof": "src/components/presenters/bike-presenter.js~BikePresenter",
    "static": false,
    "longname": "src/components/presenters/bike-presenter.js~BikePresenter#onUpdated",
    "access": "public",
    "description": "Called when the model is updated with new data. Refreshes the state of the view.\nMethod is supplied with the data to add.\nBetter way to refresh the state?",
    "lineNumber": 40,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "newData",
        "description": "New data to add."
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 291,
    "kind": "member",
    "name": "getData",
    "memberof": "src/components/presenters/bike-presenter.js~BikePresenter",
    "static": false,
    "longname": "src/components/presenters/bike-presenter.js~BikePresenter#getData",
    "access": "public",
    "description": "Gets the data from the model and returns it to the caller.",
    "lineNumber": 54,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Data from the model."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 292,
    "kind": "member",
    "name": "getNotificationCount",
    "memberof": "src/components/presenters/bike-presenter.js~BikePresenter",
    "static": false,
    "longname": "src/components/presenters/bike-presenter.js~BikePresenter#getNotificationCount",
    "access": "public",
    "description": "Get the number of notifications from the Alerts model.",
    "lineNumber": 63,
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "The number of notifications"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 293,
    "kind": "member",
    "name": "getProfileImage",
    "memberof": "src/components/presenters/bike-presenter.js~BikePresenter",
    "static": false,
    "longname": "src/components/presenters/bike-presenter.js~BikePresenter#getProfileImage",
    "access": "public",
    "description": "Gets the profile image from the ProfileModel.",
    "lineNumber": 72,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "A function to be called with the profileData"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 294,
    "kind": "member",
    "name": "onDestroy",
    "memberof": "src/components/presenters/bike-presenter.js~BikePresenter",
    "static": false,
    "longname": "src/components/presenters/bike-presenter.js~BikePresenter#onDestroy",
    "access": "public",
    "description": "If the view or presenter is destroyed, unsubscribe the presenter from the model.",
    "lineNumber": 79,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 295,
    "kind": "member",
    "name": "handleSearchCancel",
    "memberof": "src/components/presenters/bike-presenter.js~BikePresenter",
    "static": false,
    "longname": "src/components/presenters/bike-presenter.js~BikePresenter#handleSearchCancel",
    "access": "public",
    "description": "Handle the search cancel.",
    "lineNumber": 90,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 296,
    "kind": "member",
    "name": "handleSearchClear",
    "memberof": "src/components/presenters/bike-presenter.js~BikePresenter",
    "static": false,
    "longname": "src/components/presenters/bike-presenter.js~BikePresenter#handleSearchClear",
    "access": "public",
    "description": "Handle the search clear",
    "lineNumber": 99,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 297,
    "kind": "member",
    "name": "handleSearchFilter",
    "memberof": "src/components/presenters/bike-presenter.js~BikePresenter",
    "static": false,
    "longname": "src/components/presenters/bike-presenter.js~BikePresenter#handleSearchFilter",
    "access": "public",
    "description": "Filter the items in the list based on the text passed in. Called every time a letter is typed.",
    "lineNumber": 110,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "A word(s) to filter on"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 298,
    "kind": "member",
    "name": "forceRefresh",
    "memberof": "src/components/presenters/bike-presenter.js~BikePresenter",
    "static": false,
    "longname": "src/components/presenters/bike-presenter.js~BikePresenter#forceRefresh",
    "access": "public",
    "description": "Forces a refresh of the view by fetching the data again.",
    "lineNumber": 125,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 299,
    "kind": "file",
    "name": "src/components/presenters/bikedetails-presenter.js",
    "content": "import BasePresenter from './presenter';\nimport { HomeM, MapM, AlertM } from '../models/export-models';\nimport ImageUtil from '../../util/imageutility';\n\nconst NO_DATA = 'NO-DATA';\n\n/**\n * Class for the BikeDetails presenter and view\n * @extends BasePresenter\n */\nclass BikeDetailsPresenter extends BasePresenter {\n\t/**\n\t * Creates an instance of BikeDetailsPresenter\n\t *\n\t * @constructor\n\t * @param {Object} view - An instance of a view class\n\t */\n\tconstructor(view) {\n\t\tsuper();\n\t\tthis.view = view;\n\t\tHomeM.subscribe(this);\n\t}\n\n\t/**\n\t * If the view or presenter is destroyed, unsubscribe the presenter from the model.\n\t */\n\tonDestroy = () => {\n\t\tHomeM.unsubscribe(this);\n\t};\n\n\t/**\n\t * Updates the bike model with new data.\n\t *\n\t * @param {Object} newData - New data to update the model's data with.\n\t */\n\tupdate = (newData) => {\n\t\t// HomeM.update(newData);\n\t}\n\n\t/**\n\t * Called when the model is updated with new data. Refreshes the state of the view.\n\t * Method is supplied with the data to add.\n\t * Better way to refresh the state?\n\t *\n\t * @param {Object} newData - New data to add.\n\t */\n\tonUpdated = (newData) => {\n\t\t// Do something with the new data or let the view auto update?\n\t\t// console.log(newData)\n\t\tthis.view.refreshState();\n\t};\n\n\t/**\n\t * Gets the data from the model and returns it to the caller.\n\t *\n\t * @return {Object} Data from the model.\n\t */\n\tgetData = () => {\n\t\t// return HomeM.get().data;\n\t};\n\n\t/**\n\t * Translates the data from a list of objects to a title and text with an id.\n\t * \n\t * @param {Object} data - The data to be translated\n\t * @return {List, List} An object with two lists. 1. The formed data; 2. The list of thumbnails\n\t */\n\ttranslateData = (data, fromPage) => {\n\t\tlet formedData = [];\n\t\t// console.log(data);\n\n\t\tObject.keys(data).forEach((key,index) => {\n\t\t\tif (this.getIgnoredDetails().includes(key.toString())) { // Ignore any keys defined in getIgnoredDetails\n\t\t\t\treturn; // Acts as continue in 'forEach'\n\n\t\t\t// Don't show lost description on alerts page and found_description on home page\n\t\t\t} else if ((key === 'description' && fromPage === 'Alerts') || (key === 'found_description' && fromPage === 'Home')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet keyStr = (key.toString()).replace('_', ' ');\n    \t\tkeyStr = this.convertCase(keyStr);\n    \t\t// Build the object\n    \t\t// id must be unique\n    \t\t// title is the text input label\n    \t\tconst translated = {\n    \t\t\ttitle: keyStr + \": \",\n    \t\t\ttext: Array.isArray(data[key]) ? data[key].join(', ') : data[key],\n    \t\t\tid: index.toString()\n    \t\t};\n    \t\tformedData.push(translated);\n\t\t});\n\n\t\t// Need to form the thumbnail properly because it's just a link right now\n\t\tlet thumbnail = ImageUtil.formThumbnail(data.thumbnail);\n\n\t\tformedData = this.reorderData(formedData);\n\n\t\t// console.log(formedData, thumbnail);\n\n\t\treturn { formedData, thumbnail };\n\t}\n\n\t/**\n\t * Reorders the data to be based on a specific order defined in getDetailsOrder.\n\t *\n\t * @param {List} data - The data to be reordered\n\t * @return {List} The reordered data\n\t */\n\treorderData = (data) => {\n\t\tlet orderedData = [];\n\n\t\tconst order = this.getDetailsOrder();\n\n\t\tfor (let i=0; i < order.length; i++) {\n\t\t\tconst found_element = this.findElement(data, order[i]);\n\t\t\t// If the element exists and was defined in the data, then add it, otherwise ignore it\n\t\t\tif (found_element != undefined && found_element.text !== '') {\n\t\t\t\torderedData.push(found_element);\n\t\t\t}\n\t\t}\n\n\t\treturn orderedData;\n\t}\n\n\t/**\n\t * Finds if an element exists with a specific title based on a key.\n\t *\n\t * @param {List} data - Data to find an element in\n\t * @param {string} key - A key to look for\n\t * @return {Object} The first element found since data titles should be unique anyway\n\t */\n\tfindElement = (data, key) => {\n\t\treturn data.filter(el => {\n\t\t\treturn el.title === key + \": \";\n\t\t})[0]; // Takes the first element because keys should be unique so just to be safe\n\t}\n\n\t/**\n\t * Convert the case of a string to title case (first letter of each word is uppercase).\n\t *\n\t * @param {string} str - A string to convert\n\t * @return {string} The string converted to title case\n\t */\n\tconvertCase = (str) => {\n\t\treturn str == undefined || str == null ? '' : str.toLowerCase().replace(/(^| )(\\w)/g, s => s.toUpperCase()); // Regex FTW\n  \t}\n\n  \t/**\n  \t * Returns the order of the details as a list. List will appear in this order.\n  \t * Keys should be defined as the property name replacing all underscores with spaces then converted to title case (Does not include ': ').\n  \t *\n  \t * @return {List} A list of title case key names in the order that is needed\n  \t */\n  \tgetDetailsOrder = () => {\n  \t\treturn [\"Name\", \"Serial Number\", \"Timeago\", \"Datetime\", \"Model\", \"Brand\", \"Colour\", \"Frame Size\", \"Wheel Size\", \"Notable Features\", \"Description\", \"Found Description\"];\n  \t}\n\n  \t/**\n  \t * Ignore this list of properties when transforming data objects to formed data.\n  \t * \n  \t * @return {List} A list of string properties to ignore\n  \t */\n  \tgetIgnoredDetails = () => {\n  \t\treturn ['id', 'owner', 'thumbnail', 'dataID', 'milliseconds'];\n  \t}\n\n  \t/**\n  \t * Asks the model to open the prompt to open directions.\n  \t *\n  \t * @param {Object} data - The data of where to go to. Must include longitude and latitude\n  \t * @param {Function} onError - A function callback if there is an error with the data\n  \t */\n  \tgoToDirectionsOnMap = (data, onError) => {\n  \t\tif (!data.hasOwnProperty('longitude') && !data.hasOwnProperty('latitude')) {\n  \t\t\tonError();\n  \t\t\treturn;\n  \t\t}\n  \t\tconst location = {\n  \t\t\tlongitude: data.longitude,\n  \t\t\tlatitude: data.latitude\n  \t\t};\n  \t\tMapM.showMaps(location);\n  \t}\n\n  \tconfirmFound(rawData,callback){\n\n        const newBike = {data:{}};\n        Object.keys(rawData).forEach((key) => {\n        // console.log(key)\n        newBike.data[key] = rawData[key];\n        });\n        // console.log(newBike.data.id);\n        newBike.data.found = false;\n        newBike.data.stolen = false;\n        newBike.data.found_description = '';\n        newBike.data.found_latitude = '';\n        newBike.data.found_longitude = '';\n        newBike.data.found_milliseconds = '';\n        newBike.data.latitude = '';\n        newBike.data.longitude = '';\n        newBike.data.milliseconds = '';\n        AlertM.setCallback(callback);\n        AlertM.update(newBike.data);\n    }\n    rejectFound(rawData,callback){\n        const newBike = {data:{}};\n        Object.keys(rawData).forEach((key) => {\n        // console.log(key)\n        newBike.data[key] = rawData[key];\n        });\n        // console.log(newBike.data.id);\n        newBike.data.found = false;\n        newBike.data.stolen = true;\n        AlertM.setCallback(callback);\n        AlertM.update(newBike.data);\n    }\n\n\tgetDataFromID(id){\n  \t    let dataList = HomeM.get().data;\n  \t    // console.log(dataList);\n  \t    for (let i = 0; i < dataList.length; i ++ ){\n  \t        if(dataList[i].id == id){\n  \t            // console.log('i found id');\n  \t            return dataList[i];\n  \t        }\n  \t    }\n  \t    return 'NO-DATA';\n  \t}\n}\n\nexport default BikeDetailsPresenter",
    "static": true,
    "longname": "/Users/seanr/Downloads/temp/src/components/presenters/bikedetails-presenter.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 300,
    "kind": "variable",
    "name": "NO_DATA",
    "memberof": "src/components/presenters/bikedetails-presenter.js",
    "static": true,
    "longname": "src/components/presenters/bikedetails-presenter.js~NO_DATA",
    "access": "public",
    "export": false,
    "importPath": "PedalPatrol/src/components/presenters/bikedetails-presenter.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 301,
    "kind": "class",
    "name": "BikeDetailsPresenter",
    "memberof": "src/components/presenters/bikedetails-presenter.js",
    "static": true,
    "longname": "src/components/presenters/bikedetails-presenter.js~BikeDetailsPresenter",
    "access": "public",
    "export": true,
    "importPath": "PedalPatrol/src/components/presenters/bikedetails-presenter.js",
    "importStyle": "BikeDetailsPresenter",
    "description": "Class for the BikeDetails presenter and view",
    "lineNumber": 11,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 302,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/components/presenters/bikedetails-presenter.js~BikeDetailsPresenter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/presenters/bikedetails-presenter.js~BikeDetailsPresenter#constructor",
    "access": "public",
    "description": "Creates an instance of BikeDetailsPresenter",
    "lineNumber": 18,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "view",
        "description": "An instance of a view class"
      }
    ]
  },
  {
    "__docId__": 303,
    "kind": "member",
    "name": "view",
    "memberof": "src/components/presenters/bikedetails-presenter.js~BikeDetailsPresenter",
    "static": false,
    "longname": "src/components/presenters/bikedetails-presenter.js~BikeDetailsPresenter#view",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 304,
    "kind": "member",
    "name": "onDestroy",
    "memberof": "src/components/presenters/bikedetails-presenter.js~BikeDetailsPresenter",
    "static": false,
    "longname": "src/components/presenters/bikedetails-presenter.js~BikeDetailsPresenter#onDestroy",
    "access": "public",
    "description": "If the view or presenter is destroyed, unsubscribe the presenter from the model.",
    "lineNumber": 27,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 305,
    "kind": "member",
    "name": "update",
    "memberof": "src/components/presenters/bikedetails-presenter.js~BikeDetailsPresenter",
    "static": false,
    "longname": "src/components/presenters/bikedetails-presenter.js~BikeDetailsPresenter#update",
    "access": "public",
    "description": "Updates the bike model with new data.",
    "lineNumber": 36,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "newData",
        "description": "New data to update the model's data with."
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 306,
    "kind": "member",
    "name": "onUpdated",
    "memberof": "src/components/presenters/bikedetails-presenter.js~BikeDetailsPresenter",
    "static": false,
    "longname": "src/components/presenters/bikedetails-presenter.js~BikeDetailsPresenter#onUpdated",
    "access": "public",
    "description": "Called when the model is updated with new data. Refreshes the state of the view.\nMethod is supplied with the data to add.\nBetter way to refresh the state?",
    "lineNumber": 47,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "newData",
        "description": "New data to add."
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 307,
    "kind": "member",
    "name": "getData",
    "memberof": "src/components/presenters/bikedetails-presenter.js~BikeDetailsPresenter",
    "static": false,
    "longname": "src/components/presenters/bikedetails-presenter.js~BikeDetailsPresenter#getData",
    "access": "public",
    "description": "Gets the data from the model and returns it to the caller.",
    "lineNumber": 58,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Data from the model."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 308,
    "kind": "member",
    "name": "translateData",
    "memberof": "src/components/presenters/bikedetails-presenter.js~BikeDetailsPresenter",
    "static": false,
    "longname": "src/components/presenters/bikedetails-presenter.js~BikeDetailsPresenter#translateData",
    "access": "public",
    "description": "Translates the data from a list of objects to a title and text with an id.",
    "lineNumber": 68,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The data to be translated"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "List, List"
      ],
      "spread": false,
      "description": "An object with two lists. 1. The formed data; 2. The list of thumbnails"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 309,
    "kind": "member",
    "name": "reorderData",
    "memberof": "src/components/presenters/bikedetails-presenter.js~BikeDetailsPresenter",
    "static": false,
    "longname": "src/components/presenters/bikedetails-presenter.js~BikeDetailsPresenter#reorderData",
    "access": "public",
    "description": "Reorders the data to be based on a specific order defined in getDetailsOrder.",
    "lineNumber": 110,
    "params": [
      {
        "nullable": null,
        "types": [
          "List"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The data to be reordered"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "List"
      ],
      "spread": false,
      "description": "The reordered data"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 310,
    "kind": "member",
    "name": "findElement",
    "memberof": "src/components/presenters/bikedetails-presenter.js~BikeDetailsPresenter",
    "static": false,
    "longname": "src/components/presenters/bikedetails-presenter.js~BikeDetailsPresenter#findElement",
    "access": "public",
    "description": "Finds if an element exists with a specific title based on a key.",
    "lineNumber": 133,
    "params": [
      {
        "nullable": null,
        "types": [
          "List"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Data to find an element in"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "A key to look for"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The first element found since data titles should be unique anyway"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 311,
    "kind": "member",
    "name": "convertCase",
    "memberof": "src/components/presenters/bikedetails-presenter.js~BikeDetailsPresenter",
    "static": false,
    "longname": "src/components/presenters/bikedetails-presenter.js~BikeDetailsPresenter#convertCase",
    "access": "public",
    "description": "Convert the case of a string to title case (first letter of each word is uppercase).",
    "lineNumber": 145,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "A string to convert"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The string converted to title case"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 312,
    "kind": "member",
    "name": "getDetailsOrder",
    "memberof": "src/components/presenters/bikedetails-presenter.js~BikeDetailsPresenter",
    "static": false,
    "longname": "src/components/presenters/bikedetails-presenter.js~BikeDetailsPresenter#getDetailsOrder",
    "access": "public",
    "description": "Returns the order of the details as a list. List will appear in this order.\nKeys should be defined as the property name replacing all underscores with spaces then converted to title case (Does not include ': ').",
    "lineNumber": 155,
    "return": {
      "nullable": null,
      "types": [
        "List"
      ],
      "spread": false,
      "description": "A list of title case key names in the order that is needed"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 313,
    "kind": "member",
    "name": "getIgnoredDetails",
    "memberof": "src/components/presenters/bikedetails-presenter.js~BikeDetailsPresenter",
    "static": false,
    "longname": "src/components/presenters/bikedetails-presenter.js~BikeDetailsPresenter#getIgnoredDetails",
    "access": "public",
    "description": "Ignore this list of properties when transforming data objects to formed data.",
    "lineNumber": 164,
    "return": {
      "nullable": null,
      "types": [
        "List"
      ],
      "spread": false,
      "description": "A list of string properties to ignore"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 314,
    "kind": "member",
    "name": "goToDirectionsOnMap",
    "memberof": "src/components/presenters/bikedetails-presenter.js~BikeDetailsPresenter",
    "static": false,
    "longname": "src/components/presenters/bikedetails-presenter.js~BikeDetailsPresenter#goToDirectionsOnMap",
    "access": "public",
    "description": "Asks the model to open the prompt to open directions.",
    "lineNumber": 174,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The data of where to go to. Must include longitude and latitude"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "onError",
        "description": "A function callback if there is an error with the data"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 315,
    "kind": "method",
    "name": "confirmFound",
    "memberof": "src/components/presenters/bikedetails-presenter.js~BikeDetailsPresenter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/presenters/bikedetails-presenter.js~BikeDetailsPresenter#confirmFound",
    "access": "public",
    "description": null,
    "lineNumber": 186,
    "undocument": true,
    "params": [
      {
        "name": "rawData",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 316,
    "kind": "method",
    "name": "rejectFound",
    "memberof": "src/components/presenters/bikedetails-presenter.js~BikeDetailsPresenter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/presenters/bikedetails-presenter.js~BikeDetailsPresenter#rejectFound",
    "access": "public",
    "description": null,
    "lineNumber": 206,
    "undocument": true,
    "params": [
      {
        "name": "rawData",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 317,
    "kind": "method",
    "name": "getDataFromID",
    "memberof": "src/components/presenters/bikedetails-presenter.js~BikeDetailsPresenter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/presenters/bikedetails-presenter.js~BikeDetailsPresenter#getDataFromID",
    "access": "public",
    "description": null,
    "lineNumber": 219,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 318,
    "kind": "file",
    "name": "src/components/presenters/home-presenter.js",
    "content": "import BasePresenter from './presenter';\nimport { HomeM, AlertM, ProfileM } from '../models/export-models';\n\n/**\n * Class for the Home presenter and view\n * @extends BasePresenter\n */\nclass HomePresenter extends BasePresenter {\n\t/**\n\t * Creates an instance of HomePresenter\n\t *\n\t * @constructor\n\t * @param {Object} view - An instance of a view class\n\t */\n\tconstructor(view) {\n\t\tsuper();\n\t\tthis.view = view;\n\t\tHomeM.subscribe(this);\n\t\tAlertM.subscribe(this);\n\t\tProfileM.subscribe(this);\n\t}\n\n\t/**\n\t * Updates the bike model with new data.\n\t *\n\t * @param {Object} newData - New data to update the model's data with.\n\t */\n\tupdate = (newData) => {\n\t\tHomeM.update(newData); \n\t};\n\n\t/**\n\t * @private\n\t * TEST CASE USE ONLY\n\t * Function for tests only to inject data.\n\t */\n\ttestUpdateInjection(data) {\n\t\tHomeM.testUpdateInjection(data);\n\t}\n\n\t/**\n\t * Called when the model is updated with new data. Refreshes the state of the view.\n\t * Method is supplied with the data to add.\n\t * Better way to refresh the state?\n\t *\n\t * @param {Object} newData - New data to add.\n\t */\n\tonUpdated = (newData) => {\n\t\t// Do something with the new data or let the view auto update?\n\t\tif (newData == null) {\n\t\t\tthis.forceRefresh(); // Force a refresh here because we got the data from the database\n\t\t} else {\n\t\t\tthis.view.refreshState();\n\t\t}\n\t};\n\n\t/**\n\t * Gets the data from the model and returns it to the caller.\n\t *\n\t * @return {Object} Data from the model.\n\t */\n\tgetData = () => {\n\t\treturn HomeM.get().data;\n\t};\n\n\t/**\n\t * Get the profile picture from the profile model\n\t *\n\t * @param {Function} callback - A callback function that will be called with the resulting data\n\t */\n\tgetProfileImage = (callback) => {\n\t\tProfileM.getProfileData(callback);\n\t}\n\n\t/**\n\t * Get the number of notifications from the Alerts model.\n\t *\n\t * @return {Number} The number of notifications\n\t */\n\tgetNotificationCount = () => {\n\t\treturn AlertM.getNotificationsCount();\n\t}\n\n\t/**\n\t * If the view or presenter is destroyed, unsubscribe the presenter from the model.\n\t */\n\tonDestroy = () => {\n\t\tHomeM.unsubscribe(this);\n\t\tAlertM.unsubscribe(this);\n\t\tProfileM.unsubscribe(this);\n\t};\n\n\t// Maybe differentiate between cancel and clear\t\n\t/**\n\t * Handle the search cancel.\n\t */\n\thandleSearchCancel = () => {\n\t\tthis.view.setState({\n\t\t\tdata: this.getData()\n\t\t});\n\t};\n\n\t/**\n\t * Handle the search clear\n\t */\n\thandleSearchClear = () => {\n\t\tthis.view.setState({\n\t\t\tdata: this.getData()\n\t\t});\n\t};\n\n\t/**\n\t * Filter the items in the list based on the text passed in. Called every time a letter is typed.\n\t *\n\t * @param {string} text - A word(s) to filter on\n\t */\n\thandleSearchFilter = (text) => {\n\t\tconst newData = this.getData().filter(item => {\n\t\t\tconst itemData = `${item.brand.toUpperCase()}}`;\n\t\t\tconst textData = text.toUpperCase();\n\t\t\treturn itemData.indexOf(textData) > -1;\n\t\t});\n\t\tthis.view.setState({\n\t\t\tdata: newData\n\t\t});\n\t};\n\n\t/**\n\t * Sets the bookmark for the notification ID\n\t *\n\t * @param {Number} id - A bike notification ID\n\t */\n\tsetBookmark = (id) => {\n\t\tif (HomeM.isBookmarked(id)) {\n\t\t\tHomeM.unsetBookmark(id);\n\t\t} else {\n\t\t\tHomeM.setBookmark(id);\n\t\t}\n\t\tthis.view.refreshState();\n\t};\n\n\t/**\n\t * Returns the bookmarked state for a bike ID\n\t *\n\t * @param {Number} id - A bike notification ID\n\t * @return {Boolean} true: if ID is bookmarked by user; false: otherwise\n\t */\n\tgetBookmarked = (id) => {\n\t\treturn HomeM.isBookmarked(id);\n\t};\n\n\t/**\n\t * Forces a refresh for the view by recalcuating the timeago property, resorting bookmarked data and setting the state again.\n\t */\n\tforceRefresh = () => {\n\t\tHomeM.recalculateTimeAgo();\n\t\tHomeM.moveBookmarkedDataToFront();\n\t\tthis.view.setState({\n\t\t\tdata: this.getData(),\n\t\t});\n\t\tthis.getProfileImage((result) => this.view.setState({profilePicture: result}));\n\t};\n}\n\nexport default HomePresenter;",
    "static": true,
    "longname": "/Users/seanr/Downloads/temp/src/components/presenters/home-presenter.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 319,
    "kind": "class",
    "name": "HomePresenter",
    "memberof": "src/components/presenters/home-presenter.js",
    "static": true,
    "longname": "src/components/presenters/home-presenter.js~HomePresenter",
    "access": "public",
    "export": true,
    "importPath": "PedalPatrol/src/components/presenters/home-presenter.js",
    "importStyle": "HomePresenter",
    "description": "Class for the Home presenter and view",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 320,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/components/presenters/home-presenter.js~HomePresenter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/presenters/home-presenter.js~HomePresenter#constructor",
    "access": "public",
    "description": "Creates an instance of HomePresenter",
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "view",
        "description": "An instance of a view class"
      }
    ]
  },
  {
    "__docId__": 321,
    "kind": "member",
    "name": "view",
    "memberof": "src/components/presenters/home-presenter.js~HomePresenter",
    "static": false,
    "longname": "src/components/presenters/home-presenter.js~HomePresenter#view",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 322,
    "kind": "member",
    "name": "update",
    "memberof": "src/components/presenters/home-presenter.js~HomePresenter",
    "static": false,
    "longname": "src/components/presenters/home-presenter.js~HomePresenter#update",
    "access": "public",
    "description": "Updates the bike model with new data.",
    "lineNumber": 28,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "newData",
        "description": "New data to update the model's data with."
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 323,
    "kind": "method",
    "name": "testUpdateInjection",
    "memberof": "src/components/presenters/home-presenter.js~HomePresenter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/presenters/home-presenter.js~HomePresenter#testUpdateInjection",
    "access": "private",
    "description": "",
    "lineNumber": 37,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 324,
    "kind": "member",
    "name": "onUpdated",
    "memberof": "src/components/presenters/home-presenter.js~HomePresenter",
    "static": false,
    "longname": "src/components/presenters/home-presenter.js~HomePresenter#onUpdated",
    "access": "public",
    "description": "Called when the model is updated with new data. Refreshes the state of the view.\nMethod is supplied with the data to add.\nBetter way to refresh the state?",
    "lineNumber": 48,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "newData",
        "description": "New data to add."
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 325,
    "kind": "member",
    "name": "getData",
    "memberof": "src/components/presenters/home-presenter.js~HomePresenter",
    "static": false,
    "longname": "src/components/presenters/home-presenter.js~HomePresenter#getData",
    "access": "public",
    "description": "Gets the data from the model and returns it to the caller.",
    "lineNumber": 62,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Data from the model."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 326,
    "kind": "member",
    "name": "getProfileImage",
    "memberof": "src/components/presenters/home-presenter.js~HomePresenter",
    "static": false,
    "longname": "src/components/presenters/home-presenter.js~HomePresenter#getProfileImage",
    "access": "public",
    "description": "Get the profile picture from the profile model",
    "lineNumber": 71,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "A callback function that will be called with the resulting data"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 327,
    "kind": "member",
    "name": "getNotificationCount",
    "memberof": "src/components/presenters/home-presenter.js~HomePresenter",
    "static": false,
    "longname": "src/components/presenters/home-presenter.js~HomePresenter#getNotificationCount",
    "access": "public",
    "description": "Get the number of notifications from the Alerts model.",
    "lineNumber": 80,
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "The number of notifications"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 328,
    "kind": "member",
    "name": "onDestroy",
    "memberof": "src/components/presenters/home-presenter.js~HomePresenter",
    "static": false,
    "longname": "src/components/presenters/home-presenter.js~HomePresenter#onDestroy",
    "access": "public",
    "description": "If the view or presenter is destroyed, unsubscribe the presenter from the model.",
    "lineNumber": 87,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 329,
    "kind": "member",
    "name": "handleSearchCancel",
    "memberof": "src/components/presenters/home-presenter.js~HomePresenter",
    "static": false,
    "longname": "src/components/presenters/home-presenter.js~HomePresenter#handleSearchCancel",
    "access": "public",
    "description": "Handle the search cancel.",
    "lineNumber": 97,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 330,
    "kind": "member",
    "name": "handleSearchClear",
    "memberof": "src/components/presenters/home-presenter.js~HomePresenter",
    "static": false,
    "longname": "src/components/presenters/home-presenter.js~HomePresenter#handleSearchClear",
    "access": "public",
    "description": "Handle the search clear",
    "lineNumber": 106,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 331,
    "kind": "member",
    "name": "handleSearchFilter",
    "memberof": "src/components/presenters/home-presenter.js~HomePresenter",
    "static": false,
    "longname": "src/components/presenters/home-presenter.js~HomePresenter#handleSearchFilter",
    "access": "public",
    "description": "Filter the items in the list based on the text passed in. Called every time a letter is typed.",
    "lineNumber": 117,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "A word(s) to filter on"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 332,
    "kind": "member",
    "name": "setBookmark",
    "memberof": "src/components/presenters/home-presenter.js~HomePresenter",
    "static": false,
    "longname": "src/components/presenters/home-presenter.js~HomePresenter#setBookmark",
    "access": "public",
    "description": "Sets the bookmark for the notification ID",
    "lineNumber": 133,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "A bike notification ID"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 333,
    "kind": "member",
    "name": "getBookmarked",
    "memberof": "src/components/presenters/home-presenter.js~HomePresenter",
    "static": false,
    "longname": "src/components/presenters/home-presenter.js~HomePresenter#getBookmarked",
    "access": "public",
    "description": "Returns the bookmarked state for a bike ID",
    "lineNumber": 148,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "A bike notification ID"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true: if ID is bookmarked by user; false: otherwise"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 334,
    "kind": "member",
    "name": "forceRefresh",
    "memberof": "src/components/presenters/home-presenter.js~HomePresenter",
    "static": false,
    "longname": "src/components/presenters/home-presenter.js~HomePresenter#forceRefresh",
    "access": "public",
    "description": "Forces a refresh for the view by recalcuating the timeago property, resorting bookmarked data and setting the state again.",
    "lineNumber": 155,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 335,
    "kind": "file",
    "name": "src/components/presenters/login-presenter.js",
    "content": "import BasePresenter from './presenter';\nimport { LoginM } from '../models/export-models';\n\n/**\n * Class for the Login presenter and view\n * @extends BasePresenter\n */\nclass LoginPresenter extends BasePresenter {\n\t/**\n\t * Creates an instance of LoginPresenter\n\t *\n\t * @constructor\n\t * @param {Object} view - An instance of a view class\n\t */\n\tconstructor(view) {\n\t\tsuper();\n\n\t\tthis.view = view;\n\t\tLoginM.subscribe(this);\n\t}\n\t\n\t/**\n\t * Updates the login model with new data.\n\t *\n\t * @param {Object} newData - New data to update the model's data with, including username and password.\n\t */\n\tupdate = (newData) => {\n\t\tLoginM.update(newData);\n\t};\n\n\tupdateT = (onError) => {\n\t\tLoginM.updateT(onError);\n\t}\n\n\tupdateF = (onError) => {\n\t\tLoginM.updateF(onError);\n\t}\n\n\t/**\n\t * Called when the model finished checking with username and password. Refreshes the state of the view.\n\t *\n\t * @param {Object} message - a boolean value that check if the login is successful.\n\t * message is true: navigate to the home screen.\n\t * message is false: report error.\n\t */\n\tonUpdated = (message) => {\n\t\t// Do something with the new data or let the view auto update?\n\t\tif (message) {\n\t\t\tthis.view.navigateToTabs();\n\t\t} else if (!message){\n\t\t\tthis.view.handleLoginIncorrect();\n\t\t}\n\t};\n\n\n\t/**\n\t * Gets the data from the model and returns it to the caller.\n\t *\n\t * @return {Object} Data from the model.\n\t */\n\tgetData = () => {\n\t\treturn LoginM.get().data;\n\t};\n\n\t/**\n\t * Called after user click the login button, before presenter sending data to the login model\n\t * Check if the input is valid\n\t * @param {Object} username - the username that user entered in the view\n\t * @param {Object} password - the password that user entered in the view\n\t */\n\tcheckInput = (username, password, reportError) => {\n\t\tlet result = true;\n\t\t//1. check if it is empty\n\t\tif ((username == '') || (password == '')) {\n\t\t\treportError('Account name and password can not be empty');\n\t\t\tresult = false;\n\t\t}\n\t\t//2. check the length\n\t\treturn result;\n\t};\n\n\n\t/**\n\t * If the view or presenter is destroyed, unsubscribe the presenter from the model.\n\t */\n\tonDestroy = () => {\n\t\tLoginM.unsubscribe(this);\n\t};\n\n};\n\nexport default LoginPresenter;",
    "static": true,
    "longname": "/Users/seanr/Downloads/temp/src/components/presenters/login-presenter.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 336,
    "kind": "class",
    "name": "LoginPresenter",
    "memberof": "src/components/presenters/login-presenter.js",
    "static": true,
    "longname": "src/components/presenters/login-presenter.js~LoginPresenter",
    "access": "public",
    "export": true,
    "importPath": "PedalPatrol/src/components/presenters/login-presenter.js",
    "importStyle": "LoginPresenter",
    "description": "Class for the Login presenter and view",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 337,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/components/presenters/login-presenter.js~LoginPresenter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/presenters/login-presenter.js~LoginPresenter#constructor",
    "access": "public",
    "description": "Creates an instance of LoginPresenter",
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "view",
        "description": "An instance of a view class"
      }
    ]
  },
  {
    "__docId__": 338,
    "kind": "member",
    "name": "view",
    "memberof": "src/components/presenters/login-presenter.js~LoginPresenter",
    "static": false,
    "longname": "src/components/presenters/login-presenter.js~LoginPresenter#view",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 339,
    "kind": "member",
    "name": "update",
    "memberof": "src/components/presenters/login-presenter.js~LoginPresenter",
    "static": false,
    "longname": "src/components/presenters/login-presenter.js~LoginPresenter#update",
    "access": "public",
    "description": "Updates the login model with new data.",
    "lineNumber": 27,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "newData",
        "description": "New data to update the model's data with, including username and password."
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 340,
    "kind": "member",
    "name": "updateT",
    "memberof": "src/components/presenters/login-presenter.js~LoginPresenter",
    "static": false,
    "longname": "src/components/presenters/login-presenter.js~LoginPresenter#updateT",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 341,
    "kind": "member",
    "name": "updateF",
    "memberof": "src/components/presenters/login-presenter.js~LoginPresenter",
    "static": false,
    "longname": "src/components/presenters/login-presenter.js~LoginPresenter#updateF",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 342,
    "kind": "member",
    "name": "onUpdated",
    "memberof": "src/components/presenters/login-presenter.js~LoginPresenter",
    "static": false,
    "longname": "src/components/presenters/login-presenter.js~LoginPresenter#onUpdated",
    "access": "public",
    "description": "Called when the model finished checking with username and password. Refreshes the state of the view.",
    "lineNumber": 46,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "a boolean value that check if the login is successful.\nmessage is true: navigate to the home screen.\nmessage is false: report error."
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 343,
    "kind": "member",
    "name": "getData",
    "memberof": "src/components/presenters/login-presenter.js~LoginPresenter",
    "static": false,
    "longname": "src/components/presenters/login-presenter.js~LoginPresenter#getData",
    "access": "public",
    "description": "Gets the data from the model and returns it to the caller.",
    "lineNumber": 61,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Data from the model."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 344,
    "kind": "member",
    "name": "checkInput",
    "memberof": "src/components/presenters/login-presenter.js~LoginPresenter",
    "static": false,
    "longname": "src/components/presenters/login-presenter.js~LoginPresenter#checkInput",
    "access": "public",
    "description": "Called after user click the login button, before presenter sending data to the login model\nCheck if the input is valid",
    "lineNumber": 71,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "username",
        "description": "the username that user entered in the view"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "password",
        "description": "the password that user entered in the view"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 345,
    "kind": "member",
    "name": "onDestroy",
    "memberof": "src/components/presenters/login-presenter.js~LoginPresenter",
    "static": false,
    "longname": "src/components/presenters/login-presenter.js~LoginPresenter#onDestroy",
    "access": "public",
    "description": "If the view or presenter is destroyed, unsubscribe the presenter from the model.",
    "lineNumber": 86,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 346,
    "kind": "file",
    "name": "src/components/presenters/map-presenter.js",
    "content": "import BasePresenter from './presenter';\nimport { HomeM, MapM, ProfileM, AlertM } from '../models/export-models';\n\n/**\n * Class for the Map Presenter.\n * @extends BasePresenter\n */\nclass MapPresenter extends BasePresenter {\n\t/**\n\t * Creates an instance of the MapPresenter.\n\t * @constructor\n\t */\n\tconstructor(view){\n\t\tsuper();\n\n\t\tthis.view = view;\n\t\tHomeM.subscribe(this);\n\t\tMapM.subscribe(this);\n\t}\n\t\n\t/**\n\t * @private\n\t * We're cheating here because the map presenter subscribes too late to receive data from the home model\n\t * so we just force a notifyAll and move on. This only happens when the component mounts\n\t */\n\tforceRequestData() {\n\t\tHomeM.forceNotifyAll();\n\t}\n\n\t/**\n\t * Returns the data from the MapModel.\n\t *\n\t * @return {Object} The data from the map model.\n\t */\n\tgetData = () => {\n\t\treturn MapM.get();\n\t}\n\n\t/**\n\t * If the view or presenter is destroyed, unsubscribe the presenter from the model.\n\t */\n\tonDestroy = () => {\n\t\tHomeM.unsubscribe(this);\n\t\tMapM.unsubscribe(this);\n\t};\n\n\t/**\n\t * onUpdated only called from HomeModel because MapModel doesn't call it.\n\t * Since data in MapModel should be the same as the from the HomeModel, we don't have to read from the database in the MapModel\n\t * and we can just wait for data to be received.\n\t */\n\tonUpdated = (data) => {\n\t\tMapM.update(data);\n\t\tthis.forceRefresh(); // We always want to force a refresh for the model because data only comes from the HomeModel\n\t}\n\n\t/**\n\t * Force the view/presenter to refresh the view's data\n\t */\n\tforceRefresh = () => {\n\t\tthis.view.setState({\n\t\t\tmarkers: this.getData()\n\t\t});\n\t};\n\n\t/**\n\t * Get the profile picture from the profile model\n\t *\n\t * @param {Function} callback - A callback function that will be called with the resulting data\n\t */\n\tgetProfileImage = (callback) => {\n\t\tProfileM.getProfileData(callback);\n\t}\n\n\t/**\n\t * Get the number of notifications from the Alerts model.\n\t *\n\t * @return {Number} The number of notifications\n\t */\n\tgetNotificationCount = () => {\n\t\treturn AlertM.getNotificationsCount();\n\t}\n\n\t/**\n\t * Gets the user's current location from the model.\n\t *\n\t * @return {Object} The longitude and latitude of the user's current location\n\t */\n\tgetUserLocation = () => {\n\t\treturn MapM.getCurrentLocation();\n\t}\n\n\tfilterMarkers = (markers, selectedFilter) => {\n\t\tif (!selectedFilter || selectedFilter.length === 0 || selectedFilter.name === 'None') {\n\t\t\treturn markers;\n\t\t}\n\t\t\n\t\tlet newMarkers = markers;\n\t\tconst filter = (selectedFilter.name).replace(\"< \", \"\");\n\t\tnewMarkers = newMarkers.filter((el) => {\n\t\t\tconst timeago = el.data.timeago;\n\t\t\tconst timeAgoNums = parseInt((timeago).replace(/[^0-9]/g, ''));\n\t\t\tswitch (filter) {\n\t\t\t\tcase \"1 min ago\":\n\t\t\t\t\treturn timeago.includes('s');\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"1 hour ago\":\n\t\t\t\t\treturn timeago.includes('min') || timeago.includes('mins') || timeago.includes('s');\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"12 hours ago\":\n\t\t\t\t\treturn timeAgoNums < 12 && (timeago.includes('h') || timeago.includes('min') || timeago.includes('mins') || timeago.includes('s'));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"1 day ago\":\n\t\t\t\t\treturn timeago.includes('h') || timeago.includes('min') || timeago.includes('mins') || timeago.includes('s');;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"7 days ago\":\n\t\t\t\t\treturn timeAgoNums < 7 && (timeago.includes('d') || timeago.includes('h') || timeago.includes('min') || timeago.includes('mins') || timeago.includes('s'));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"1 month ago\":\n\t\t\t\t\treturn (timeago.includes('d') || timeago.includes('h') || timeago.includes('min') || timeago.includes('mins') || timeago.includes('s'));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"1 year ago\":\n\t\t\t\t\treturn timeAgoNums < 365 && (timeago.includes('mo') || timeago.includes('d') || timeago.includes('h') || timeago.includes('min') || timeago.includes('mins') || timeago.includes('s'));\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\t\t\n\t\treturn newMarkers;\n\t}\n}\nexport default MapPresenter;\n",
    "static": true,
    "longname": "/Users/seanr/Downloads/temp/src/components/presenters/map-presenter.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 347,
    "kind": "class",
    "name": "MapPresenter",
    "memberof": "src/components/presenters/map-presenter.js",
    "static": true,
    "longname": "src/components/presenters/map-presenter.js~MapPresenter",
    "access": "public",
    "export": true,
    "importPath": "PedalPatrol/src/components/presenters/map-presenter.js",
    "importStyle": "MapPresenter",
    "description": "Class for the Map Presenter.",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 348,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/components/presenters/map-presenter.js~MapPresenter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/presenters/map-presenter.js~MapPresenter#constructor",
    "access": "public",
    "description": "Creates an instance of the MapPresenter.",
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ]
  },
  {
    "__docId__": 349,
    "kind": "member",
    "name": "view",
    "memberof": "src/components/presenters/map-presenter.js~MapPresenter",
    "static": false,
    "longname": "src/components/presenters/map-presenter.js~MapPresenter#view",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 350,
    "kind": "method",
    "name": "forceRequestData",
    "memberof": "src/components/presenters/map-presenter.js~MapPresenter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/presenters/map-presenter.js~MapPresenter#forceRequestData",
    "access": "private",
    "description": "",
    "lineNumber": 26,
    "params": [],
    "return": null
  },
  {
    "__docId__": 351,
    "kind": "member",
    "name": "getData",
    "memberof": "src/components/presenters/map-presenter.js~MapPresenter",
    "static": false,
    "longname": "src/components/presenters/map-presenter.js~MapPresenter#getData",
    "access": "public",
    "description": "Returns the data from the MapModel.",
    "lineNumber": 35,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The data from the map model."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 352,
    "kind": "member",
    "name": "onDestroy",
    "memberof": "src/components/presenters/map-presenter.js~MapPresenter",
    "static": false,
    "longname": "src/components/presenters/map-presenter.js~MapPresenter#onDestroy",
    "access": "public",
    "description": "If the view or presenter is destroyed, unsubscribe the presenter from the model.",
    "lineNumber": 42,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 353,
    "kind": "member",
    "name": "onUpdated",
    "memberof": "src/components/presenters/map-presenter.js~MapPresenter",
    "static": false,
    "longname": "src/components/presenters/map-presenter.js~MapPresenter#onUpdated",
    "access": "public",
    "description": "onUpdated only called from HomeModel because MapModel doesn't call it.\nSince data in MapModel should be the same as the from the HomeModel, we don't have to read from the database in the MapModel\nand we can just wait for data to be received.",
    "lineNumber": 52,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 354,
    "kind": "member",
    "name": "forceRefresh",
    "memberof": "src/components/presenters/map-presenter.js~MapPresenter",
    "static": false,
    "longname": "src/components/presenters/map-presenter.js~MapPresenter#forceRefresh",
    "access": "public",
    "description": "Force the view/presenter to refresh the view's data",
    "lineNumber": 60,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 355,
    "kind": "member",
    "name": "getProfileImage",
    "memberof": "src/components/presenters/map-presenter.js~MapPresenter",
    "static": false,
    "longname": "src/components/presenters/map-presenter.js~MapPresenter#getProfileImage",
    "access": "public",
    "description": "Get the profile picture from the profile model",
    "lineNumber": 71,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "A callback function that will be called with the resulting data"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 356,
    "kind": "member",
    "name": "getNotificationCount",
    "memberof": "src/components/presenters/map-presenter.js~MapPresenter",
    "static": false,
    "longname": "src/components/presenters/map-presenter.js~MapPresenter#getNotificationCount",
    "access": "public",
    "description": "Get the number of notifications from the Alerts model.",
    "lineNumber": 80,
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "The number of notifications"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 357,
    "kind": "member",
    "name": "getUserLocation",
    "memberof": "src/components/presenters/map-presenter.js~MapPresenter",
    "static": false,
    "longname": "src/components/presenters/map-presenter.js~MapPresenter#getUserLocation",
    "access": "public",
    "description": "Gets the user's current location from the model.",
    "lineNumber": 89,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The longitude and latitude of the user's current location"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 358,
    "kind": "member",
    "name": "filterMarkers",
    "memberof": "src/components/presenters/map-presenter.js~MapPresenter",
    "static": false,
    "longname": "src/components/presenters/map-presenter.js~MapPresenter#filterMarkers",
    "access": "public",
    "description": null,
    "lineNumber": 93,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 359,
    "kind": "file",
    "name": "src/components/presenters/presenter.js",
    "content": "/**\n * Base class for all the presenters\n */\nclass BasePresenter {\n\t/**\n\t * Sends an update to the model with new data.\n\t *\n\t * @param {Object} newData - New data to update the model with\n\t */\n\tupdate = (newData) => {\n\t\tthrow new Error(\"Method must be implemented\");\n\t};\n\n\n\t/**\n\t * This method is called when the model's data has changed and the observers are being notified.\n\t *\n\t * @param {Object} newData - New data to update the model with\n\t */\n\tonUpdated = (newData) => {\n\t\t// Do something with the new data or let the view auto update?\n\t\tthrow new Error(\"Method must be implemented\");\n\t};\n\n\n\t/**\n\t * Gets the data from the model.\n\t */\n\tgetData = () => {\n\t\tthrow new Error(\"Method must be implemented\");\n\t};\n}\n\nexport default BasePresenter;",
    "static": true,
    "longname": "/Users/seanr/Downloads/temp/src/components/presenters/presenter.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 360,
    "kind": "class",
    "name": "BasePresenter",
    "memberof": "src/components/presenters/presenter.js",
    "static": true,
    "longname": "src/components/presenters/presenter.js~BasePresenter",
    "access": "public",
    "export": true,
    "importPath": "PedalPatrol/src/components/presenters/presenter.js",
    "importStyle": "BasePresenter",
    "description": "Base class for all the presenters",
    "lineNumber": 4,
    "interface": false
  },
  {
    "__docId__": 361,
    "kind": "member",
    "name": "update",
    "memberof": "src/components/presenters/presenter.js~BasePresenter",
    "static": false,
    "longname": "src/components/presenters/presenter.js~BasePresenter#update",
    "access": "public",
    "description": "Sends an update to the model with new data.",
    "lineNumber": 10,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "newData",
        "description": "New data to update the model with"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 362,
    "kind": "member",
    "name": "onUpdated",
    "memberof": "src/components/presenters/presenter.js~BasePresenter",
    "static": false,
    "longname": "src/components/presenters/presenter.js~BasePresenter#onUpdated",
    "access": "public",
    "description": "This method is called when the model's data has changed and the observers are being notified.",
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "newData",
        "description": "New data to update the model with"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 363,
    "kind": "member",
    "name": "getData",
    "memberof": "src/components/presenters/presenter.js~BasePresenter",
    "static": false,
    "longname": "src/components/presenters/presenter.js~BasePresenter#getData",
    "access": "public",
    "description": "Gets the data from the model.",
    "lineNumber": 29,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 364,
    "kind": "file",
    "name": "src/components/presenters/profile-presenter.js",
    "content": "import BasePresenter from './presenter';\nimport { ProfileM } from '../models/export-models'; // Using the ProfileModel class because an ProfileModel class would have the same purpose\nimport ImageUtil from '../../util/imageutility';\n\nconst NO_DATA = 'NO-DATA';\nconst PROFILE_TYPE = ImageUtil.getTypes().PROFILE;\n\n/**\n * Class for the Profile presenter and view\n * @extends BasePresenter\n */\nclass ProfilePresenter extends BasePresenter {\n\t/**\n\t * Creates an instance of ProfilePresenter\n\t *\n\t * @constructor\n\t * @param {Object} view - An instance of a view class\n\t */\n\tconstructor(view) {\n\t\tsuper();\n\t\tthis.view = view;\n\t\tthis.currentPhotos = Object.assign(ImageUtil.getPhotoEntries(PROFILE_TYPE));\n\t\tProfileM.subscribe(this);\n\t}\n\n\t/**\n\t * Updates the profile model with new data.\n\t *\n\t * @param {Object} newData - New data to update the model's data with.\n\t * @param {Function} callback - A function that will execute a callback when accessing is complete\n\t */\n\tupdate = (newData, callback) => {\n\t\tconst builtData = this._buildDataFromView(newData);\n\n\t\t// TODO : Proper checking to see if it was uploaded. Consider adding callback to onUpdated\n\t\tProfileM.setCallback(callback);\n\n\t\tProfileM.update(builtData);\n\t}\n\n\t/**\n\t * Build the data obtained from the view and insert it into a new data object.\n\t * Current attributes of newData object: \n\t * \t\t\t{Object} inputTextData: [{name, multiline, profile_editable, text}]\n\t * \t\t\t{Object} picture: uri\n\t *\t\t\n\t *\n\t * @param {Object} newData - The new data from the view. \n\t * @return {Object} The built data of the object. Attributes: data\n\t */\n\t_buildDataFromView = (newData) => {\n\t\tconst inputTextData = newData.inputTextData;\n\t\tconst pictureSource = newData.picture;\n\t\tconst currentID = newData.currentID;\n\n\t\tlet builtData = {\n\t\t\tdata: {\n\t\t\t\tid: currentID,\n\t\t\t\temail: inputTextData[inputDataList.index.email].text,\n\t\t\t\tphoneNum: inputTextData[inputDataList.index.phoneNum].text,\n\t\t\t\tfull_name: inputTextData[inputDataList.index.full_name].text,\n\t\t\t\tthumbnail: pictureSource != null ? pictureSource : [{illustration: ImageUtil.getDefaultImage(PROFILE_TYPE)}]\n\t\t\t}\n\t\t}\n\n\t\treturn builtData;\n\t}\n\n\n\t/**\n\t * Called when the model is updated with new data. Refreshes the state of the view.\n\t * Method is supplied with the data to add.\n\t * Better way to refresh the state?\n\t *\n\t * @param {Object} newData - New data to add.\n\t */\n\tonUpdated = (newData) => {\n\t\t// Do something with the new data or let the view auto update?\n\t\tthis.view.refreshState();\n\t};\n\n\n\t/**\n\t * Called when the model is updated with new data. Refreshes the state of the view.\n\t * Better way to refresh the state?\n\t */\n\tonUpdated = () => {\n\t \tthis.view.refreshState();\n\t};\n\n\t/**\n\t * Gets the data from the model and returns it to the caller.\n\t *\n\t * @return {Object} Data from the model.\n\t */\n\tgetData = () => {\n\t\treturn ProfileM.get().data;\n\t};\n\n\t/**\n\t * If the view or presenter is destroyed, unsubscribe the presenter from the model.\n\t */\n\tonDestroy = () => {\n\t\tProfileM.unsubscribe(this);\n\t};\n\n\n\t/**\n\t * Checks the editing state of the view and calls one of its passed in functions.\n\t *\n\t * @param {Boolean} editingState - The editing state of the view\n\t * @param {Function} success - A function to call on a true value of the editing state\n\t * @param {Function} failure - A function to call on a false value of the editing state\n\t */\n\tcheckEditingState = (editingState, success, failure) => {\n\t\t// Do any checks on the editing state\n\t\tif (editingState) {\n\t\t\tsuccess();\n\t\t} else {\n\t\t\tfailure();\n\t\t}\n\t}\n\n\t\n\t/**\n\t * Open the image picker. Set the editing option to true.\n\t *\n\t * @param {Object} imagePicker - The ImagePicker class from react-native-image-picker\n\t * @param {Function} setEditing - A function so the presenter can set the editing value\n\t * @param {Number} id - The index of the photo to change\n\t * @param {List} photos - A list of photos as strings\n\t */\n\tselectPhotoTapped(imagePicker, setEditing, id, photos) {\n\t\tconst options = {\n\t\t\tquality: 1.0,\n\t\t\tmaxWidth: 500,\n\t\t\tmaxHeight: 500,\n\t\t\tstorageOptions: {\n\t\t\t\tskipBackup: true,\n\t\t\t},\n\t\t};\n\n\t\t // Set the editing state to true by calling a passed in function where the view can do what it needs to\n\t\tsetEditing(true);\n\n\t\timagePicker.showImagePicker(options, (response) => {\n\t\t\tconsole.log('Response = ', response);\n\n\t\t\tif (response.didCancel) {\n\t\t\t\tconsole.log('User cancelled photo picker');\n\t\t\t} else if (response.error) {\n\t\t\t\tconsole.log('ImagePicker Error: ', response.error);\n\t\t\t} else if (response.customButton) {\n\t\t\t\tconsole.log('User tapped custom button: ', response.customButton);\n\t\t\t} else {\n\t\t\t\tlet source = { uri: response.uri };\n\n\t\t\t\t// You can also display the image using data:\n\t\t\t\t// let source = { uri: 'data:image/jpeg;base64,' + response.data };\n\n\t\t\t\tphotos[id].illustration = source;\n\t\t\t\tthis.currentPhotos = photos;\n\n\t\t\t\tconsole.log(id, photos);\n\n\t\t\t\tthis.view.setState({\n\t\t\t\t\tphotoEntries: JSON.parse(JSON.stringify(this.currentPhotos)),\n\t\t\t\t});\n\n\t\t\t\tthis.view.refreshState();\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * @private\n\t * Makes sure the object with the key exists.\n\t */\n\tgetProp = (object, key) => object && this.check(object[key]);\n\n\t/**\n\t * @private\n\t * Simple regex check\n\t * \n\t * return {Boolean}\n\t */\n\tcheck = (s) => {\n\t\treturn s.replace(/[\\W\\[\\] ]/g, function (a) {\n\t\t\treturn a;\n\t\t})\n\t};\n\n\t/**\n\t * Checks the input data for required inputs and calls an alert function if inputs are missing.\n\t *\n\t * @param {List} inputData - A list of input data (see inputDataList for structure)\n\t * @param {Function} inputRequirementFailure - A function that will define the alert to be displayed.\n\t * @return {Boolean} true: some required inputs are blank; false: required inputs are not blank\n\t */\n\tcheckInputs = (inputData, inputRequirementFailure) => {\n\t\tlet required = this._getRequiredInputs(inputData);\n\t\tlet names = [];\n\t\tfor (let i=0; i < required.length; i++) {\n\t\t\tif (required[i].text === \"\") {\n\t\t\t\tnames.push(required[i].name);\n\t\t\t}\n\t\t}\n\t\tif (names.length !== 0) {\n\t\t\tinputRequirementFailure(names);\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Returns the required inputs based on the required property\n\t *\n\t * @param {List} inputs - A list of input data\n\t * @return {List} A list of required text inputs\n\t */\n\t_getRequiredInputs = (inputs) => {\n\t\treturn inputs.filter(obj => {return obj.required});\n\t}\n\n\n\t/**\n\t * Return the data for the text inputs.\n\t * Object:\n\t *\t\tname: the name/label of the text input\n\t * \t\tmultiline: true: if the input is allowed to span multiple lines; false: otherwise\n\t *\t\ttext: initial text of the input\n\t *\n\t * @param {Object} data - type 'Object' if there is data, type 'string' if no data\n\t * @return {List} A list of data objects (name, multiline, text)\n\t */\n\tgetTextInputData = (data) => {\n\t\treturn data === NO_DATA ? this._deepCopy(inputDataList.data) : this._translateDataToInput(data);\n\t}\n\n\n\t/**\n\t * Translates data input (Profile data) to the text inputs. Could be refactored to be made easier for adaptations.\n\t *\n\t * @param {Object} data - The data from the view (=== 'NO-DATA' if not set)\n\t * @return {List} A copy of the data that is now in the form of the text input\n\t */\n\t_translateDataToInput = (data) => {\n\t\tlet dataCopy = this._deepCopy(inputDataList.data);\n\n\t\t// We take data[0] because the data is a list\n\t\tdataCopy[inputDataList.index.email].text \t= this._getString(data[0].email);\n\t\tdataCopy[inputDataList.index.full_name].text \t= this._getString(data[0].full_name);\n\t\tdataCopy[inputDataList.index.phoneNum].text \t= this._getString(data[0].phoneNum);\n\n\t\tthis.currentPhotos = ImageUtil.formThumbnail(data[0].thumbnail);\n\t\tthis.view.setState({ currentID: data.id });\n\n\t\treturn this._deepCopy(dataCopy); \n\t}\n\n\n\t/**\n\t * Checks if the value is valid and if so, convert it to a string.\n\t *\n\t * @param {Number/string} val - A number or string to check\n\t * @return {string} Value converted to a string\n\t */\n\t_getString = (val) => {\n\t\treturn val == undefined || val == null ? '' : val.toString();\n\t}\n\n\t/**\n\t * Resets the current photos to the default photos.\n\t */\n\tclearPhotos = () => {\n\t\tthis.currentPhotos = ImageUtil.getDefaultPhotos(PROFILE_TYPE);\n\t}\n\n\t/**\n\t * Returns a deep copy of the current photos.\n\t *\n\t * @return {List} A list of the current photos\n\t */\n\tgetCurrentPhotos = () => {\n\t\treturn JSON.parse(JSON.stringify(this.currentPhotos));\n\t}\n\n\t/**\n\t * Returns a deep copy of the array by reassigning the values. This is to make sure we can clear the data.\n\t *\n\t * @return {List} A list to copy\n\t */\n\t_deepCopy = (array) => {\n\t\treturn array.map(a => Object.assign({}, a));\n\t}\n}\n\nexport default ProfilePresenter;\n\n\n// List of text inputs for adding Profile information. Items in list appear in this order\n/*\n * data:\n *\t\tname: The name/label of the text input\n *\t\tmultiline: true: if the user's text can span multiple lines; false: otherwise\n *\t\ttext: The initial text of the name/label\n */\nconst inputDataList = {\n\tindex: {\n\t\temail: \t\t0,\n\t\tfull_name: \t1,\n\t\tphoneNum: \t2,\n\t},\n\tdata: [\n\t\t{\n\t\t\tname: 'Email',\n\t\t\tmultiline: false,\n\t\t\tdisabled: true,\n\t\t\trequired: false,\n\t\t\ttext: '',\n\t\t\tkeyboardType: 'default'\n\t\t},\n\t\t{\n\t\t\tname: 'Full Name',\n\t\t\tmultiline: false,\n\t\t\tdisabled: false,\n\t\t\trequired: false,\n\t\t\ttext: '',\n\t\t\tkeyboardType: 'default'\n\t\t},\n\t\t{\n\t\t\tname: 'Phone Number',\n\t\t\tmultiline: false,\n\t\t\tdisabled: false,\n\t\t\trequired: false,\n\t\t\ttext: '',\n\t\t\tkeyboardType: 'number-pad'\n\t\t},\n\t]\n}",
    "static": true,
    "longname": "/Users/seanr/Downloads/temp/src/components/presenters/profile-presenter.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 365,
    "kind": "variable",
    "name": "NO_DATA",
    "memberof": "src/components/presenters/profile-presenter.js",
    "static": true,
    "longname": "src/components/presenters/profile-presenter.js~NO_DATA",
    "access": "public",
    "export": false,
    "importPath": "PedalPatrol/src/components/presenters/profile-presenter.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 366,
    "kind": "variable",
    "name": "PROFILE_TYPE",
    "memberof": "src/components/presenters/profile-presenter.js",
    "static": true,
    "longname": "src/components/presenters/profile-presenter.js~PROFILE_TYPE",
    "access": "public",
    "export": false,
    "importPath": "PedalPatrol/src/components/presenters/profile-presenter.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 367,
    "kind": "variable",
    "name": "inputDataList",
    "memberof": "src/components/presenters/profile-presenter.js",
    "static": true,
    "longname": "src/components/presenters/profile-presenter.js~inputDataList",
    "access": "public",
    "export": false,
    "importPath": "PedalPatrol/src/components/presenters/profile-presenter.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 309,
    "undocument": true,
    "type": {
      "types": [
        "{\"index\": *, \"data\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 368,
    "kind": "class",
    "name": "ProfilePresenter",
    "memberof": "src/components/presenters/profile-presenter.js",
    "static": true,
    "longname": "src/components/presenters/profile-presenter.js~ProfilePresenter",
    "access": "public",
    "export": true,
    "importPath": "PedalPatrol/src/components/presenters/profile-presenter.js",
    "importStyle": "ProfilePresenter",
    "description": "Class for the Profile presenter and view",
    "lineNumber": 12,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 369,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/components/presenters/profile-presenter.js~ProfilePresenter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/presenters/profile-presenter.js~ProfilePresenter#constructor",
    "access": "public",
    "description": "Creates an instance of ProfilePresenter",
    "lineNumber": 19,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "view",
        "description": "An instance of a view class"
      }
    ]
  },
  {
    "__docId__": 370,
    "kind": "member",
    "name": "view",
    "memberof": "src/components/presenters/profile-presenter.js~ProfilePresenter",
    "static": false,
    "longname": "src/components/presenters/profile-presenter.js~ProfilePresenter#view",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 371,
    "kind": "member",
    "name": "currentPhotos",
    "memberof": "src/components/presenters/profile-presenter.js~ProfilePresenter",
    "static": false,
    "longname": "src/components/presenters/profile-presenter.js~ProfilePresenter#currentPhotos",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 372,
    "kind": "member",
    "name": "update",
    "memberof": "src/components/presenters/profile-presenter.js~ProfilePresenter",
    "static": false,
    "longname": "src/components/presenters/profile-presenter.js~ProfilePresenter#update",
    "access": "public",
    "description": "Updates the profile model with new data.",
    "lineNumber": 32,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "newData",
        "description": "New data to update the model's data with."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "A function that will execute a callback when accessing is complete"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 373,
    "kind": "member",
    "name": "_buildDataFromView",
    "memberof": "src/components/presenters/profile-presenter.js~ProfilePresenter",
    "static": false,
    "longname": "src/components/presenters/profile-presenter.js~ProfilePresenter#_buildDataFromView",
    "access": "private",
    "description": "Build the data obtained from the view and insert it into a new data object.\nCurrent attributes of newData object: \n\t\t\t{Object} inputTextData: [{name, multiline, profile_editable, text}]\n\t\t\t{Object} picture: uri\n\t",
    "lineNumber": 51,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "newData",
        "description": "The new data from the view."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The built data of the object. Attributes: data"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 374,
    "kind": "member",
    "name": "onUpdated",
    "memberof": "src/components/presenters/profile-presenter.js~ProfilePresenter",
    "static": false,
    "longname": "src/components/presenters/profile-presenter.js~ProfilePresenter#onUpdated",
    "access": "public",
    "description": "Called when the model is updated with new data. Refreshes the state of the view.\nMethod is supplied with the data to add.\nBetter way to refresh the state?",
    "lineNumber": 77,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "newData",
        "description": "New data to add."
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 376,
    "kind": "member",
    "name": "getData",
    "memberof": "src/components/presenters/profile-presenter.js~ProfilePresenter",
    "static": false,
    "longname": "src/components/presenters/profile-presenter.js~ProfilePresenter#getData",
    "access": "public",
    "description": "Gets the data from the model and returns it to the caller.",
    "lineNumber": 96,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Data from the model."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 377,
    "kind": "member",
    "name": "onDestroy",
    "memberof": "src/components/presenters/profile-presenter.js~ProfilePresenter",
    "static": false,
    "longname": "src/components/presenters/profile-presenter.js~ProfilePresenter#onDestroy",
    "access": "public",
    "description": "If the view or presenter is destroyed, unsubscribe the presenter from the model.",
    "lineNumber": 103,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 378,
    "kind": "member",
    "name": "checkEditingState",
    "memberof": "src/components/presenters/profile-presenter.js~ProfilePresenter",
    "static": false,
    "longname": "src/components/presenters/profile-presenter.js~ProfilePresenter#checkEditingState",
    "access": "public",
    "description": "Checks the editing state of the view and calls one of its passed in functions.",
    "lineNumber": 115,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "editingState",
        "description": "The editing state of the view"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "success",
        "description": "A function to call on a true value of the editing state"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "failure",
        "description": "A function to call on a false value of the editing state"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 379,
    "kind": "method",
    "name": "selectPhotoTapped",
    "memberof": "src/components/presenters/profile-presenter.js~ProfilePresenter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/presenters/profile-presenter.js~ProfilePresenter#selectPhotoTapped",
    "access": "public",
    "description": "Open the image picker. Set the editing option to true.",
    "lineNumber": 133,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "imagePicker",
        "description": "The ImagePicker class from react-native-image-picker"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "setEditing",
        "description": "A function so the presenter can set the editing value"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "The index of the photo to change"
      },
      {
        "nullable": null,
        "types": [
          "List"
        ],
        "spread": false,
        "optional": false,
        "name": "photos",
        "description": "A list of photos as strings"
      }
    ],
    "return": null
  },
  {
    "__docId__": 381,
    "kind": "member",
    "name": "getProp",
    "memberof": "src/components/presenters/profile-presenter.js~ProfilePresenter",
    "static": false,
    "longname": "src/components/presenters/profile-presenter.js~ProfilePresenter#getProp",
    "access": "private",
    "description": "",
    "lineNumber": 179,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 382,
    "kind": "member",
    "name": "check",
    "memberof": "src/components/presenters/profile-presenter.js~ProfilePresenter",
    "static": false,
    "longname": "src/components/presenters/profile-presenter.js~ProfilePresenter#check",
    "access": "private",
    "description": "",
    "lineNumber": 187,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 383,
    "kind": "member",
    "name": "checkInputs",
    "memberof": "src/components/presenters/profile-presenter.js~ProfilePresenter",
    "static": false,
    "longname": "src/components/presenters/profile-presenter.js~ProfilePresenter#checkInputs",
    "access": "public",
    "description": "Checks the input data for required inputs and calls an alert function if inputs are missing.",
    "lineNumber": 200,
    "params": [
      {
        "nullable": null,
        "types": [
          "List"
        ],
        "spread": false,
        "optional": false,
        "name": "inputData",
        "description": "A list of input data (see inputDataList for structure)"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "inputRequirementFailure",
        "description": "A function that will define the alert to be displayed."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true: some required inputs are blank; false: required inputs are not blank"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 384,
    "kind": "member",
    "name": "_getRequiredInputs",
    "memberof": "src/components/presenters/profile-presenter.js~ProfilePresenter",
    "static": false,
    "longname": "src/components/presenters/profile-presenter.js~ProfilePresenter#_getRequiredInputs",
    "access": "private",
    "description": "Returns the required inputs based on the required property",
    "lineNumber": 222,
    "params": [
      {
        "nullable": null,
        "types": [
          "List"
        ],
        "spread": false,
        "optional": false,
        "name": "inputs",
        "description": "A list of input data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "List"
      ],
      "spread": false,
      "description": "A list of required text inputs"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 385,
    "kind": "member",
    "name": "getTextInputData",
    "memberof": "src/components/presenters/profile-presenter.js~ProfilePresenter",
    "static": false,
    "longname": "src/components/presenters/profile-presenter.js~ProfilePresenter#getTextInputData",
    "access": "public",
    "description": "Return the data for the text inputs.\nObject:\n\tname: the name/label of the text input\n\t\tmultiline: true: if the input is allowed to span multiple lines; false: otherwise\n\ttext: initial text of the input",
    "lineNumber": 237,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "type 'Object' if there is data, type 'string' if no data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "List"
      ],
      "spread": false,
      "description": "A list of data objects (name, multiline, text)"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 386,
    "kind": "member",
    "name": "_translateDataToInput",
    "memberof": "src/components/presenters/profile-presenter.js~ProfilePresenter",
    "static": false,
    "longname": "src/components/presenters/profile-presenter.js~ProfilePresenter#_translateDataToInput",
    "access": "private",
    "description": "Translates data input (Profile data) to the text inputs. Could be refactored to be made easier for adaptations.",
    "lineNumber": 248,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The data from the view (=== 'NO-DATA' if not set)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "List"
      ],
      "spread": false,
      "description": "A copy of the data that is now in the form of the text input"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 388,
    "kind": "member",
    "name": "_getString",
    "memberof": "src/components/presenters/profile-presenter.js~ProfilePresenter",
    "static": false,
    "longname": "src/components/presenters/profile-presenter.js~ProfilePresenter#_getString",
    "access": "private",
    "description": "Checks if the value is valid and if so, convert it to a string.",
    "lineNumber": 269,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number/string"
        ],
        "spread": false,
        "optional": false,
        "name": "val",
        "description": "A number or string to check"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Value converted to a string"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 389,
    "kind": "member",
    "name": "clearPhotos",
    "memberof": "src/components/presenters/profile-presenter.js~ProfilePresenter",
    "static": false,
    "longname": "src/components/presenters/profile-presenter.js~ProfilePresenter#clearPhotos",
    "access": "public",
    "description": "Resets the current photos to the default photos.",
    "lineNumber": 276,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 391,
    "kind": "member",
    "name": "getCurrentPhotos",
    "memberof": "src/components/presenters/profile-presenter.js~ProfilePresenter",
    "static": false,
    "longname": "src/components/presenters/profile-presenter.js~ProfilePresenter#getCurrentPhotos",
    "access": "public",
    "description": "Returns a deep copy of the current photos.",
    "lineNumber": 285,
    "return": {
      "nullable": null,
      "types": [
        "List"
      ],
      "spread": false,
      "description": "A list of the current photos"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 392,
    "kind": "member",
    "name": "_deepCopy",
    "memberof": "src/components/presenters/profile-presenter.js~ProfilePresenter",
    "static": false,
    "longname": "src/components/presenters/profile-presenter.js~ProfilePresenter#_deepCopy",
    "access": "private",
    "description": "Returns a deep copy of the array by reassigning the values. This is to make sure we can clear the data.",
    "lineNumber": 294,
    "return": {
      "nullable": null,
      "types": [
        "List"
      ],
      "spread": false,
      "description": "A list to copy"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 393,
    "kind": "file",
    "name": "src/components/presenters/reportfound-presenter.js",
    "content": "import BasePresenter from './presenter';\r\nimport { HomeM } from '../models/export-models';\r\n\r\n/**\r\n * Class for the Reportfound presenter and view\r\n * @extends BasePresenter\r\n */\r\nclass ReportFoundPresenter extends BasePresenter {\r\n\t/**\r\n\t * Creates an instance of ReportfoundPresenter\r\n\t *\r\n\t * @constructor\r\n\t * @param {Object} view - An instance of a view class\r\n\t */\r\n\tconstructor(view) {\r\n\t\tsuper();\r\n\t\tthis.view = view;\r\n\t\tHomeM.subscribe(this);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the bike model with new data.\r\n\t *\r\n\t * @param {Object} newData - New data to update the model's data with.\r\n\t * @param {Function} callback - A function that will execute a callback when accessing is complete\r\n\t */\r\n\tupdate = (newData, callback) => {\r\n\t\tlet editedBike = newData.data.editeddata;\r\n\t\tconst newBike = {data:{}};\r\n\t\tconst skipKeys = ['datetime', 'dataID', 'timeago'];\r\n\r\n\t\tObject.keys(editedBike).forEach((key) => {\r\n\t\t\tif (!skipKeys.includes(key)) {\r\n\t\t\t\t// console.log(key)\r\n\t\t\t\tnewBike.data[key] = editedBike[key];\t\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tnewBike.foundTriggered = true;\r\n\t\tnewBike.data.stolen = false;\r\n\t\tnewBike.data.found = true;\r\n\t\tnewBike.data.found_latitude = newData.data.coordinate.latitude;\r\n\t\tnewBike.data.found_longitude = newData.data.coordinate.longitude;\r\n\t\tnewBike.data.found_description = newData.data.text;\r\n\t\tHomeM.setCallback(callback);\r\n\t\tHomeM.update(newBike);\r\n\t};\r\n\r\n\r\n\t/**\r\n\t * Called when the model is updated with new data. Refreshes the state of the view.\r\n\t * Method is supplied with the data to add.\r\n\t * Better way to refresh the state?\r\n\t *\r\n\t * @param {Object} newData - New data to add.\r\n\t */\r\n\tonUpdated = (newData) => {\r\n\t\t// Do something with the new data or let the view auto update?\r\n\t//\tconsole.log(newData)\r\n\t\tthis.view.refreshState();\r\n\t};\r\n\r\n\r\n\t/**\r\n\t * Called when the model is updated with new data. Refreshes the state of the view.\r\n\t * Better way to refresh the state?\r\n\t */\r\n\t onUpdated = () => {\r\n\t\tthis.view.refreshState();\r\n\t };\r\n\r\n\t/**\r\n\t * Gets the data from the model and returns it to the caller.\r\n\t *\r\n\t * @return {Object} Data from the model.\r\n\t */\r\n\tgetData = () => {\r\n\t\tlet data = HomeM.get().data;\r\n\t\treturn data.filter((el) => {\r\n\t\t\treturn el.stolen;\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * If the view or presenter is destroyed, unsubscribe the presenter from the model.\r\n\t */\r\n\tonDestroy = () => {\r\n\t\tHomeM.unsubscribe(this);\r\n\t};\r\n\r\n}\r\n\r\nexport default ReportFoundPresenter;",
    "static": true,
    "longname": "/Users/seanr/Downloads/temp/src/components/presenters/reportfound-presenter.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 394,
    "kind": "class",
    "name": "ReportFoundPresenter",
    "memberof": "src/components/presenters/reportfound-presenter.js",
    "static": true,
    "longname": "src/components/presenters/reportfound-presenter.js~ReportFoundPresenter",
    "access": "public",
    "export": true,
    "importPath": "PedalPatrol/src/components/presenters/reportfound-presenter.js",
    "importStyle": "ReportFoundPresenter",
    "description": "Class for the Reportfound presenter and view",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 395,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/components/presenters/reportfound-presenter.js~ReportFoundPresenter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/presenters/reportfound-presenter.js~ReportFoundPresenter#constructor",
    "access": "public",
    "description": "Creates an instance of ReportfoundPresenter",
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "view",
        "description": "An instance of a view class"
      }
    ]
  },
  {
    "__docId__": 396,
    "kind": "member",
    "name": "view",
    "memberof": "src/components/presenters/reportfound-presenter.js~ReportFoundPresenter",
    "static": false,
    "longname": "src/components/presenters/reportfound-presenter.js~ReportFoundPresenter#view",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 397,
    "kind": "member",
    "name": "update",
    "memberof": "src/components/presenters/reportfound-presenter.js~ReportFoundPresenter",
    "static": false,
    "longname": "src/components/presenters/reportfound-presenter.js~ReportFoundPresenter#update",
    "access": "public",
    "description": "Updates the bike model with new data.",
    "lineNumber": 27,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "newData",
        "description": "New data to update the model's data with."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "A function that will execute a callback when accessing is complete"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 398,
    "kind": "member",
    "name": "onUpdated",
    "memberof": "src/components/presenters/reportfound-presenter.js~ReportFoundPresenter",
    "static": false,
    "longname": "src/components/presenters/reportfound-presenter.js~ReportFoundPresenter#onUpdated",
    "access": "public",
    "description": "Called when the model is updated with new data. Refreshes the state of the view.\nMethod is supplied with the data to add.\nBetter way to refresh the state?",
    "lineNumber": 57,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "newData",
        "description": "New data to add."
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 400,
    "kind": "member",
    "name": "getData",
    "memberof": "src/components/presenters/reportfound-presenter.js~ReportFoundPresenter",
    "static": false,
    "longname": "src/components/presenters/reportfound-presenter.js~ReportFoundPresenter#getData",
    "access": "public",
    "description": "Gets the data from the model and returns it to the caller.",
    "lineNumber": 77,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Data from the model."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 401,
    "kind": "member",
    "name": "onDestroy",
    "memberof": "src/components/presenters/reportfound-presenter.js~ReportFoundPresenter",
    "static": false,
    "longname": "src/components/presenters/reportfound-presenter.js~ReportFoundPresenter#onDestroy",
    "access": "public",
    "description": "If the view or presenter is destroyed, unsubscribe the presenter from the model.",
    "lineNumber": 87,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 402,
    "kind": "file",
    "name": "src/components/presenters/reportlost-presenter.js",
    "content": "import BasePresenter from './presenter';\r\nimport { BikeM } from '../models/export-models';\r\n\r\n/**\r\n * Class for the Reportlost presenter and view\r\n * @extends BasePresenter\r\n */\r\nclass ReportLostPresenter extends BasePresenter {\r\n\t/**\r\n\t * Creates an instance of ReportlostPresenter\r\n\t *\r\n\t * @constructor\r\n\t * @param {Object} view - An instance of a view class\r\n\t */\r\n\tconstructor(view) {\r\n\t\tsuper();\r\n\t\tthis.view = view;\r\n\t\tBikeM.subscribe(this);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the bike model with new data.\r\n\t *\r\n\t * @param {Object} newData - New data to update the model's data with.\r\n\t * @param {Function} callback - A function that will execute a callback when accessing is complete\r\n\t */\r\n\tupdate = (newData,callback) => {\r\n\t\tlet editedBike = BikeM._getBikeByID(newData.data.bikeid);\r\n\t\tconst newBike = {data: {}};\r\n\t\tconst skipKeys = ['datetime', 'dataID', 'timeago'];\r\n\r\n\t\tObject.keys(editedBike).forEach((key) => {\r\n\t\t\tif (!skipKeys.includes(key)) {\r\n\t\t\t\tnewBike.data[key] = editedBike[key];\t\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tnewBike.data.stolen = true;\r\n\t\tnewBike.data.found = false;\r\n\t\tnewBike.data.description = newData.data.text;\r\n\t\tnewBike.data.latitude = newData.data.latitude;\r\n\t\tnewBike.data.longitude =  newData.data.longitude;\r\n\r\n\t\tBikeM.setCallback(callback);\r\n\t\tBikeM.update(newBike);\r\n\t};\r\n\r\n\r\n\t/**\r\n\t * Called when the model is updated with new data. Refreshes the state of the view.\r\n\t * Method is supplied with the data to add.\r\n\t * Better way to refresh the state?\r\n\t *\r\n\t * @param {Object} newData - New data to add.\r\n\t */\r\n\tonUpdated = (newData) => {\r\n\t\t// Do something with the new data or let the view auto update?\r\n\t\tthis.view.refreshState();\r\n\t};\r\n\r\n\r\n\t/**\r\n\t * Called when the model is updated with new data. Refreshes the state of the view.\r\n\t * Better way to refresh the state?\r\n\t */\r\n\t onUpdated = () => {\r\n\t \tthis.view.refreshState();\r\n\t };\r\n\r\n\t/**\r\n\t * Gets the data from the model and returns it to the caller.\r\n\t *\r\n\t * @return {Object} Data from the model.\r\n\t */\r\n\tgetData = () => {\r\n\t\tlet data = BikeM.get().data;\r\n\t\treturn data.filter((el) => {\r\n\t\t    return !el.stolen;\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * If the view or presenter is destroyed, unsubscribe the presenter from the model.\r\n\t */\r\n\tonDestroy = () => {\r\n\t\tBikeM.unsubscribe(this);\r\n\t};\r\n\r\n\t/**\r\n\t * Returns the list of bikes that have not already been stolen.\r\n\t *\r\n\t * @param {List} data - A list of bikes \r\n\t * @return {List} A list of bikes that have not been stolen.\r\n\t */\r\n\tgetNotStolen = (data) => {\r\n\t\treturn data.filter((el) => !el.stolen);\r\n\t}\r\n\r\n}\r\n\r\nexport default ReportLostPresenter;",
    "static": true,
    "longname": "/Users/seanr/Downloads/temp/src/components/presenters/reportlost-presenter.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 403,
    "kind": "class",
    "name": "ReportLostPresenter",
    "memberof": "src/components/presenters/reportlost-presenter.js",
    "static": true,
    "longname": "src/components/presenters/reportlost-presenter.js~ReportLostPresenter",
    "access": "public",
    "export": true,
    "importPath": "PedalPatrol/src/components/presenters/reportlost-presenter.js",
    "importStyle": "ReportLostPresenter",
    "description": "Class for the Reportlost presenter and view",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 404,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/components/presenters/reportlost-presenter.js~ReportLostPresenter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/presenters/reportlost-presenter.js~ReportLostPresenter#constructor",
    "access": "public",
    "description": "Creates an instance of ReportlostPresenter",
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "view",
        "description": "An instance of a view class"
      }
    ]
  },
  {
    "__docId__": 405,
    "kind": "member",
    "name": "view",
    "memberof": "src/components/presenters/reportlost-presenter.js~ReportLostPresenter",
    "static": false,
    "longname": "src/components/presenters/reportlost-presenter.js~ReportLostPresenter#view",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 406,
    "kind": "member",
    "name": "update",
    "memberof": "src/components/presenters/reportlost-presenter.js~ReportLostPresenter",
    "static": false,
    "longname": "src/components/presenters/reportlost-presenter.js~ReportLostPresenter#update",
    "access": "public",
    "description": "Updates the bike model with new data.",
    "lineNumber": 27,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "newData",
        "description": "New data to update the model's data with."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "A function that will execute a callback when accessing is complete"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 407,
    "kind": "member",
    "name": "onUpdated",
    "memberof": "src/components/presenters/reportlost-presenter.js~ReportLostPresenter",
    "static": false,
    "longname": "src/components/presenters/reportlost-presenter.js~ReportLostPresenter#onUpdated",
    "access": "public",
    "description": "Called when the model is updated with new data. Refreshes the state of the view.\nMethod is supplied with the data to add.\nBetter way to refresh the state?",
    "lineNumber": 56,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "newData",
        "description": "New data to add."
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 409,
    "kind": "member",
    "name": "getData",
    "memberof": "src/components/presenters/reportlost-presenter.js~ReportLostPresenter",
    "static": false,
    "longname": "src/components/presenters/reportlost-presenter.js~ReportLostPresenter#getData",
    "access": "public",
    "description": "Gets the data from the model and returns it to the caller.",
    "lineNumber": 75,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Data from the model."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 410,
    "kind": "member",
    "name": "onDestroy",
    "memberof": "src/components/presenters/reportlost-presenter.js~ReportLostPresenter",
    "static": false,
    "longname": "src/components/presenters/reportlost-presenter.js~ReportLostPresenter#onDestroy",
    "access": "public",
    "description": "If the view or presenter is destroyed, unsubscribe the presenter from the model.",
    "lineNumber": 85,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 411,
    "kind": "member",
    "name": "getNotStolen",
    "memberof": "src/components/presenters/reportlost-presenter.js~ReportLostPresenter",
    "static": false,
    "longname": "src/components/presenters/reportlost-presenter.js~ReportLostPresenter#getNotStolen",
    "access": "public",
    "description": "Returns the list of bikes that have not already been stolen.",
    "lineNumber": 95,
    "params": [
      {
        "nullable": null,
        "types": [
          "List"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "A list of bikes"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "List"
      ],
      "spread": false,
      "description": "A list of bikes that have not been stolen."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 412,
    "kind": "file",
    "name": "src/components/presenters/signup-presenter.js",
    "content": "import BasePresenter from './presenter';\nimport { SignUpM } from '../models/export-models';\n\n/**\n * Class for the SignUp presenter and view\n * @extends BasePresenter\n */\nclass SignUpPresenter extends BasePresenter {\n\t/**\n\t * Creates an instance of LoginPresenter\n\t *\n\t * @constructor\n\t * @param {Object} view - An instance of a view class\n\t */\n\tconstructor(view) {\n\t\tsuper();\n\t\tthis.view = view;\n\t\tthis.callback = this.defaultCallback;\n\t\tSignUpM.subscribe(this);\n\t}\n\n\tdefaultCallback = () => {\n\t\t// Stub\n\t}\n\n\tsetCallback = (callback) => {\n\t\tthis.callback = callback;\n\t}\n\t\n\t/**\n\t * Updates the bike model with new data.\n\t *\n\t * @param {Object} newData - New data to update the model's data with, including username and password for sign up.\n\t */\n\tupdate = (newData, onSuccess) => {\n\t\tthis.setCallback(onSuccess);\n\t\tSignUpM.update(newData);\n\t};\n\n\t/**\n\t * Called when the model is updated with new data. Refreshes the state of the view.\n\t * Method is supplied with the data to add.\n\t * Better way to refresh the state?\n\t *\n\t * @param {Object} newData - New data to add.\n\t */\n\tonUpdated = (newData) => {\n\t\tthis.callback(newData);\n\t};\n\n\n\t/**\n\t * Gets the data from the model and returns it to the caller.\n\t *\n\t * @return {Object} Data from the model.\n\t */\n\tgetData = () => {\n\t\treturn SignUpM.get().data;\n\t};\n\n\t/**\n\t * Called after user click the login button, before presenter sending data to the login model\n\t * Check if the input is valid\n\t * @param {Object} username - the username that user entered in the view\n\t * @param {Object} password - the password that user entered in the view\n\t */\n\tcheckInput = (username, password, reportError) => {\n\t\tresult=true;\n\t\t//1. check if it is empty\n\t\tif ((username=='') || (password=='')) {\n\t\t\treportError('Account name and password can not be empty')\n\t\t\tresult = false;\n\t\t}\n\t\t//2. check the length\n\t\treturn result;\n\t };\n\n \t/**\n\t * If the view or presenter is destroyed, unsubscribe the presenter from the model.\n\t */\n\tonDestroy = () => {\n\t\tSignUpM.unsubscribe(this);\n\t};\n};\n\nexport default SignUpPresenter;",
    "static": true,
    "longname": "/Users/seanr/Downloads/temp/src/components/presenters/signup-presenter.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 413,
    "kind": "class",
    "name": "SignUpPresenter",
    "memberof": "src/components/presenters/signup-presenter.js",
    "static": true,
    "longname": "src/components/presenters/signup-presenter.js~SignUpPresenter",
    "access": "public",
    "export": true,
    "importPath": "PedalPatrol/src/components/presenters/signup-presenter.js",
    "importStyle": "SignUpPresenter",
    "description": "Class for the SignUp presenter and view",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 414,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/components/presenters/signup-presenter.js~SignUpPresenter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/presenters/signup-presenter.js~SignUpPresenter#constructor",
    "access": "public",
    "description": "Creates an instance of LoginPresenter",
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "view",
        "description": "An instance of a view class"
      }
    ]
  },
  {
    "__docId__": 415,
    "kind": "member",
    "name": "view",
    "memberof": "src/components/presenters/signup-presenter.js~SignUpPresenter",
    "static": false,
    "longname": "src/components/presenters/signup-presenter.js~SignUpPresenter#view",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 416,
    "kind": "member",
    "name": "callback",
    "memberof": "src/components/presenters/signup-presenter.js~SignUpPresenter",
    "static": false,
    "longname": "src/components/presenters/signup-presenter.js~SignUpPresenter#callback",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 417,
    "kind": "member",
    "name": "defaultCallback",
    "memberof": "src/components/presenters/signup-presenter.js~SignUpPresenter",
    "static": false,
    "longname": "src/components/presenters/signup-presenter.js~SignUpPresenter#defaultCallback",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 418,
    "kind": "member",
    "name": "setCallback",
    "memberof": "src/components/presenters/signup-presenter.js~SignUpPresenter",
    "static": false,
    "longname": "src/components/presenters/signup-presenter.js~SignUpPresenter#setCallback",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 420,
    "kind": "member",
    "name": "update",
    "memberof": "src/components/presenters/signup-presenter.js~SignUpPresenter",
    "static": false,
    "longname": "src/components/presenters/signup-presenter.js~SignUpPresenter#update",
    "access": "public",
    "description": "Updates the bike model with new data.",
    "lineNumber": 35,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "newData",
        "description": "New data to update the model's data with, including username and password for sign up."
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 421,
    "kind": "member",
    "name": "onUpdated",
    "memberof": "src/components/presenters/signup-presenter.js~SignUpPresenter",
    "static": false,
    "longname": "src/components/presenters/signup-presenter.js~SignUpPresenter#onUpdated",
    "access": "public",
    "description": "Called when the model is updated with new data. Refreshes the state of the view.\nMethod is supplied with the data to add.\nBetter way to refresh the state?",
    "lineNumber": 47,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "newData",
        "description": "New data to add."
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 422,
    "kind": "member",
    "name": "getData",
    "memberof": "src/components/presenters/signup-presenter.js~SignUpPresenter",
    "static": false,
    "longname": "src/components/presenters/signup-presenter.js~SignUpPresenter#getData",
    "access": "public",
    "description": "Gets the data from the model and returns it to the caller.",
    "lineNumber": 57,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Data from the model."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 423,
    "kind": "member",
    "name": "checkInput",
    "memberof": "src/components/presenters/signup-presenter.js~SignUpPresenter",
    "static": false,
    "longname": "src/components/presenters/signup-presenter.js~SignUpPresenter#checkInput",
    "access": "public",
    "description": "Called after user click the login button, before presenter sending data to the login model\nCheck if the input is valid",
    "lineNumber": 67,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "username",
        "description": "the username that user entered in the view"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "password",
        "description": "the password that user entered in the view"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 424,
    "kind": "member",
    "name": "onDestroy",
    "memberof": "src/components/presenters/signup-presenter.js~SignUpPresenter",
    "static": false,
    "longname": "src/components/presenters/signup-presenter.js~SignUpPresenter#onDestroy",
    "access": "public",
    "description": "If the view or presenter is destroyed, unsubscribe the presenter from the model.",
    "lineNumber": 81,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 425,
    "kind": "file",
    "name": "src/components/views/addbike-view.js",
    "content": "import React, { Component } from 'react';\nimport { StyleSheet, Text, View, Button, PixelRatio, TouchableOpacity, Image, Alert, ScrollView, FlatList, ActivityIndicator, TouchableWithoutFeedback, KeyboardAvoidingView } from 'react-native';\nimport { Icon } from 'react-native-elements';\nimport ImagePicker from 'react-native-image-picker';\nimport { HeaderBackButton } from 'react-navigation';\nimport { TextInput } from 'react-native-paper';\nimport SectionedMultiSelect from 'react-native-sectioned-multi-select';\n\nimport { styles, text, edit_styles } from './stylesheets/edit-styles';\n\nimport BaseView from './view';\nimport SafeArea from './helpers/safearea';\nimport HandleBack from './helpers/handleback';\nimport ImageCarousel from './helpers/imagecarousel';\nimport AddBikePresenter from '../presenters/addbike-presenter';\nimport ImageUtil from '../../util/imageutility';\nimport TimeUtil from '../../util/timeutility';\n\nconst colours = require('../../assets/colours/colours.json');\n\nconst NO_DATA = 'NO-DATA';\nconst UNIQUE_COLOUR_KEY = 'name'; // A unique key for the colours for the sectioned list\n\n/**\n * Class for the AddBike view\n * @extends BaseView\n */\nclass AddBikeView extends BaseView {\n\t/**\n\t * Creates an instance of the add bike view\n\t *\n\t * @constructor\n\t * @param {Object} props - Component properties\n\t */\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.AddBikeP = new AddBikePresenter(this);\n\t}\n\n\tstate = { // Initializing the state\n\t\tediting: false, // Checks if user is editing\n\t\trefresh: true, // Triggers a view refresh\n\t\tloaderVisible: false,\n\t\tisEditPage: false,\n\n\t\tinputData: [], // Input text data is at each index\n\t\tcolours: colours.data, // Current colours\n\n\t\tcurrentID: '', // Current ID of the bike being edited (Edit Bike only)\n\n\t\tphotoEntries: [], // Current photos\n\n\t\tselectedItems: [] // Selected colours\n\t};\n\n\t/**\n\t * Set the navigation options, change the header to handle a back button.\n\t *\n\t * @return {Object} Navigation option\n\t */\n\tstatic navigationOptions = ({navigation, transitioning}) => {\n\t// \tconst { params = {} } = navigation.state;\n\t// \tconst back = params._onBack ? params._onBack : () => 'default';\n\t// \tconst clear = params._clearData ? params._clearData : () => 'default';\n\t// \treturn {\n\t// \t\theaderLeft: (<HeaderBackButton disabled={transitioning} onPress={()=>{back()}}/>),\n\t// \t\theaderRight: (<Button disabled={transitioning} onPress={()=>{clear()}} title='Clear'/>),\n\t// \t\ttitle: navigation.getParam('title', 'Add Bike') // Default title is Add Bike\n\t// \t};\n\t}\n\n\t/**\n\t * Component is about to mount, initialize the data.\n\t * This function is called before componentDidMount\n\t */\n\tcomponentWillMount = () => {\n\t\tthis.props.navigation.setParams({\n\t\t\t_onBack: this._onBack,\n\t\t\t_clearData: this._clearData\n\t\t});\n\n\t\tconst { navigation } = this.props;\n\t\tconst data = navigation.getParam('data', 'NO-DATA');\n\t\tconst viewTitle = navigation.getParam('title', 'Add Bike');\n\n\t\t// This can be done before the component has mounted so we do it before so data appears immediately\n\t\tthis.setState({\n\t\t\trawData: data,\n\t\t\tinputData: this.AddBikeP.getTextInputData(data, this.state.isEditPage),\n\t\t\tphotoEntries: this.AddBikeP.getCurrentPhotos(),\n\t\t\tisEditPage: this.isEditBikePage(viewTitle)\n\t\t});\n\t}\n\n\t/**\n\t * Component mounted\n\t */\n\tcomponentDidMount = () => {\n\t\tthis.AddBikeP.changeText(colours.data, this._renderText);\n\n\t\tconst { navigation } = this.props;\n\t\tconst data = navigation.getParam('data', 'NO-DATA');\n\n\t\t// This can only be done once the component has mounted since it affects other components\n\t\tthis.AddBikeP.toggleColours(this.sectionedMultiSelect, data, this._onSelectedItemsChange, UNIQUE_COLOUR_KEY);\n\t}\n\n\t/**\n\t * Component will unmount after this method is called, do any clean up here\n\t * Call viewUnmounting in base class so it can do any cleanup for the view before calling the presenter destroy method\n\t */\n\tcomponentWillUnmount = () => {\n\t\tthis.viewUnmounting(this.AddBikeP);\n\t}\n\n\t/**\n\t * Checks if the title of the view is edit bike, and if so, returns true.\n\t *\n\t * @param {string} title - The title of the view\n\t * @return {Boolean} true: If the page is edit bike; false: If the page is add bike\n\t */\n\tisEditBikePage = (title) => {\n\t\treturn title === 'Edit Bike';\n\t}\n\n\t/**\n\t * Refreshes the state of the component so new data is fetched.\n\t */\n\trefreshState = () => {\n\t\tthis.setState({ \n\t\t\trefresh: !this.state.refresh\n\t\t});\n\t}\n\n\t/**\n\t * Toggle the editing mode.\n\t */\n\ttoggleEditing = () => {\n\t\tthis.setState({ editing: !editing });\n\t}\n\n\t/**\n\t * Set the editing value to the passed in value.\n\t *\n\t * @param {Boolean} edit - true: user is editing; false: user is not editing\n\t */\n\tsetEditing = (edit) => {\n\t\tthis.setState({ editing: edit });\n\t}\n\n\t/**\n\t * When the back button is clicked, check if the user was editing.\n\t */\n\t_onBack = () => {\n\t\tif (!this.state.loaderVisible) {\n\t\t\tthis.AddBikeP.checkEditingState(this.state.editing, this.editingSuccess, this.editingFailure);\n\t\t}\n\t}\n\n\t/**\n\t * A function to execute when the editing state is true.\n\t */\n\teditingSuccess = () => {\n\t\tAlert.alert(\n\t\t\t\"You're still editing!\",\n\t\t\t\"Are you sure you want to go back with your edits not saved?\",\n\t\t\t[\n\t\t\t\t{ text: \"Keep Editing\", onPress: () => {}, style: \"cancel\" },\n\t\t\t\t{ text: \"Go Back\", onPress: () => this.resetAllOnBack() },\n\t\t\t],\n\t\t\t{ cancelable: false },\n\t\t);\n\t}\n\n\t/**\n\t * A function to execute when the editing state is false.\n\t */\n\teditingFailure = () => {\n\t\t// Clear the data just in case\n\t\tthis.resetAllOnBack(); // If not editing then go back\n\t}\n\n\t/**\n\t * Resets all the data and goes back to the bike page\n\t */\n\tresetAllOnBack = () => {\n\t\tthis._clearData();\n\t\tthis.props.navigation.navigate('Bike');\n\t}\n\n\t/**\n\t * Clears all the data\n\t */\n\t_clearData = () => {\n\t\tif (!this.state.loaderVisible) {\n\t\t\tthis.AddBikeP.clearPhotos();\n\t\t\tthis.sectionedMultiSelect._removeAllItems();\n\t\t\tlet inputData = this.AddBikeP.getTextInputData(NO_DATA, this.state.isEditPage); // inputData is a property in state\n\t\t\tlet photoEntries = ImageUtil.getDefaultPhotos(ImageUtil.getTypes().BIKE);\n\t\t\tthis.setState({ inputData, photoEntries });\n\t\t\tthis.setEditing(false); // Set editing to false so user can easily go back (for clear button)\n\t\t}\n\t}\n\n\t/**\n\t * Prompt to ask the user if they want to delete the bike\n\t */\n\tdeletePrompt = () => {\n\t\tAlert.alert(\n\t\t\t\"Are you sure you want to delete this bike?\",\n\t\t\t\"\",\n\t\t\t[\n\t\t\t\t{ text: \"Yes\", onPress: () => {this._enableLoader(); this.AddBikeP.deleteBike(this.state.currentID, this.deleteCallback)}},\n\t\t\t\t{ text: \"No\", onPress: () => {}, style: \"cancel\" },\n\t\t\t],\n\t\t\t{ cancelable: false },\n\t\t);\n\t}\n\n\t/**\n\t * Sets a callback on what to do if there is a success or error when a bike is uploaded.\n\t *\n\t * @param {Boolean} success - true: Uploading successful; false: Uploading failed\n\t */\n\tdeleteCallback = (success) => {\n\t\tthis._disableLoader();\n\t\tthis.refreshState();\n\t\tif (success) {\n\t\t\tAlert.alert(\n\t\t\t\t\"Bike successfully deleted!\",\n\t\t\t\t\"\",\n\t\t\t\t[\n\t\t\t\t\t{ text: \"Ok\", onPress: () => this.resetAllOnBack(), style: \"ok\" },\n\t\t\t\t],\n\t\t\t\t{ cancelable: false },\n\t\t\t);\n\t\t} else {\n\t\t\tAlert.alert(\n\t\t\t\t\"Bike was not able to be deleted.\",\n\t\t\t\t\"Please try again.\",\n\t\t\t\t[\n\t\t\t\t\t{ text: \"Ok\", onPress: () => {}, style: \"ok\" },\n\t\t\t\t],\n\t\t\t\t{ cancelable: false },\n\t\t\t);\n\t\t}\n\t}\t\n\n\t/**\n\t * Render a text input item.\n\t * \n\t * @param {Object} item - A list item, index - The index of the item in the data list\n\t * @return {Component} A react component\n\t */\n\t_renderItem = ({item, index}) => {}\n\t\t// <TextInput\n\t\t// \tstyle={text.textInput}\n\t\t// \tlabel={item.required ? this._renderName(item.name) : item.name} // Give required inputs a different render\n\t\t// \tmultiline={item.multiline}\n\t\t// \tdisabled={item.disabled || this.state.loaderVisible}\n\t\t// \tvalue={this.state.inputData[index].text}\n\t\t// \tonChangeText={(text) => {\n\t\t// \t\t\tlet { inputData } = this.state; // inputData is a keyword in state\n\t\t// \t\t\tinputData[index].text = text;\n\t\t// \t\t\tthis.setState({ inputData });\n\t\t// \t\t\tthis.setEditing(true); // Now editing\n\t\t// \t\t} \n\t\t// \t}/>\n\t// );\n\n\t/**\n\t * Renders the name of a required field.\n\t *\n\t * @param {string} name - The name of the field\n\t * @return {Component} A react component\n\t */\n\t_renderName = (name) => {}\n\t// \t<Text style={[{color: 'red'}]}>{name + \" *\"}</Text>\n\t// );\n\n\n\t/**\n\t * Extract the key from the item and index\n\t *\n\t * @param {Object} item - A list item\n\t * @param {Number} index - The index of the item\n\t */\n\t_keyExtractor = (item, index) => item.name;\n\n\t/**\n\t * Add the new selected items to the state and update\n\t *\n\t * @param {List} selectedItems - List of selected items\n\t */\n\t_onSelectedItemsChange = (selectedItems) => {\n\t\tthis.setEditing(true); // Now editing\n\t\tthis.setState({ selectedItems });\n\t} \n\n\t/**\n\t * Generates the style and colouring of the colours in the multiselect.\n\t * \n\t * @param {string} colour - A colour, usually hexcode\n\t * @param {string} name - The name of the item \n\t * @return {Component} A react component\n\t */\n\t_renderText = (colour, name) => {\n\n\t}\n\t// \t<Text style={[{color: colour}, text.colourText]}>{name}</Text>\n\t// );\n\n\n\t/**\n\t * Get the data from the state and send an update to the presenter\n\t */\n\t_getDataToUpdate = () => {\n\t\tif (!this.AddBikeP.checkInputs(this.state.inputData, this._inputRequirementFailure)) {\n\t\t\treturn; // Callback is called within checkInputs so no need to call anything here\n\t\t}\n\n\t\tthis._enableLoader(); // Activates spinning loader\n\t\tthis.refreshState();\n\t\t\n\t\t// We like it tight so pack it together neatly\n\t\tlet updateData = {\n\t\t\tcurrentID: this.state.currentID,\n\t\t\tinputTextData: this.state.inputData, \n\t\t\tselectedColours: this.state.selectedItems, \n\t\t\tpicture: this.state.photoEntries\n\t\t};\n\n\t\tthis.AddBikeP.update(updateData, this.alertCallback);\n\t}\n\n\t/**\n\t * Enables the loader.\n\t */\n\t_enableLoader = () => { this.setState({ loaderVisible: true }); }\n\n\t\n\t/**\n\t * Disables the loader.\n\t */\n\t_disableLoader = () => { this.setState({ loaderVisible: false }); }\n\n\t/**\n\t * Alert for requirement input failure\n\t */\n\t_inputRequirementFailure = (names) => {\n\t\tconst joiner = names.length > 1 ? \" are\" : \" is\";\n\t\tAlert.alert(\n\t\t\t\"Required (*) inputs cannot be blank.\",\n\t\t\tnames.join(', ') + joiner + \" required.\",\n\t\t\t[\n\t\t\t\t{ text: \"Ok\", onPress: () => {}, style: \"ok\" },\n\t\t\t],\n\t\t\t{ cancelable: false },\n\t\t);\n\t}\n\n\t/**\n\t * Sets a callback on what to do if there is a success or error when a bike is uploaded.\n\t *\n\t * @param {Boolean} success - true: Uploading successful; false: Uploading failed\n\t */\n\talertCallback = (success) => {\n\t\tthis._disableLoader();\n\t\tthis.refreshState();\n\t\tif (success) {\n\t\t\tAlert.alert(\n\t\t\t\t\"Bike successfully uploaded!\",\n\t\t\t\t\"\",\n\t\t\t\t[\n\t\t\t\t\t{ text: \"Ok\", onPress: () => this.resetAllOnBack(), style: \"ok\" },\n\t\t\t\t],\n\t\t\t\t{ cancelable: false },\n\t\t\t);\n\t\t} else {\n\t\t\tAlert.alert(\n\t\t\t\t\"Bike was not able to be uploaded.\",\n\t\t\t\t\"Please try again.\",\n\t\t\t\t[\n\t\t\t\t\t{ text: \"Ok\", onPress: () => {}, style: \"ok\" },\n\t\t\t\t],\n\t\t\t\t{ cancelable: false },\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * DON'T USE THIS METHOD UNLESS ABSOLUTELY NECESSARY.\n\t * Force a refresh of the view.\n\t */\n\t_forceRefresh = () => {\n\t\tthis.forceUpdate();\n\t}\n\n\t/**\n\t * Renders items to the screen\n\t *\n\t * @return {Component} \n\t */\n\trender() {\n\t\t// return (\n\t\t\t\n\t\t// \t<KeyboardAvoidingView\n\t\t// \t\tstyle={styles.container}\n\t\t// \t\tbehavior=\"padding\"\n\t\t// \t\tenabled>\n\t\t// \t\t<HandleBack onBack={this._onBack}>\n\t\t// \t\t\t<SafeArea/>\n\t\t// \t\t\t<View style={styles.container}>\n\t\t// \t\t\t\t<ScrollView \n\t\t// \t\t\t\t\tcontentContainerStyle={edit_styles.contentContainer}\n\t\t// \t\t\t\t\tkeyboardShouldPersistTaps='always'\n\t\t// \t\t\t\t\tkeyboardDismissMode='interactive'>\n\n\t\t// \t\t\t\t\t<ImageCarousel \n\t\t// \t\t\t\t\t\tloading={this.state.loaderVisible}\n\t\t// \t\t\t\t\t\tphotos={this.state.photoEntries}\n\t\t// \t\t\t\t\t\tselected={(id) => {this.AddBikeP.selectPhotoTapped(ImagePicker, this.setEditing, id, this.state.photoEntries)}} />\n\t\t\t\t\t\t\t\n\t\t// \t\t\t\t\t{/* List of text inputs */}\n\t\t// \t\t\t\t\t<FlatList\n\t\t// \t\t\t\t\t\tstyle={edit_styles.flatList}\n\t\t// \t\t\t\t\t\tdata={this.AddBikeP.getTextInputData(NO_DATA, this.state.isEditPage)}\n\t\t// \t\t\t\t\t\textraData={this.state}\n\t\t// \t\t\t\t\t\tkeyExtractor={this._keyExtractor}\n\t\t// \t\t\t\t\t\trenderItem={this._renderItem}/>\n\t\t\t\t\t\t\n\t\t// \t\t\t\t\t{/* List of colours */}\n\t\t// \t\t\t\t\t{/* colors attribute makes the 'Confirm' button flip from red to green if a colour is selected */}\n\t\t// \t\t\t\t\t<SectionedMultiSelect\n\t\t// \t\t\t\t\t\tstyle={text.textInput}\n\t\t// \t\t\t\t\t\titems={this.state.colours}\n\t\t// \t\t\t\t\t\tdisplayKey='text_component'\n\t\t// \t\t\t\t\t\tuniqueKey={UNIQUE_COLOUR_KEY}\n\t\t// \t\t\t\t\t\tshowRemoveAll\n\t\t// \t\t\t\t\t\tcolors={{ primary: this.state.selectedItems.length ? 'forestgreen' : 'crimson' }}\n\t\t// \t\t\t\t\t\tselectText='Colours'\n\t\t// \t\t\t\t\t\tmodalWithSafeAreaView={true}\n\t\t// \t\t\t\t\t\tshowDropDowns={true}\n\t\t// \t\t\t\t\t\tfilterItems={this.AddBikeP.filterItems}\n\t\t// \t\t\t\t\t\tonSelectedItemsChange={this._onSelectedItemsChange}\n\t\t// \t\t\t\t\t\tselectedItems={this.state.selectedItems}\n\t\t// \t\t\t\t\t\tref={(SectionedMultiSelect) => this.sectionedMultiSelect = SectionedMultiSelect}\n\t\t// \t\t\t\t\t\t/>\n\n\t\t// \t\t\t\t\t{/* Submit button */}\n\t\t// \t\t\t\t\t<TouchableOpacity style={[edit_styles.submitTouchable, {marginBottom: this.state.isEditPage ? 0 : 10}]}>\n\t\t// \t\t\t\t\t\t<Button\n\t\t// \t\t\t\t\t\t\ttitle={this.state.isEditPage ? 'Save' : 'Submit'}\n\t\t// \t\t\t\t\t\t\tdisabled={this.state.loaderVisible}\n\t\t// \t\t\t\t\t\t\tonPress={() => this._getDataToUpdate()}/>\n\t\t// \t\t\t\t\t</TouchableOpacity>\n\n\t\t// \t\t\t\t\t{/* TODO : Add delete button */}\n\t\t// \t\t\t\t\t{\n\t\t// \t\t\t\t\t\tthis.state.isEditPage &&\n\t\t// \t\t\t\t\t\t<View> \n\t\t// \t\t\t\t\t\t\t<View style={{flexDirection: 'row', marginTop: 20}}> \n\t\t// \t\t\t\t\t\t\t\t<View style={edit_styles.deleteInline} /> \n\t\t// \t\t\t\t\t\t\t\t\t<Text style={edit_styles.delete}>Delete Bike</Text> \n\t\t// \t\t\t\t\t\t\t\t<View style={edit_styles.deleteInline} /> \n\t\t// \t\t\t\t\t\t\t</View>\n\t\t\t\t\t\t\t\t\t\n\t\t// \t\t\t\t\t\t\t<TouchableOpacity style={edit_styles.deleteTouchable} onPress={() => 'default'}>\n\t\t// \t\t\t\t\t\t\t\t<Button\n\t\t// \t\t\t\t\t\t\t\t\ttitle='Delete'\n\t\t// \t\t\t\t\t\t\t\t\tdisabled={this.state.loaderVisible}\n\t\t// \t\t\t\t\t\t\t\t\tonPress={() => this.deletePrompt()}/>\n\t\t// \t\t\t\t\t\t\t</TouchableOpacity>\n\t\t// \t\t\t\t\t\t</View>\n\t\t// \t\t\t\t\t}\n\n\t\t// \t\t\t\t\t{/* Spinning loading circle */}\n\t\t// \t\t\t\t\t{\n\t\t// \t\t\t\t\t\tthis.state.loaderVisible &&\n\t\t// \t\t\t\t\t\t<View style={edit_styles.loading} pointerEvents=\"none\">\n\t\t// \t\t\t\t\t\t\t<ActivityIndicator size='large' color=\"#0000ff\" />\n\t\t// \t\t\t\t\t\t</View>\n\t\t// \t\t\t\t\t}\n\t\t// \t\t\t\t</ScrollView>\n\t\t// \t\t\t</View>\n\t\t// \t\t\t<SafeArea/>\n\t\t// \t\t</HandleBack>\n\t\t// \t\t</KeyboardAvoidingView>\n\t\t\t\n\t\t// );\n\t}\n}\n\nexport default AddBikeView;",
    "static": true,
    "longname": "/Users/seanr/Downloads/temp/src/components/views/addbike-view.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 426,
    "kind": "variable",
    "name": "colours",
    "memberof": "src/components/views/addbike-view.js",
    "static": true,
    "longname": "src/components/views/addbike-view.js~colours",
    "access": "public",
    "export": false,
    "importPath": "PedalPatrol/src/components/views/addbike-view.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 427,
    "kind": "variable",
    "name": "NO_DATA",
    "memberof": "src/components/views/addbike-view.js",
    "static": true,
    "longname": "src/components/views/addbike-view.js~NO_DATA",
    "access": "public",
    "export": false,
    "importPath": "PedalPatrol/src/components/views/addbike-view.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 428,
    "kind": "variable",
    "name": "UNIQUE_COLOUR_KEY",
    "memberof": "src/components/views/addbike-view.js",
    "static": true,
    "longname": "src/components/views/addbike-view.js~UNIQUE_COLOUR_KEY",
    "access": "public",
    "export": false,
    "importPath": "PedalPatrol/src/components/views/addbike-view.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 429,
    "kind": "class",
    "name": "AddBikeView",
    "memberof": "src/components/views/addbike-view.js",
    "static": true,
    "longname": "src/components/views/addbike-view.js~AddBikeView",
    "access": "public",
    "export": true,
    "importPath": "PedalPatrol/src/components/views/addbike-view.js",
    "importStyle": "AddBikeView",
    "description": "Class for the AddBike view",
    "lineNumber": 28,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 430,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/components/views/addbike-view.js~AddBikeView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/views/addbike-view.js~AddBikeView#constructor",
    "access": "public",
    "description": "Creates an instance of the add bike view",
    "lineNumber": 35,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "Component properties"
      }
    ]
  },
  {
    "__docId__": 431,
    "kind": "member",
    "name": "AddBikeP",
    "memberof": "src/components/views/addbike-view.js~AddBikeView",
    "static": false,
    "longname": "src/components/views/addbike-view.js~AddBikeView#AddBikeP",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 432,
    "kind": "member",
    "name": "state",
    "memberof": "src/components/views/addbike-view.js~AddBikeView",
    "static": false,
    "longname": "src/components/views/addbike-view.js~AddBikeView#state",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 433,
    "kind": "member",
    "name": "navigationOptions",
    "memberof": "src/components/views/addbike-view.js~AddBikeView",
    "static": true,
    "longname": "src/components/views/addbike-view.js~AddBikeView.navigationOptions",
    "access": "public",
    "description": "Set the navigation options, change the header to handle a back button.",
    "lineNumber": 61,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Navigation option"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 434,
    "kind": "member",
    "name": "componentWillMount",
    "memberof": "src/components/views/addbike-view.js~AddBikeView",
    "static": false,
    "longname": "src/components/views/addbike-view.js~AddBikeView#componentWillMount",
    "access": "public",
    "description": "Component is about to mount, initialize the data.\nThis function is called before componentDidMount",
    "lineNumber": 76,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 435,
    "kind": "member",
    "name": "componentDidMount",
    "memberof": "src/components/views/addbike-view.js~AddBikeView",
    "static": false,
    "longname": "src/components/views/addbike-view.js~AddBikeView#componentDidMount",
    "access": "public",
    "description": "Component mounted",
    "lineNumber": 98,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 436,
    "kind": "member",
    "name": "componentWillUnmount",
    "memberof": "src/components/views/addbike-view.js~AddBikeView",
    "static": false,
    "longname": "src/components/views/addbike-view.js~AddBikeView#componentWillUnmount",
    "access": "public",
    "description": "Component will unmount after this method is called, do any clean up here\nCall viewUnmounting in base class so it can do any cleanup for the view before calling the presenter destroy method",
    "lineNumber": 112,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 437,
    "kind": "member",
    "name": "isEditBikePage",
    "memberof": "src/components/views/addbike-view.js~AddBikeView",
    "static": false,
    "longname": "src/components/views/addbike-view.js~AddBikeView#isEditBikePage",
    "access": "public",
    "description": "Checks if the title of the view is edit bike, and if so, returns true.",
    "lineNumber": 122,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "title",
        "description": "The title of the view"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true: If the page is edit bike; false: If the page is add bike"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 438,
    "kind": "member",
    "name": "refreshState",
    "memberof": "src/components/views/addbike-view.js~AddBikeView",
    "static": false,
    "longname": "src/components/views/addbike-view.js~AddBikeView#refreshState",
    "access": "public",
    "description": "Refreshes the state of the component so new data is fetched.",
    "lineNumber": 129,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 439,
    "kind": "member",
    "name": "toggleEditing",
    "memberof": "src/components/views/addbike-view.js~AddBikeView",
    "static": false,
    "longname": "src/components/views/addbike-view.js~AddBikeView#toggleEditing",
    "access": "public",
    "description": "Toggle the editing mode.",
    "lineNumber": 138,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 440,
    "kind": "member",
    "name": "setEditing",
    "memberof": "src/components/views/addbike-view.js~AddBikeView",
    "static": false,
    "longname": "src/components/views/addbike-view.js~AddBikeView#setEditing",
    "access": "public",
    "description": "Set the editing value to the passed in value.",
    "lineNumber": 147,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "edit",
        "description": "true: user is editing; false: user is not editing"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 441,
    "kind": "member",
    "name": "_onBack",
    "memberof": "src/components/views/addbike-view.js~AddBikeView",
    "static": false,
    "longname": "src/components/views/addbike-view.js~AddBikeView#_onBack",
    "access": "private",
    "description": "When the back button is clicked, check if the user was editing.",
    "lineNumber": 154,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 442,
    "kind": "member",
    "name": "editingSuccess",
    "memberof": "src/components/views/addbike-view.js~AddBikeView",
    "static": false,
    "longname": "src/components/views/addbike-view.js~AddBikeView#editingSuccess",
    "access": "public",
    "description": "A function to execute when the editing state is true.",
    "lineNumber": 163,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 443,
    "kind": "member",
    "name": "editingFailure",
    "memberof": "src/components/views/addbike-view.js~AddBikeView",
    "static": false,
    "longname": "src/components/views/addbike-view.js~AddBikeView#editingFailure",
    "access": "public",
    "description": "A function to execute when the editing state is false.",
    "lineNumber": 178,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 444,
    "kind": "member",
    "name": "resetAllOnBack",
    "memberof": "src/components/views/addbike-view.js~AddBikeView",
    "static": false,
    "longname": "src/components/views/addbike-view.js~AddBikeView#resetAllOnBack",
    "access": "public",
    "description": "Resets all the data and goes back to the bike page",
    "lineNumber": 186,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 445,
    "kind": "member",
    "name": "_clearData",
    "memberof": "src/components/views/addbike-view.js~AddBikeView",
    "static": false,
    "longname": "src/components/views/addbike-view.js~AddBikeView#_clearData",
    "access": "private",
    "description": "Clears all the data",
    "lineNumber": 194,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 446,
    "kind": "member",
    "name": "deletePrompt",
    "memberof": "src/components/views/addbike-view.js~AddBikeView",
    "static": false,
    "longname": "src/components/views/addbike-view.js~AddBikeView#deletePrompt",
    "access": "public",
    "description": "Prompt to ask the user if they want to delete the bike",
    "lineNumber": 208,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 447,
    "kind": "member",
    "name": "deleteCallback",
    "memberof": "src/components/views/addbike-view.js~AddBikeView",
    "static": false,
    "longname": "src/components/views/addbike-view.js~AddBikeView#deleteCallback",
    "access": "public",
    "description": "Sets a callback on what to do if there is a success or error when a bike is uploaded.",
    "lineNumber": 225,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "success",
        "description": "true: Uploading successful; false: Uploading failed"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 448,
    "kind": "member",
    "name": "_renderItem",
    "memberof": "src/components/views/addbike-view.js~AddBikeView",
    "static": false,
    "longname": "src/components/views/addbike-view.js~AddBikeView#_renderItem",
    "access": "private",
    "description": "Render a text input item.",
    "lineNumber": 255,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "item",
        "description": "A list item, index - The index of the item in the data list"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Component"
      ],
      "spread": false,
      "description": "A react component"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 449,
    "kind": "member",
    "name": "_renderName",
    "memberof": "src/components/views/addbike-view.js~AddBikeView",
    "static": false,
    "longname": "src/components/views/addbike-view.js~AddBikeView#_renderName",
    "access": "private",
    "description": "Renders the name of a required field.",
    "lineNumber": 277,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the field"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Component"
      ],
      "spread": false,
      "description": "A react component"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 450,
    "kind": "member",
    "name": "_keyExtractor",
    "memberof": "src/components/views/addbike-view.js~AddBikeView",
    "static": false,
    "longname": "src/components/views/addbike-view.js~AddBikeView#_keyExtractor",
    "access": "private",
    "description": "Extract the key from the item and index",
    "lineNumber": 288,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "item",
        "description": "A list item"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": "The index of the item"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 451,
    "kind": "member",
    "name": "_onSelectedItemsChange",
    "memberof": "src/components/views/addbike-view.js~AddBikeView",
    "static": false,
    "longname": "src/components/views/addbike-view.js~AddBikeView#_onSelectedItemsChange",
    "access": "private",
    "description": "Add the new selected items to the state and update",
    "lineNumber": 295,
    "params": [
      {
        "nullable": null,
        "types": [
          "List"
        ],
        "spread": false,
        "optional": false,
        "name": "selectedItems",
        "description": "List of selected items"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 452,
    "kind": "member",
    "name": "_renderText",
    "memberof": "src/components/views/addbike-view.js~AddBikeView",
    "static": false,
    "longname": "src/components/views/addbike-view.js~AddBikeView#_renderText",
    "access": "private",
    "description": "Generates the style and colouring of the colours in the multiselect.",
    "lineNumber": 307,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "colour",
        "description": "A colour, usually hexcode"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the item"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Component"
      ],
      "spread": false,
      "description": "A react component"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 453,
    "kind": "member",
    "name": "_getDataToUpdate",
    "memberof": "src/components/views/addbike-view.js~AddBikeView",
    "static": false,
    "longname": "src/components/views/addbike-view.js~AddBikeView#_getDataToUpdate",
    "access": "private",
    "description": "Get the data from the state and send an update to the presenter",
    "lineNumber": 317,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 454,
    "kind": "member",
    "name": "_enableLoader",
    "memberof": "src/components/views/addbike-view.js~AddBikeView",
    "static": false,
    "longname": "src/components/views/addbike-view.js~AddBikeView#_enableLoader",
    "access": "private",
    "description": "Enables the loader.",
    "lineNumber": 339,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 455,
    "kind": "member",
    "name": "_disableLoader",
    "memberof": "src/components/views/addbike-view.js~AddBikeView",
    "static": false,
    "longname": "src/components/views/addbike-view.js~AddBikeView#_disableLoader",
    "access": "private",
    "description": "Disables the loader.",
    "lineNumber": 345,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 456,
    "kind": "member",
    "name": "_inputRequirementFailure",
    "memberof": "src/components/views/addbike-view.js~AddBikeView",
    "static": false,
    "longname": "src/components/views/addbike-view.js~AddBikeView#_inputRequirementFailure",
    "access": "private",
    "description": "Alert for requirement input failure",
    "lineNumber": 350,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 457,
    "kind": "member",
    "name": "alertCallback",
    "memberof": "src/components/views/addbike-view.js~AddBikeView",
    "static": false,
    "longname": "src/components/views/addbike-view.js~AddBikeView#alertCallback",
    "access": "public",
    "description": "Sets a callback on what to do if there is a success or error when a bike is uploaded.",
    "lineNumber": 367,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "success",
        "description": "true: Uploading successful; false: Uploading failed"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 458,
    "kind": "member",
    "name": "_forceRefresh",
    "memberof": "src/components/views/addbike-view.js~AddBikeView",
    "static": false,
    "longname": "src/components/views/addbike-view.js~AddBikeView#_forceRefresh",
    "access": "private",
    "description": "DON'T USE THIS METHOD UNLESS ABSOLUTELY NECESSARY.\nForce a refresh of the view.",
    "lineNumber": 395,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 459,
    "kind": "method",
    "name": "render",
    "memberof": "src/components/views/addbike-view.js~AddBikeView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/views/addbike-view.js~AddBikeView#render",
    "access": "public",
    "description": "Renders items to the screen",
    "lineNumber": 404,
    "return": {
      "nullable": null,
      "types": [
        "Component"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 460,
    "kind": "file",
    "name": "src/components/views/alert-view.js",
    "content": "import React, { Component } from 'react';\nimport { StyleSheet, FlatList, View, TouchableHighlight, RefreshControl, Alert } from 'react-native';\nimport { Icon } from 'react-native-elements';\nimport { HeaderBackButton } from 'react-navigation';\n\nimport { styles } from './stylesheets/base-styles';\n\nimport SafeArea from './helpers/safearea';\nimport NotificationBikeItem from './helpers/notificationbikeitem';\nimport SearchBar from './helpers/searchbar';\nimport BaseView from './view';\nimport AlertPresenter from '../presenters/alert-presenter';\n\n/**\n * Class for the Alert view\n * @extends BaseView\n */\nclass AlertView extends BaseView {\n\t/**\n\t * Creates an instance of AlertView\n\t *\n\t * @constructor\n\t * @param {Object} props - Component properties\n\t */\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.resetState();\n\t\tthis._renderItem = this._renderItem.bind(this);\n\t\tthis._renderSearchBar = this._renderSearchBar.bind(this);\n\t\tthis.AlertP = new AlertPresenter(this);\n\t}\n\n\t/**\n\t * Set the navigation options, change the header to handle a back button.\n\t *\n\t * @return {Object} Navigation option\n\t */\n\tstatic navigationOptions = ({navigation, transitioning}) => {\n\t\t// const { params = {} } = navigation.state;\n\t\t// const back = params._onBack ? params._onBack : () => 'default';\n\t\t// return {\n\t\t// \theaderLeft: (<HeaderBackButton disabled={transitioning} onPress={()=>{back()}}/>),\n\t\t// \ttitle: navigation.getParam('title', 'Alerts') // Default title is Alerts\n\t\t// };\n\t}\n\n\t/**\n\t * Resets the state \n\t */\n\tresetState = () => {\n\t\tthis.state = { refresh: true, data: [], refreshing: false, profileData: {} };\n\t}\n\n\t/**\n\t * Renders an item from a list to the screen by extracting data.\n\t * \n\t * @param {Object} item - An item to be rendered\n\t * @return {Component} A react component\n\t */\n\t_renderItem = ({item}) => {}\n\t\t// <NotificationBikeItem\n\t\t// \tdata={item}\n\t\t// \tfrom={'Alerts'}\n\t\t// \tnavigation={this.props.navigation}/>\n\t// );\n\n\t// Temporary alert until filter feature is implemented\n\ttemporaryFilter = () => {\n\t\tAlert.alert(\n\t\t\t\"The search filter is currently disabled.\",\n\t\t\t\"Sorry for any inconvenience.\",\n\t\t\t[\n\t\t\t\t{ text: \"Ok\", style: \"ok\" },\n\t\t\t],\n\t\t\t{ cancelable: false },\n\t\t);\n\t}\n\n\t/**\n\t * Sets the state with the profile data retreived from the model.\n\t */\n\t_setProfileImage = () => {\n\t\tthis.AlertP.getProfileImage((result) => this.setState({profileData: result}));\n\t}\n\n\t/**\n\t * Renders a search bar as the header including the profile icon and the filter button.\n\t *\n\t * @return {Component} A react component\n\t */\n\t_renderSearchBar = () => {}\n\t// \t<SearchBar \n\t// \t\thandleSearchFilter={(text) => this.AlertP.handleSearchFilter(text)}\n\t// \t\thandleSearchCancel={this.AlertP.handleSearchCancel}\n\t// \t\thandleSearchClear={this.AlertP.handleSearchClear}\n\t// \t\topenFilter={this.temporaryFilter}\n\t// \t\tprofilePicture={this.state.profileData.profilePicture}\n\t// \t\tname={this.state.profileData.full_name}/>\n\t// );\n\n\n\t/**\n\t * Refreshes the state of the component so new data is fetched.\n\t */\n\trefreshState = () => {\n\t\tthis.setState({ \n\t\t\trefresh: !this.state.refresh\n\t\t});\n\t};\n\n\t/**\n\t * Triggers when a component or this component is mounted.\n\t */\n\tcomponentWillMount = () => {\n\t\t// There's a problem with clicking the back button too quickly so need to find a better place to put this\n\t\tthis.props.navigation.setParams({\n\t\t\t_onBack: this._onBack\n\t\t});\n\n\t\tthis.setState({\n\t\t\tdata: this.AlertP.getData()\n\t\t});\n\n\t\tthis._setProfileImage();\n\t};\n\n\n\t/**\n\t * Component is about to unmount, do any cleanup here.\n\t * Call viewUnmounting in base class so it can do any cleanup for the view before calling the presenter destroy method\n\t */\n\tcomponentWillUnmount = () => {\n\t\tthis.viewUnmounting(this.AlertP);\n\t}\n\n\t/**\n\t * When the back button is clicked, check if the user was editing.\n\t */\n\t_onBack = () => {\n\t\tthis.props.navigation.navigate('Tabs');\n\t}\n\n\t/**\n\t * Triggers a force refresh of the view\n\t */\n\t_onRefresh = () => {\n\t\tthis.AlertP.forceRefresh();\n\t}\n\n\t/**\n\t * Extracts the item id as a string.\n\t *\n\t * @param {Object} item - An item being rendered\n\t * @param {Number} index - The index of the item \n\t */\n\t_keyExtractor = (item, index) => item.dataID.toString();\n\n\t/**\n\t * Renders the screen\n\t *\n\t * @return {Component} A react component\n\t */\n\trender() {\n\t\t// // RefreshControl (below) allows for the pull down of the list to update it\n\t\t// return (\t\n\t\t// \t\t<View style={styles.container}>\n\t\t// \t\t\t<SafeArea/>\n\t\t// \t\t\t<FlatList\n\t\t// \t\t\t\tdata={this.state.data}\n\t\t// \t\t\t\textraData={this.state.refresh}\n\t\t// \t\t\t\tkeyExtractor={this._keyExtractor}\n\t\t// \t\t\t\trenderItem={this._renderItem}\n\t\t// \t\t\t\trefreshControl={\n\t\t// \t\t\t\t    <RefreshControl\n\t\t// \t\t\t\t        colors={[\"#9Bd35A\", \"#689F38\"]}\n\t\t// \t\t\t\t        refreshing={this.state.refreshing}\n\t\t// \t\t\t\t        onRefresh={() => this._onRefresh()}\n\t\t// \t\t\t\t    />\n\t\t// \t\t\t\t}>\n\t\t// \t\t\t</FlatList>\n\t\t// \t\t</View>\n\t\t// \t\t);\n\t};\n\n};\n\nexport default AlertView;",
    "static": true,
    "longname": "/Users/seanr/Downloads/temp/src/components/views/alert-view.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 461,
    "kind": "class",
    "name": "AlertView",
    "memberof": "src/components/views/alert-view.js",
    "static": true,
    "longname": "src/components/views/alert-view.js~AlertView",
    "access": "public",
    "export": true,
    "importPath": "PedalPatrol/src/components/views/alert-view.js",
    "importStyle": "AlertView",
    "description": "Class for the Alert view",
    "lineNumber": 18,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 462,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/components/views/alert-view.js~AlertView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/views/alert-view.js~AlertView#constructor",
    "access": "public",
    "description": "Creates an instance of AlertView",
    "lineNumber": 25,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "Component properties"
      }
    ]
  },
  {
    "__docId__": 463,
    "kind": "member",
    "name": "_renderItem",
    "memberof": "src/components/views/alert-view.js~AlertView",
    "static": false,
    "longname": "src/components/views/alert-view.js~AlertView#_renderItem",
    "access": "private",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 464,
    "kind": "member",
    "name": "_renderSearchBar",
    "memberof": "src/components/views/alert-view.js~AlertView",
    "static": false,
    "longname": "src/components/views/alert-view.js~AlertView#_renderSearchBar",
    "access": "private",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 465,
    "kind": "member",
    "name": "AlertP",
    "memberof": "src/components/views/alert-view.js~AlertView",
    "static": false,
    "longname": "src/components/views/alert-view.js~AlertView#AlertP",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 466,
    "kind": "member",
    "name": "navigationOptions",
    "memberof": "src/components/views/alert-view.js~AlertView",
    "static": true,
    "longname": "src/components/views/alert-view.js~AlertView.navigationOptions",
    "access": "public",
    "description": "Set the navigation options, change the header to handle a back button.",
    "lineNumber": 38,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Navigation option"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 467,
    "kind": "member",
    "name": "resetState",
    "memberof": "src/components/views/alert-view.js~AlertView",
    "static": false,
    "longname": "src/components/views/alert-view.js~AlertView#resetState",
    "access": "public",
    "description": "Resets the state ",
    "lineNumber": 50,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 468,
    "kind": "member",
    "name": "state",
    "memberof": "src/components/views/alert-view.js~AlertView",
    "longname": "src/components/views/alert-view.js~AlertView#state",
    "access": "public",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "type": {
      "types": [
        "{\"refresh\": boolean, \"data\": *, \"refreshing\": *, \"profileData\": *}"
      ]
    }
  },
  {
    "__docId__": 470,
    "kind": "member",
    "name": "temporaryFilter",
    "memberof": "src/components/views/alert-view.js~AlertView",
    "static": false,
    "longname": "src/components/views/alert-view.js~AlertView#temporaryFilter",
    "access": "public",
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 471,
    "kind": "member",
    "name": "_setProfileImage",
    "memberof": "src/components/views/alert-view.js~AlertView",
    "static": false,
    "longname": "src/components/views/alert-view.js~AlertView#_setProfileImage",
    "access": "private",
    "description": "Sets the state with the profile data retreived from the model.",
    "lineNumber": 82,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 473,
    "kind": "member",
    "name": "refreshState",
    "memberof": "src/components/views/alert-view.js~AlertView",
    "static": false,
    "longname": "src/components/views/alert-view.js~AlertView#refreshState",
    "access": "public",
    "description": "Refreshes the state of the component so new data is fetched.",
    "lineNumber": 105,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 474,
    "kind": "member",
    "name": "componentWillMount",
    "memberof": "src/components/views/alert-view.js~AlertView",
    "static": false,
    "longname": "src/components/views/alert-view.js~AlertView#componentWillMount",
    "access": "public",
    "description": "Triggers when a component or this component is mounted.",
    "lineNumber": 114,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 475,
    "kind": "member",
    "name": "componentWillUnmount",
    "memberof": "src/components/views/alert-view.js~AlertView",
    "static": false,
    "longname": "src/components/views/alert-view.js~AlertView#componentWillUnmount",
    "access": "public",
    "description": "Component is about to unmount, do any cleanup here.\nCall viewUnmounting in base class so it can do any cleanup for the view before calling the presenter destroy method",
    "lineNumber": 132,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 476,
    "kind": "member",
    "name": "_onBack",
    "memberof": "src/components/views/alert-view.js~AlertView",
    "static": false,
    "longname": "src/components/views/alert-view.js~AlertView#_onBack",
    "access": "private",
    "description": "When the back button is clicked, check if the user was editing.",
    "lineNumber": 139,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 477,
    "kind": "member",
    "name": "_onRefresh",
    "memberof": "src/components/views/alert-view.js~AlertView",
    "static": false,
    "longname": "src/components/views/alert-view.js~AlertView#_onRefresh",
    "access": "private",
    "description": "Triggers a force refresh of the view",
    "lineNumber": 146,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 478,
    "kind": "member",
    "name": "_keyExtractor",
    "memberof": "src/components/views/alert-view.js~AlertView",
    "static": false,
    "longname": "src/components/views/alert-view.js~AlertView#_keyExtractor",
    "access": "private",
    "description": "Extracts the item id as a string.",
    "lineNumber": 156,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "item",
        "description": "An item being rendered"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": "The index of the item"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 479,
    "kind": "method",
    "name": "render",
    "memberof": "src/components/views/alert-view.js~AlertView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/views/alert-view.js~AlertView#render",
    "access": "public",
    "description": "Renders the screen",
    "lineNumber": 163,
    "return": {
      "nullable": null,
      "types": [
        "Component"
      ],
      "spread": false,
      "description": "A react component"
    },
    "params": []
  },
  {
    "__docId__": 480,
    "kind": "file",
    "name": "src/components/views/authloading-view.js",
    "content": "import React, { Component } from 'react';\nimport { ActivityIndicator, StyleSheet, View, Alert, Image } from 'react-native';\n\nimport { styles, colours, authloading_styles } from './stylesheets/authloading-styles';\nlet logo = require('../../assets/images/pplogo.png');\n\nimport Safearea from './helpers/safearea';\n\nimport BaseView from './view';\nimport AuthLoadingPresenter from '../presenters/authloading-presenter';\n\n/**\n * Class for the auth loading view to process the state before continuing.\n * @extends BaseView\n */\nclass AuthLoadingView extends BaseView {\n\tstate = {\n\t\tshouldLogout: false\n\t}\n\n\t/**\n\t * Creates an instance of AuthLoadingView.\n\t *\n\t * @constructor\n\t * @param {Object} props - Component properties\n\t */\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.AuthLoadingP = new AuthLoadingPresenter(this);\n\t}\n\n\t/**\n\t * Component is about to mount\n\t */\n\tcomponentWillMount = () => {\n\t\tconst { navigation } = this.props;\n\t\tconst shouldLogout = navigation.getParam('logout', false);\n\t\tthis.AuthLoadingP.tryLogout(shouldLogout, this.onLogoutSuccess, this.onLogoutFailure);\n\t\tthis.setState({shouldLogout});\n\t}\n\n\t/**\n\t * Component mounted\n\t */\n\tcomponentDidMount = () => {\n\t\tif (!this.state.shouldLogout) {\n\t\t\tthis.AuthLoadingP.checkAuthState(this.onAuthenticationSuccess, this.onAuthenticationFailure);\n\t\t}\n\t}\n\n\t/**\n\t * Component will unmount after this method is called, do any clean up here.\n\t * Call viewUnmounting in base class so it can do any cleanup for the view before calling the presenter destroy method.\n\t */\n\tcomponentWillUnmount = () => {\n\t\tthis.viewUnmounting(this.AuthLoadingP);\n\t}\n\n\t/**\n\t * A function to call on the success of authentication verification.\n\t */\n\tonAuthenticationSuccess = () => {\n\t\tconsole.log('Authentication Success!');\n\t\tthis.navigateToScreen('App');\n\t}\n\n\t/**\n\t * A function to call on the failure of authentication verification.\n\t */\n\tonAuthenticationFailure = () => {\n\t\tconsole.log('Authentication Failure!');\n\t\tthis.navigateToScreen('AuthStack');\n\t}\n\n\t/**\n\t * A function to call on a successful logout.\n\t */\n\tonLogoutSuccess = () => {\n\t\tconsole.log('Logout Success');\n\t\tthis.navigateToScreen('AuthStack');\n\t}\n\n\t/**\n\t * A function to call on a failure to logout.\n\t */\n\tonLogoutFailure = () => {\n\t\tconsole.log('Logout Failure');\n\t\tAlert.alert(\n\t\t\t\"Error: Unable to logout\",\n\t\t\t\"Please try again.\",\n\t\t\t[\n\t\t\t\t{ text: \"Ok\", style: \"ok\" },\n\t\t\t],\n\t\t\t{ cancelable: false },\n\t\t);\n\t\tthis.navigateToScreen('App');\n\t}\n\n\t/**\n\t * Navigate to a particular screen\n\t *\n\t * @param {string} screen - A screen to navigate to. See defined screens in navigation.js\n\t */\n\tnavigateToScreen = (screen) => {\n\t\tconst { navigate } = this.props.navigation;\n\t\tnavigate(screen);\n\t}\n\n\n\t\t\t\t/*<View style={this.state.shouldLogout ? authloading_styles.logoutLoading : styles.loading} pointerEvents=\"none\">\n\t\t\t\t<ActivityIndicator size='large' color=\"#0000ff\" />\n\t\t\t\t<Image source={{uri: 'https://peopleysk2.s3-us-west-2.amazonaws.com/person-images%2FSean+Remedios_5acfda4d3e30dd0016efc576.jpg?versionid=hBsosp9Yj1NnJ0bb6raBlqGmJRlnbBp9'}} />\n\t\t\t</View>*/\n\n\trender() {\n\t\t// return (\n\t\t// \t<View style = {[styles.loading, authloading_styles.container]}>\n\t\t// \t\t<Safearea overrideColour={colours.ppGreen}/>\n\t\t// \t\t<Image source={logo} style={authloading_styles.image} resizeMode=\"contain\" />\n\t\t// \t\t<ActivityIndicator style={authloading_styles.load} size='small' color=\"#FFFFFF\"/>\n\t\t// \t</View>\n\n\t\t// );\n\t}\n}\n\nexport default AuthLoadingView;",
    "static": true,
    "longname": "/Users/seanr/Downloads/temp/src/components/views/authloading-view.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 481,
    "kind": "variable",
    "name": "logo",
    "memberof": "src/components/views/authloading-view.js",
    "static": true,
    "longname": "src/components/views/authloading-view.js~logo",
    "access": "public",
    "export": false,
    "importPath": "PedalPatrol/src/components/views/authloading-view.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 482,
    "kind": "class",
    "name": "AuthLoadingView",
    "memberof": "src/components/views/authloading-view.js",
    "static": true,
    "longname": "src/components/views/authloading-view.js~AuthLoadingView",
    "access": "public",
    "export": true,
    "importPath": "PedalPatrol/src/components/views/authloading-view.js",
    "importStyle": "AuthLoadingView",
    "description": "Class for the auth loading view to process the state before continuing.",
    "lineNumber": 16,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 483,
    "kind": "member",
    "name": "state",
    "memberof": "src/components/views/authloading-view.js~AuthLoadingView",
    "static": false,
    "longname": "src/components/views/authloading-view.js~AuthLoadingView#state",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 484,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/components/views/authloading-view.js~AuthLoadingView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/views/authloading-view.js~AuthLoadingView#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true
  },
  {
    "__docId__": 485,
    "kind": "member",
    "name": "AuthLoadingP",
    "memberof": "src/components/views/authloading-view.js~AuthLoadingView",
    "static": false,
    "longname": "src/components/views/authloading-view.js~AuthLoadingView#AuthLoadingP",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 486,
    "kind": "member",
    "name": "componentWillMount",
    "memberof": "src/components/views/authloading-view.js~AuthLoadingView",
    "static": false,
    "longname": "src/components/views/authloading-view.js~AuthLoadingView#componentWillMount",
    "access": "public",
    "description": "Component is about to mount",
    "lineNumber": 35,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 487,
    "kind": "member",
    "name": "componentDidMount",
    "memberof": "src/components/views/authloading-view.js~AuthLoadingView",
    "static": false,
    "longname": "src/components/views/authloading-view.js~AuthLoadingView#componentDidMount",
    "access": "public",
    "description": "Component mounted",
    "lineNumber": 45,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 488,
    "kind": "member",
    "name": "componentWillUnmount",
    "memberof": "src/components/views/authloading-view.js~AuthLoadingView",
    "static": false,
    "longname": "src/components/views/authloading-view.js~AuthLoadingView#componentWillUnmount",
    "access": "public",
    "description": "Component will unmount after this method is called, do any clean up here.\nCall viewUnmounting in base class so it can do any cleanup for the view before calling the presenter destroy method.",
    "lineNumber": 55,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 489,
    "kind": "member",
    "name": "onAuthenticationSuccess",
    "memberof": "src/components/views/authloading-view.js~AuthLoadingView",
    "static": false,
    "longname": "src/components/views/authloading-view.js~AuthLoadingView#onAuthenticationSuccess",
    "access": "public",
    "description": "A function to call on the success of authentication verification.",
    "lineNumber": 62,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 490,
    "kind": "member",
    "name": "onAuthenticationFailure",
    "memberof": "src/components/views/authloading-view.js~AuthLoadingView",
    "static": false,
    "longname": "src/components/views/authloading-view.js~AuthLoadingView#onAuthenticationFailure",
    "access": "public",
    "description": "A function to call on the failure of authentication verification.",
    "lineNumber": 70,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 491,
    "kind": "member",
    "name": "onLogoutSuccess",
    "memberof": "src/components/views/authloading-view.js~AuthLoadingView",
    "static": false,
    "longname": "src/components/views/authloading-view.js~AuthLoadingView#onLogoutSuccess",
    "access": "public",
    "description": "A function to call on a successful logout.",
    "lineNumber": 78,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 492,
    "kind": "member",
    "name": "onLogoutFailure",
    "memberof": "src/components/views/authloading-view.js~AuthLoadingView",
    "static": false,
    "longname": "src/components/views/authloading-view.js~AuthLoadingView#onLogoutFailure",
    "access": "public",
    "description": "A function to call on a failure to logout.",
    "lineNumber": 86,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 493,
    "kind": "member",
    "name": "navigateToScreen",
    "memberof": "src/components/views/authloading-view.js~AuthLoadingView",
    "static": false,
    "longname": "src/components/views/authloading-view.js~AuthLoadingView#navigateToScreen",
    "access": "public",
    "description": "Navigate to a particular screen",
    "lineNumber": 104,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "screen",
        "description": "A screen to navigate to. See defined screens in navigation.js"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 494,
    "kind": "method",
    "name": "render",
    "memberof": "src/components/views/authloading-view.js~AuthLoadingView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/views/authloading-view.js~AuthLoadingView#render",
    "access": "public",
    "description": null,
    "lineNumber": 115,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 495,
    "kind": "file",
    "name": "src/components/views/bike-view.js",
    "content": "import React, { Component } from 'react';\nimport { StyleSheet, FlatList, View, TouchableHighlight, Alert, RefreshControl, ScrollView } from 'react-native';\nimport { Icon } from 'react-native-elements';\n\nimport { styles, colours, bike_styles } from './stylesheets/bike-styles';\n\nimport SafeArea from './helpers/safearea';\nimport BikeItem from './helpers/bikeitem';\nimport SearchBar from './helpers/searchbar';\nimport BaseView from './view';\nimport BikePresenter from '../presenters/bike-presenter';\n\n/**\n * Class for the Bike view\n * @extends BaseView\n */\nclass BikeView extends BaseView {\n\t/**\n\t * Creates an instance of BikeView\n\t *\n\t * @constructor\n\t * @param {Object} props - Component properties\n\t */\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.resetState();\n\n\t\tthis.searchBarRef = null;\n\t\t// Another way to bind is to do () => {}\n\t\tthis._renderItem = this._renderItem.bind(this);\n\t\tthis._renderSearchBar = this._renderSearchBar.bind(this);\n\t\tthis.BikeP = new BikePresenter(this);\n\t}\n\n\t/**\n\t * Resets the state\n\t */\n\tresetState = () => {\n\t\tthis.state = { refresh: true, data: [], refreshing: false, profileData: {} };\n\t}\n\n\t/**\n\t * Renders an item from a list to the screen by extracting data.\n\t * \n\t * @param {Object} item - An item to be rendered\n\t * @return {Component} A react component\n\t */\n\t_renderItem = ({item}) => {}\n\t// \t<BikeItem\n\t// \t\tdata={item}\n\t// \t\tnavigation={this.props.navigation}/>\n\t// );\n\n\t/**\n\t * Sets the profile image for the view\n\t */\n\t_setProfileImage = () => {\n\t\tthis.BikeP.getProfileImage((result) => this.setState({profileData: result}));\n\t}\n\t\n\ttemporaryFilter = () => {\n\t\tAlert.alert(\n\t\t\t\t\"The search filter is currently disabled.\",\n\t\t\t\t\"Sorry for any inconvenience.\",\n\t\t\t\t[\n\t\t\t\t\t{ text: \"Ok\", style: \"ok\" },\n\t\t\t\t],\n\t\t\t\t{ cancelable: false },\n\t\t\t);\n\t}\n\n\t/**\n\t * Renders a search bar as the header including the profile icon and the filter button.\n\t *\n\t * @return {Component} A react component\n\t */\n\t_renderSearchBar = () => {}\n\t// \t<SearchBar \n\t// \t\thandleSearchFilter={(text) => this.BikeP.handleSearchFilter(text)}\n\t// \t\thandleSearchCancel={this.BikeP.handleSearchCancel}\n\t// \t\thandleSearchClear={this.BikeP.handleSearchClear}\n\t// \t\tsearchBy='name'\n\t// \t\topenFilter={this.temporaryFilter}\n\t// \t\tprofilePicture={this.state.profileData.profilePicture}\n\t// \t\tname={this.state.profileData.full_name}\n\t// \t\tnumNotifications={this.BikeP.getNotificationCount()}\n\t// \t\tsearchRef={(ref) => this.searchBarRef = ref}/>\n\t// );\n\n\n\t/**\n\t * Refreshes the state of the component so new data is fetched.\n\t */\n\trefreshState = () => {\n\t\tthis.setState({ \n\t\t\trefresh: !this.state.refresh\n\t\t});\n\t};\n\n\t/**\n\t * Component is about to mount\n\t */\n\tcomponentWillMount = () => {\n\t\tthis._setProfileImage();\n\t}\n\n\t/**\n\t * Triggers when the component is mounted.\n\t */\n\tcomponentDidMount = () => {\n\t\tthis.setState({\n\t\t\tdata: this.BikeP.getData()\n\t\t});\n\t\tthis._setProfileImage();\n\t};\n\n\t/**\n\t * Component has updated with set state.\n\t */\n\tcomponentDidUpdate = () => {\n\t\tif (this.searchBarRef && !this.searchBarRef.isSearching()) {\n\t\t\tconst data = this.BikeP.getData();\n\t\t\t// DANGEROUS - Only set the state again if the data is different\n\t\t\tif (JSON.stringify(data) !== JSON.stringify(this.state.data)) {\n\t\t\t\tthis.setState({data}); // This is very dangerous to do in componentDidUpdate\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Component is about to unmount, do any cleanup here.\n\t * Call viewUnmounting in base class so it can do any cleanup for the view before calling the presenter destroy method\n\t */\n\tcomponentWillUnmount = () => {\n\t\tthis.viewUnmounting(this.BikeP);\n\t}\n\n\t/**\n\t * Triggers a force refresh of the view\n\t */\n\t_onRefresh = () => {\n\t\tthis.BikeP.forceRefresh();\n\t}\n\n\t/**\n\t * Extracts the item id as a string.\n\t *\n\t * @param {Object} item - An item being rendered\n\t * @param {Number} index - The index of the item \n\t */\n\t_keyExtractor = (item, index) => item.id;\n\n\t/**\n\t * Renders the screen\n\t */\n\trender() {\n\t\t// return (\n\t\t// \t\t<View style={styles.container}>\n\t\t// \t\t\t<SafeArea/>\n\t\t// \t\t\t<View>\n\t\t// \t\t\t\t<FlatList\n\t\t// \t\t\t\t\tscrollEnabled={false}\n\t\t// \t\t\t\t\tListHeaderComponent={this._renderSearchBar}\n\t\t// \t\t\t\t\tstickyHeaderIndices={[0]}/>\n\t\t// \t\t\t</View>\n\t\t// \t\t\t{/* List of bikes */}\n\t\t// \t\t\t<ScrollView>\n\t\t// \t\t\t\t<FlatList\n\t\t// \t\t\t\t\tdata={this.state.data}\n\t\t// \t\t\t\t\textraData={this.state.refresh}\n\t\t// \t\t\t\t\tkeyExtractor={this._keyExtractor}\n\t\t// \t\t\t\t\trenderItem={this._renderItem}\n\t\t// \t\t\t\t\tcontentContainerStyle={{paddingBottom: 5}}>\n\t\t// \t\t\t\t</FlatList>\n\t\t// \t\t\t</ScrollView>\n\n\t\t// \t\t\t{/* Add button */}\n\t\t// \t\t\t<TouchableHighlight style={bike_styles.add} onPress={() => this.props.navigation.navigate('AddBike', {title: 'Add Bike'})} accessibilityLabel=\"New\">\n\t\t// \t\t\t\t<Icon name=\"md-add\" type=\"ionicon\" size={30} color={colours.ppGreen} />\n\t\t// \t\t\t</TouchableHighlight>\n\t\t// \t\t</View>\n\t\t// );\n\t};\n\n};\n\nexport default BikeView;",
    "static": true,
    "longname": "/Users/seanr/Downloads/temp/src/components/views/bike-view.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 496,
    "kind": "class",
    "name": "BikeView",
    "memberof": "src/components/views/bike-view.js",
    "static": true,
    "longname": "src/components/views/bike-view.js~BikeView",
    "access": "public",
    "export": true,
    "importPath": "PedalPatrol/src/components/views/bike-view.js",
    "importStyle": "BikeView",
    "description": "Class for the Bike view",
    "lineNumber": 17,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 497,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/components/views/bike-view.js~BikeView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/views/bike-view.js~BikeView#constructor",
    "access": "public",
    "description": "Creates an instance of BikeView",
    "lineNumber": 24,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "Component properties"
      }
    ]
  },
  {
    "__docId__": 498,
    "kind": "member",
    "name": "searchBarRef",
    "memberof": "src/components/views/bike-view.js~BikeView",
    "static": false,
    "longname": "src/components/views/bike-view.js~BikeView#searchBarRef",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 499,
    "kind": "member",
    "name": "_renderItem",
    "memberof": "src/components/views/bike-view.js~BikeView",
    "static": false,
    "longname": "src/components/views/bike-view.js~BikeView#_renderItem",
    "access": "private",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 500,
    "kind": "member",
    "name": "_renderSearchBar",
    "memberof": "src/components/views/bike-view.js~BikeView",
    "static": false,
    "longname": "src/components/views/bike-view.js~BikeView#_renderSearchBar",
    "access": "private",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 501,
    "kind": "member",
    "name": "BikeP",
    "memberof": "src/components/views/bike-view.js~BikeView",
    "static": false,
    "longname": "src/components/views/bike-view.js~BikeView#BikeP",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 502,
    "kind": "member",
    "name": "resetState",
    "memberof": "src/components/views/bike-view.js~BikeView",
    "static": false,
    "longname": "src/components/views/bike-view.js~BikeView#resetState",
    "access": "public",
    "description": "Resets the state",
    "lineNumber": 38,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 503,
    "kind": "member",
    "name": "state",
    "memberof": "src/components/views/bike-view.js~BikeView",
    "longname": "src/components/views/bike-view.js~BikeView#state",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "{\"refresh\": boolean, \"data\": *, \"refreshing\": *, \"profileData\": *}"
      ]
    }
  },
  {
    "__docId__": 505,
    "kind": "member",
    "name": "_setProfileImage",
    "memberof": "src/components/views/bike-view.js~BikeView",
    "static": false,
    "longname": "src/components/views/bike-view.js~BikeView#_setProfileImage",
    "access": "private",
    "description": "Sets the profile image for the view",
    "lineNumber": 57,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 506,
    "kind": "member",
    "name": "temporaryFilter",
    "memberof": "src/components/views/bike-view.js~BikeView",
    "static": false,
    "longname": "src/components/views/bike-view.js~BikeView#temporaryFilter",
    "access": "public",
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 508,
    "kind": "member",
    "name": "refreshState",
    "memberof": "src/components/views/bike-view.js~BikeView",
    "static": false,
    "longname": "src/components/views/bike-view.js~BikeView#refreshState",
    "access": "public",
    "description": "Refreshes the state of the component so new data is fetched.",
    "lineNumber": 94,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 509,
    "kind": "member",
    "name": "componentWillMount",
    "memberof": "src/components/views/bike-view.js~BikeView",
    "static": false,
    "longname": "src/components/views/bike-view.js~BikeView#componentWillMount",
    "access": "public",
    "description": "Component is about to mount",
    "lineNumber": 103,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 510,
    "kind": "member",
    "name": "componentDidMount",
    "memberof": "src/components/views/bike-view.js~BikeView",
    "static": false,
    "longname": "src/components/views/bike-view.js~BikeView#componentDidMount",
    "access": "public",
    "description": "Triggers when the component is mounted.",
    "lineNumber": 110,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 511,
    "kind": "member",
    "name": "componentDidUpdate",
    "memberof": "src/components/views/bike-view.js~BikeView",
    "static": false,
    "longname": "src/components/views/bike-view.js~BikeView#componentDidUpdate",
    "access": "public",
    "description": "Component has updated with set state.",
    "lineNumber": 120,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 512,
    "kind": "member",
    "name": "componentWillUnmount",
    "memberof": "src/components/views/bike-view.js~BikeView",
    "static": false,
    "longname": "src/components/views/bike-view.js~BikeView#componentWillUnmount",
    "access": "public",
    "description": "Component is about to unmount, do any cleanup here.\nCall viewUnmounting in base class so it can do any cleanup for the view before calling the presenter destroy method",
    "lineNumber": 134,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 513,
    "kind": "member",
    "name": "_onRefresh",
    "memberof": "src/components/views/bike-view.js~BikeView",
    "static": false,
    "longname": "src/components/views/bike-view.js~BikeView#_onRefresh",
    "access": "private",
    "description": "Triggers a force refresh of the view",
    "lineNumber": 141,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 514,
    "kind": "member",
    "name": "_keyExtractor",
    "memberof": "src/components/views/bike-view.js~BikeView",
    "static": false,
    "longname": "src/components/views/bike-view.js~BikeView#_keyExtractor",
    "access": "private",
    "description": "Extracts the item id as a string.",
    "lineNumber": 151,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "item",
        "description": "An item being rendered"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": "The index of the item"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 515,
    "kind": "method",
    "name": "render",
    "memberof": "src/components/views/bike-view.js~BikeView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/views/bike-view.js~BikeView#render",
    "access": "public",
    "description": "Renders the screen",
    "lineNumber": 156,
    "params": [],
    "return": null
  },
  {
    "__docId__": 516,
    "kind": "file",
    "name": "src/components/views/bikedetails-view.js",
    "content": "import React, { Component } from 'react';\nimport { StyleSheet, Text, View, Button, PixelRatio, TouchableOpacity, Image, Alert, ScrollView, FlatList, Dimensions } from 'react-native';\nimport { Icon } from 'react-native-elements';\nimport ImagePicker from 'react-native-image-picker';\nimport { HeaderBackButton } from 'react-navigation';\nimport { TextInput } from 'react-native-paper';\n\nimport { styles, text, bikedetails_styles } from './stylesheets/bikedetails-styles';\n\nimport BaseView from './view';\nimport SafeArea from './helpers/safearea';\nimport HandleBack from './helpers/handleback';\nimport ImageCarousel from './helpers/imagecarousel';\nimport BikeDetailsPresenter from '../presenters/bikedetails-presenter';\nimport TimeUtil from '../../util/timeutility';\n\n/**\n * Class for the bike details view to display information about a bike.\n */\nclass BikeDetailsView extends BaseView {\n\tstate = {\n\t\tdata: [],\n\t\tphotoEntries: [],\n\t\trawData: []\n\t}\n\n\t/**\n\t * Set the navigation options, change the header to handle a back button.\n\t *\n\t * @return {Object} Navigation option\n\t */\n\tstatic navigationOptions = ({navigation, transitioning}) => {\n\t\t// const { params = {} } = navigation.state;\n\t\t// const back = params._onBack ? params._onBack : () => 'default';\n\t\t// return {\n\t\t// \theaderLeft: (<HeaderBackButton disabled={transitioning} onPress={()=>{back()}}/>),\n\t\t// \ttitle: navigation.getParam('title', 'Bike Details')\n\t\t// }\n\t}\n\n\t/**\n\t * Creates an instance of the add bike view\n\t *\n\t * @constructor\n\t * @param {Object} props - Component properties\n\t */\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.BikeDetP = new BikeDetailsPresenter(this);\n\t}\n\n\t/**\n\t * Navigates to a certain screen with parameters.\n\t * \n\t * @param {string} screen - The screen name to navigate to. Name must be in navigation.js\n\t */\n\tnavigate = (screen) => {\n\t\tthis.props.navigation.navigate({\n\t\t\trouteName: screen,\n\t\t\tparams: {\n\t\t\t\trawData: this.state.rawData,\n\t\t\t\tfrom: 'BikeDetails'\n\t\t\t},\n\t\t\tkey: screen + TimeUtil.getDateTime()\n\t\t});\n\n\t};\n\n\t/**\n\t * Handles the report found button clicked.\n\t */\n\t_handleClick() {\n\t\tthis.navigate(\"ReportFound\");\n\t}\n\n\t/**\n     * Handles the confirm found button clicked\n     */\n    _handleClickToConfirm(){\n        this.BikeDetP.confirmFound(this.state.rawData,this.alertConfirmCallback);\n    }\n\n    /**\n     * Handles the reject button clicked\n     */\n    _handleClickToReject(){\n        this.BikeDetP.rejectFound(this.state.rawData,this.alertRejectionCallback);\n    }\n\n    /**\n     * Function for decision confirm\n     */\n    decisionConfirm = () => {\n    \tAlert.alert(\n\t\t\t\"Are you sure you want to confirm your bike found?\",\n\t\t\t\"\",\n\t\t\t[\n\t\t\t\t{ text: \"No\", onPress: () => {}, style: \"cancel\" },\n\t\t\t\t{ text: \"Yes\", onPress: () => this._handleClickToConfirm() },\n\t\t\t],\n\t\t\t{ cancelable: false },\n\t\t);\n    }\n\n    /**\n     * Function for decision reject\n     */\n    decisionReject = () => {\n    \tAlert.alert(\n\t\t\t\"Are you sure you want to reject the found bike report?\",\n\t\t\t\"\",\n\t\t\t[\n\t\t\t\t{ text: \"No\", onPress: () => {}, style: \"cancel\" },\n\t\t\t\t{ text: \"Yes\", onPress: () => this._handleClickToReject() },\n\t\t\t],\n\t\t\t{ cancelable: false },\n\t\t);\n    }\n\n    /**\n     * Confirm callback on success or failure trying to confirm.\n     *\n     * @param {Boolean} success - If the found bike confirmation was accepted or not\n     */\n    alertConfirmCallback = (success) => {\n\t\tthis.refreshState();\n\t\tif (success) {\n\t\t\tAlert.alert(\n\t\t\t\t\"Congratulations, you have found your bike!\",\n\t\t\t\t\"\",\n\t\t\t\t[\n\t\t\t\t\t{ text: \"Ok\", onPress: () => this.props.navigation.navigate('Home'), style: \"ok\" },\n\t\t\t\t],\n\t\t\t\t{ cancelable: false },\n\t\t\t);\n\t\t} else {\n\t\t\tAlert.alert(\n\t\t\t\t\"Fail to confirm.\",\n\t\t\t\t\"Please try again.\",\n\t\t\t\t[\n\t\t\t\t\t{ text: \"Ok\", onPress: () => {}, style: \"ok\" },\n\t\t\t\t],\n\t\t\t\t{ cancelable: false },\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n     * Reject callback on success or failure trying to reject.\n     *\n     * @param {Boolean} success - If the found bike rejection was accepted or not\n     */\n    alertRejectionCallback = (success) => {\n\t\tthis.refreshState();\n\t\tif (success) {\n\t\t\tAlert.alert(\n\t\t\t\t\"Bike found report rejected.\",\n\t\t\t\t\"\",\n\t\t\t\t[\n\t\t\t\t\t{ text: \"Ok\", onPress: () => this.props.navigation.navigate('Home'), style: \"ok\" },\n\t\t\t\t],\n\t\t\t\t{ cancelable: false },\n\t\t\t);\n\t\t} else {\n\t\t\tAlert.alert(\n\t\t\t\t\"Fail to confirm.\",\n\t\t\t\t\"Please try again.\",\n\t\t\t\t[\n\t\t\t\t\t{ text: \"Ok\", onPress: () => {}, style: \"ok\" },\n\t\t\t\t],\n\t\t\t\t{ cancelable: false },\n\t\t\t);\n\t\t}\n    }\n\n\t/**\n\t * Component mounted\n\t */\n\tcomponentDidMount = () => {\n\t\tconst { navigation } = this.props;\n\t\t// const data = navigation.getParam('data', 'NO-DATA');\n\n\t\t// item = this.sectionedMultiSelect._findItem(data.colour);\n\t\t// this.sectionedMultiSelect._toggleItem(item, false);\n\t}\n\n\n\t/**\n\t * Component is about to mount, initialize the data.\n\t * This function is called before componentDidMount\n\t */\n\tcomponentWillMount = () => {\n\t\tthis.props.navigation.setParams({\n\t\t\t_onBack: this._onBack,\n\t\t});\n\n\t\tconst { navigation } = this.props;\n\t\tlet data=[];\n    \tconst id = navigation.getParam('id','NO-DATA');\n\t\tconst fromPage = navigation.getParam('from', 'Home');\n\t    if (id ==='NO-DATA'){\n\t\t    data = navigation.getParam('data', 'NO-DATA');\n\t\t}else{\n\t\t    data = this.BikeDetP.getDataFromID(id);\n\t\t}\n\n\t\tconst { formedData, thumbnail } = this.BikeDetP.translateData(data, fromPage);\n\n\t\tthis.setState({\n\t\t\trawData: data,\n\t\t\tfrom: fromPage,\n\t\t\tdata: formedData,\n\t\t\tphotoEntries: thumbnail\n\t\t});\n\t}\n\n\t/**\n\t * Component will unmount after this method is called, do any clean up here\n\t * Call viewUnmounting in base class so it can do any cleanup for the view before calling the presenter destroy method\n\t */\n\tcomponentWillUnmount = () => {\n\t\tthis.viewUnmounting(this.BikeDetP);\n\t}\n\n\t/**\n\t * When the back button is clicked, check if the user was editing.\n\t */\n\t_onBack = () => {\n\t\tthis.setState({\n\t\t\tdata: [],\n\t\t\tphotoEntries: []\n\t\t});\n\t\tthis.props.navigation.navigate(this.state.from);\n\t}\n\n\t/**\n\t * Refreshes the state of the component so new data is fetched.\n\t */\n\trefreshState = () => {\n\t\tthis.setState({ \n\t\t\trefresh: !this.state.refresh\n\t\t});\n\t}\n\n\t/**\n\t * Renders a bike detail \n\t *\n\t * @param {Object} item - The item of the bike\n\t * @return {Component} A react-native component\n\t */\n\t_renderItem = ({item}) => {}\n\t// \t<TextInput\n\t// \t\tstyle={text.textInput}\n\t// \t\tlabel={this._renderText(item.title)}\n\t// \t\tvalue={item.text}\n\t// \t\tmultiline\n\t// \t\tdisabled/>\n\t// );\n\n\t/**\n\t * Renders the text of the label.\n\t *\n\t * @param {string} text - The text to render\n\t * @return {Component} A react-native component\n\t */\n\t_renderText = (text) => {}\n\t// \t<Text style={[{color: 'black'}]}>{text}</Text>\n\t// );\n\n\t/**\n\t * Extract the key from the item and index\n\t */\n\t_keyExtractor = (item, index) => item.id;\n\n\t/**\n\t * A callback function if there is a map open error.\n\t */\n\tonMapOpenError = () => {\n\t\tAlert.alert(\n\t\t\t\"Unable to Open Directions\",\n\t\t\t\"\",\n\t\t\t[\n\t\t\t\t{ text: \"Ok\", onPress: () => {}, style: \"ok\" },\n\t\t\t],\n\t\t\t{ cancelable: false },\n\t\t);\n\t}\n\n\t/**\n\t * Renders items to the screen\n\t *\n\t * @return {Component} \n\t */\n\trender() {\n\t\tconst { width: windowWidth } = Dimensions.get('window');\n\n\t\t// return (\n\t\t// \t\t<HandleBack onBack={this._onBack}>\n\t\t// \t\t\t<SafeArea/>\n\t\t// \t\t\t\t<View style={styles.container}>\n\t\t// \t\t\t\t\t<ScrollView contentContainerStyle={bikedetails_styles.contentContainer}>\n\n\t\t// \t\t\t\t\t<ImageCarousel \n\t\t// \t\t\t\t\t\tphotos={this.state.photoEntries} \n\t\t// \t\t\t\t\t\tselected={() => 'default'}/>\n\n\n\t\t// \t\t\t\t\t{/* List of text inputs */}\n\t\t// \t\t\t\t\t<FlatList\n\t\t// \t\t\t\t\t\tstyle={bikedetails_styles.flatList}\n\t\t// \t\t\t\t\t\tdata={this.state.data}\n\t\t// \t\t\t\t\t\textraData={this.state}\n\t\t// \t\t\t\t\t\tkeyExtractor={this._keyExtractor}\n\t\t// \t\t\t\t\t\trenderItem={this._renderItem}/>\n\n\t\t// \t\t\t\t\t<View>\n\t\t// \t\t\t\t\t<TouchableOpacity\n\t\t// \t\t\t\t\t\tstyle={bikedetails_styles.touchableButtons}>\n\t\t// \t\t\t\t\t\t<Button \n\t\t// \t\t\t\t\t\t\ttitle='Get Directions'\n\t\t// \t\t\t\t\t\t\tonPress={() => {this.BikeDetP.goToDirectionsOnMap(this.state.rawData, this.onMapOpenError)}}/>\n\t\t// \t\t\t\t\t</TouchableOpacity>\n\t\t// \t\t\t\t\t</View>\n\n\t\t// \t\t\t\t\t{\n\t\t// \t\t\t\t\t\tthis.state.rawData.stolen &&\n\t\t// \t\t\t\t\t\t<View>\n\t\t// \t\t\t\t\t\t\t<TouchableOpacity style={bikedetails_styles.touchableButtons}>\n\t\t// \t\t\t\t\t\t\t\t<Button\n\t\t// \t\t\t\t\t\t\t\t\tonPress={()=>this._handleClick()}\n\t\t// \t\t\t\t\t\t\t\t\ttitle=\"Report Found\"/>\n\t\t// \t\t\t\t\t\t\t</TouchableOpacity>\n\t\t// \t\t\t\t\t\t</View>\n\t\t// \t\t\t\t\t}\n\t\t// \t\t\t\t\t{\n  //                               this.state.rawData.found &&\n  //                           \t<View style={{flexDirection: 'row', width: windowWidth, justifyContent: 'space-between', marginTop: 10}}>\n\t //                            \t<TouchableOpacity style={[bikedetails_styles.touchableButtons, {width: (windowWidth/2)-15, alignSelf: 'flex-start', marginRight: 5}]}>\n\t //                            \t\t<Button\n\t //                            \t  \t  \tonPress={()=>this.decisionConfirm()}\n\t //                            \t\t\ttitle=\"Confirm Found\"/>\n\t //                            \t</TouchableOpacity>\n\t //                            \t<TouchableOpacity style={[bikedetails_styles.touchableButtons, {width: (windowWidth/2)-15, alignSelf: 'flex-end', marginLeft: 5}]}>\n\t //                            \t\t<Button\n\t //                            \t    \tonPress={()=>this.decisionReject()}\n\t\t//                             \t\ttitle=\"Reject Found\"/>\n  //                           \t\t</TouchableOpacity>\n\t //                            </View>\n  //                           \t}\n\n\t\t// \t\t\t\t\t</ScrollView>\n\t\t// \t\t\t\t</View>\n\t\t// \t\t\t<SafeArea/>\n\t\t// \t\t</HandleBack>\n\t\t// );\n\t}\n\n}\n\nexport default BikeDetailsView;",
    "static": true,
    "longname": "/Users/seanr/Downloads/temp/src/components/views/bikedetails-view.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 517,
    "kind": "class",
    "name": "BikeDetailsView",
    "memberof": "src/components/views/bikedetails-view.js",
    "static": true,
    "longname": "src/components/views/bikedetails-view.js~BikeDetailsView",
    "access": "public",
    "export": true,
    "importPath": "PedalPatrol/src/components/views/bikedetails-view.js",
    "importStyle": "BikeDetailsView",
    "description": "Class for the bike details view to display information about a bike.",
    "lineNumber": 20,
    "interface": false,
    "extends": [
      "src/components/views/view.js~BaseView"
    ]
  },
  {
    "__docId__": 518,
    "kind": "member",
    "name": "state",
    "memberof": "src/components/views/bikedetails-view.js~BikeDetailsView",
    "static": false,
    "longname": "src/components/views/bikedetails-view.js~BikeDetailsView#state",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 519,
    "kind": "member",
    "name": "navigationOptions",
    "memberof": "src/components/views/bikedetails-view.js~BikeDetailsView",
    "static": true,
    "longname": "src/components/views/bikedetails-view.js~BikeDetailsView.navigationOptions",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 520,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/components/views/bikedetails-view.js~BikeDetailsView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/views/bikedetails-view.js~BikeDetailsView#constructor",
    "access": "public",
    "description": "Creates an instance of the add bike view",
    "lineNumber": 47,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "Component properties"
      }
    ]
  },
  {
    "__docId__": 521,
    "kind": "member",
    "name": "BikeDetP",
    "memberof": "src/components/views/bikedetails-view.js~BikeDetailsView",
    "static": false,
    "longname": "src/components/views/bikedetails-view.js~BikeDetailsView#BikeDetP",
    "access": "public",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 522,
    "kind": "member",
    "name": "navigate",
    "memberof": "src/components/views/bikedetails-view.js~BikeDetailsView",
    "static": false,
    "longname": "src/components/views/bikedetails-view.js~BikeDetailsView#navigate",
    "access": "public",
    "description": "Navigates to a certain screen with parameters.",
    "lineNumber": 57,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "screen",
        "description": "The screen name to navigate to. Name must be in navigation.js"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 523,
    "kind": "method",
    "name": "_handleClick",
    "memberof": "src/components/views/bikedetails-view.js~BikeDetailsView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/views/bikedetails-view.js~BikeDetailsView#_handleClick",
    "access": "private",
    "description": "Handles the report found button clicked.",
    "lineNumber": 72,
    "params": [],
    "return": null
  },
  {
    "__docId__": 524,
    "kind": "method",
    "name": "_handleClickToConfirm",
    "memberof": "src/components/views/bikedetails-view.js~BikeDetailsView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/views/bikedetails-view.js~BikeDetailsView#_handleClickToConfirm",
    "access": "private",
    "description": "Handles the confirm found button clicked",
    "lineNumber": 79,
    "params": [],
    "return": null
  },
  {
    "__docId__": 525,
    "kind": "method",
    "name": "_handleClickToReject",
    "memberof": "src/components/views/bikedetails-view.js~BikeDetailsView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/views/bikedetails-view.js~BikeDetailsView#_handleClickToReject",
    "access": "private",
    "description": "Handles the reject button clicked",
    "lineNumber": 86,
    "params": [],
    "return": null
  },
  {
    "__docId__": 526,
    "kind": "member",
    "name": "decisionConfirm",
    "memberof": "src/components/views/bikedetails-view.js~BikeDetailsView",
    "static": false,
    "longname": "src/components/views/bikedetails-view.js~BikeDetailsView#decisionConfirm",
    "access": "public",
    "description": "Function for decision confirm",
    "lineNumber": 93,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 527,
    "kind": "member",
    "name": "decisionReject",
    "memberof": "src/components/views/bikedetails-view.js~BikeDetailsView",
    "static": false,
    "longname": "src/components/views/bikedetails-view.js~BikeDetailsView#decisionReject",
    "access": "public",
    "description": "Function for decision reject",
    "lineNumber": 108,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 528,
    "kind": "member",
    "name": "alertConfirmCallback",
    "memberof": "src/components/views/bikedetails-view.js~BikeDetailsView",
    "static": false,
    "longname": "src/components/views/bikedetails-view.js~BikeDetailsView#alertConfirmCallback",
    "access": "public",
    "description": "Confirm callback on success or failure trying to confirm.",
    "lineNumber": 125,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "success",
        "description": "If the found bike confirmation was accepted or not"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 529,
    "kind": "member",
    "name": "alertRejectionCallback",
    "memberof": "src/components/views/bikedetails-view.js~BikeDetailsView",
    "static": false,
    "longname": "src/components/views/bikedetails-view.js~BikeDetailsView#alertRejectionCallback",
    "access": "public",
    "description": "Reject callback on success or failure trying to reject.",
    "lineNumber": 153,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "success",
        "description": "If the found bike rejection was accepted or not"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 530,
    "kind": "member",
    "name": "componentDidMount",
    "memberof": "src/components/views/bikedetails-view.js~BikeDetailsView",
    "static": false,
    "longname": "src/components/views/bikedetails-view.js~BikeDetailsView#componentDidMount",
    "access": "public",
    "description": "Component mounted",
    "lineNumber": 179,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 531,
    "kind": "member",
    "name": "componentWillMount",
    "memberof": "src/components/views/bikedetails-view.js~BikeDetailsView",
    "static": false,
    "longname": "src/components/views/bikedetails-view.js~BikeDetailsView#componentWillMount",
    "access": "public",
    "description": "Component is about to mount, initialize the data.\nThis function is called before componentDidMount",
    "lineNumber": 192,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 532,
    "kind": "member",
    "name": "componentWillUnmount",
    "memberof": "src/components/views/bikedetails-view.js~BikeDetailsView",
    "static": false,
    "longname": "src/components/views/bikedetails-view.js~BikeDetailsView#componentWillUnmount",
    "access": "public",
    "description": "Component will unmount after this method is called, do any clean up here\nCall viewUnmounting in base class so it can do any cleanup for the view before calling the presenter destroy method",
    "lineNumber": 221,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 533,
    "kind": "member",
    "name": "_onBack",
    "memberof": "src/components/views/bikedetails-view.js~BikeDetailsView",
    "static": false,
    "longname": "src/components/views/bikedetails-view.js~BikeDetailsView#_onBack",
    "access": "private",
    "description": "When the back button is clicked, check if the user was editing.",
    "lineNumber": 228,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 534,
    "kind": "member",
    "name": "refreshState",
    "memberof": "src/components/views/bikedetails-view.js~BikeDetailsView",
    "static": false,
    "longname": "src/components/views/bikedetails-view.js~BikeDetailsView#refreshState",
    "access": "public",
    "description": "Refreshes the state of the component so new data is fetched.",
    "lineNumber": 239,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 535,
    "kind": "member",
    "name": "_renderItem",
    "memberof": "src/components/views/bikedetails-view.js~BikeDetailsView",
    "static": false,
    "longname": "src/components/views/bikedetails-view.js~BikeDetailsView#_renderItem",
    "access": "private",
    "description": "Renders a bike detail ",
    "lineNumber": 251,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "item",
        "description": "The item of the bike"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Component"
      ],
      "spread": false,
      "description": "A react-native component"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 536,
    "kind": "member",
    "name": "_renderText",
    "memberof": "src/components/views/bikedetails-view.js~BikeDetailsView",
    "static": false,
    "longname": "src/components/views/bikedetails-view.js~BikeDetailsView#_renderText",
    "access": "private",
    "description": "Renders the text of the label.",
    "lineNumber": 266,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "The text to render"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Component"
      ],
      "spread": false,
      "description": "A react-native component"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 537,
    "kind": "member",
    "name": "_keyExtractor",
    "memberof": "src/components/views/bikedetails-view.js~BikeDetailsView",
    "static": false,
    "longname": "src/components/views/bikedetails-view.js~BikeDetailsView#_keyExtractor",
    "access": "private",
    "description": "Extract the key from the item and index",
    "lineNumber": 273,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 538,
    "kind": "member",
    "name": "onMapOpenError",
    "memberof": "src/components/views/bikedetails-view.js~BikeDetailsView",
    "static": false,
    "longname": "src/components/views/bikedetails-view.js~BikeDetailsView#onMapOpenError",
    "access": "public",
    "description": "A callback function if there is a map open error.",
    "lineNumber": 278,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 539,
    "kind": "method",
    "name": "render",
    "memberof": "src/components/views/bikedetails-view.js~BikeDetailsView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/views/bikedetails-view.js~BikeDetailsView#render",
    "access": "public",
    "description": "Renders items to the screen",
    "lineNumber": 294,
    "return": {
      "nullable": null,
      "types": [
        "Component"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 540,
    "kind": "file",
    "name": "src/components/views/help-view.js",
    "content": "import * as React from 'react';\nimport { List, Checkbox, Text} from 'react-native-paper';\nimport {View, Linking, StyleSheet, Image, ScrollView, TouchableOpactiy} from 'react-native';\nimport {Icon} from 'react-native-elements';\nimport { HeaderBackButton } from 'react-navigation';\n\nimport {styles, colours, help_styles } from './stylesheets/help-styles';\n\nimport BaseView from './view';\n\n/**\n * Class for the help view to display any help information for the user such as the user manual, privacy policy, and contact information.\n */\nclass HelpView extends BaseView {\n\tstate = {\n\t\texpanded: true\n\t}\n\n\t/**\n\t * Set the navigation options, change the header to handle a back button.\n\t *\n\t * @return {Object} Navigation option\n\t */\n\tstatic navigationOptions = ({navigation, transitioning}) => {\n\t\t// const { params = {} } = navigation.state;\n\t\t// const back = params._onBack ? params._onBack : () => 'default';\n\t\t// return {\n\t\t// \theaderLeft: (<HeaderBackButton disabled={transitioning} onPress={()=>{back()}}/>),\n\t\t// \ttitle: navigation.getParam('title', 'Help') // Default title is Alerts\n\t\t// };\n\t}\n\t\n\t/**\n\t * Triggers when a component or this component is mounted.\n\t */\n\tcomponentWillMount = () => {\n\t\t// There's a problem with clicking the back button too quickly so need to find a better place to put this\n\t\tthis.props.navigation.setParams({\n\t\t\t_onBack: this._onBack\n\t\t});\n\t};\n\n\t/**\n\t * When the back button is clicked, check if the user was editing.\n\t */\n\t_onBack = () => {\n\t\tthis.props.navigation.navigate('Tabs');\n\t}\n\t\n\t/**\n\t * Handle the user clicking a link.\n\t *\n\t * @param {string} url - The link to click \n\t */\n\t_handleLinkClick = (url) => {\n\t\tLinking.openURL(url);\n\t};\n\n\t/**\n\t * Renders text in a react-native text component.\n\t *\n\t * @param {string} text - The text to render\n\t * @return {Component} A react native component\n\t */\n\trenderText(text){\n\t\t// return(<Text> \n\t\t// \t{text} \n\t\t// </Text>\n\t\t// )\n\t}\n\n\t/**\n\t * Renders text in a react-native text component with an item style.\n\t *\n\t * @param {string} text - The text to render\n\t * @return {Component} A react native component\n\t */\n\trenderItemText(text){\n\t\t// return(<Text style={help_styles.itemStyle} numberOfLines={10}> \n\t\t// \t{text} \n\t\t// </Text>)\n\t}\n\n\t/**\n\t * Render an icon with a specific name and type.\n\t * \n\t * @param {string} iconName - The name of the icon to be rendered\n\t * @param {string} iconType - The library to get the icon from\n\t * @return {Component} A react native component\n\t */\n\trenderIcon(iconName,iconType){\n\t\t// return(\n\t\t// \t<View style={{width:50}}>\n\t\t// \t\t<Icon name={iconName} type={iconType} size={20} color={'#34bb83'}/>\n\t\t// \t</View>\n\t\t// \t)\n\t}\n\n\t/**\n\t * Renders text as a link.\n\t *\n\t * @param {string} text - The text to render\n\t * @return {Component} A react native component\n\t */\n\trenderLink = (text) => {\n\t\t// <Text style={{color: 'blue'}}>{text}</Text>\n\t}\n\t\n\n\t/**\n\t * Renders the component.\n\t */\n\trender() {\n// \t\treturn ( \n\n\n// <ScrollView>\n\n//       <List.Section>\n\n//         <List.Accordion\n//           title=\"Main Pages\"\n//         >\n//             <List.Accordion  title={this.renderText(\"Lost Bikes\")} left={props => this.renderIcon(\"home\",\"entypo\")} >\n//               {this.renderItemText(\"A feed of bikes that have been reported as stolen with the most recent appearing at the top. Click the bike card for more details. Search bikes by model and pin bike reports you’re interested to the top of your feed.\")}\n//             </List.Accordion>\n\n//             <List.Accordion  title={this.renderText(\"Map\")} left={props => this.renderIcon(\"md-map\",\"ionicon\")} >\n//               {this.renderItemText(\"A map to show the location of reported bike thefts marked as a pin. Click the pins to see quick summaries of the bikes, and click the summaries for more details. Change your notification radius, search by location, filter bikes based on time, report your own stolen bikes.\")}\n//             </List.Accordion>\n\n//             <List.Accordion  title={this.renderText(\"My Bikes\")} left={props => this.renderIcon(\"md-bicycle\",\"ionicon\")} >\n//               {this.renderItemText(\"A page to keep track of all of your registered bikes. This information will be available to users if it is reported stolen, and will be necessary for them to identify your unique bike. Click the plus button to add more bikes, or delete them at the bottom of its bike details page.\")}\n//             </List.Accordion>\n\n//         </List.Accordion>\n\n\n\n//         <List.Accordion\n//           title=\"Key Features\"\n//         >\n//             <List.Accordion  title={this.renderText(\"Register a bike\")} left={props => this.renderIcon(\"add\",\"MaterialIcons\")} >\n//               {this.renderItemText(\"My Bikes page\\nClick the plus button\\nAdd Bike Photos and Details\\nClick Save\")}\n//             </List.Accordion>\n\n//             <List.Accordion  title={this.renderText(\"Create a lost bike report\")} left={props => this.renderIcon(\"pin-drop\",\"MaterialIcons\")}>\n//               {this.renderItemText(\"Map page\\nClick the Pin button\\nPlace pin on map\\nClick check mark\\nSelect a registered bike from the dropdown menu\\nWrite a report description\\nClick submit\")}\n//             </List.Accordion>\n\n//             <List.Accordion  title={this.renderText(\"Message owners of found bikes\")} left={props => this.renderIcon(\"comment\",\"MaterialIcons\")}>\n//             {this.renderItemText(\"Lost Bikes\\nClick the message button the bottom right of the appropriate bike card\\nWrite a description about how the bike was found\\nSelect the location on the map in which the bike was found\\nClick Submit\")}\n//             </List.Accordion>\n\n//             <List.Accordion  title={this.renderText(\"Set notification radius\")} left={props => this.renderIcon(\"circle-o-notch\",\"font-awesome\")}>\n//             {this.renderItemText(\"Map page\\nClick the circle icon\\nPress and hold to place radius circle in desired area\\nResize radius with plus and minus buttons\\nClick the checkmark to save\")}\n//             </List.Accordion>\n\n//         </List.Accordion>\n\n// \t\t\t\t<List.Item\n// \t\t\t\t\ttitle={this.renderLink(\"Privacy Policy\")}\n// \t\t\t\t\texpanded={false}\n// \t\t\t\t\tonPress={() => {this.props.navigation.navigate('PrivacyPolicy')}}>\n// \t\t\t\t</List.Item>\n\n// \t\t\t\t<List.Accordion\n// \t\t\t\t\ttitle=\"Contact Us\" >\n\n// \t\t\t\t\t<Text \n// \t\t\t\t\t\tstyle={help_styles.itemStyle}\n// \t\t\t\t\t\tonPress={() => {this._handleLinkClick('mailto:pedalpatrolapp@gmail.com?subject=Problem with Pedal Patrol')}}> \n// \t\t\t\t\t\tReport a problem\n// \t\t\t\t\t</Text>\n// \t\t\t\t</List.Accordion>\n\n// \t\t\t</List.Section>\n\n// \t\t\t</ScrollView>\n// \t);\n\t}\n}\n\nexport default HelpView;",
    "static": true,
    "longname": "/Users/seanr/Downloads/temp/src/components/views/help-view.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 541,
    "kind": "class",
    "name": "HelpView",
    "memberof": "src/components/views/help-view.js",
    "static": true,
    "longname": "src/components/views/help-view.js~HelpView",
    "access": "public",
    "export": true,
    "importPath": "PedalPatrol/src/components/views/help-view.js",
    "importStyle": "HelpView",
    "description": "Class for the help view to display any help information for the user such as the user manual, privacy policy, and contact information.",
    "lineNumber": 14,
    "interface": false,
    "extends": [
      "src/components/views/view.js~BaseView"
    ]
  },
  {
    "__docId__": 542,
    "kind": "member",
    "name": "state",
    "memberof": "src/components/views/help-view.js~HelpView",
    "static": false,
    "longname": "src/components/views/help-view.js~HelpView#state",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 543,
    "kind": "member",
    "name": "navigationOptions",
    "memberof": "src/components/views/help-view.js~HelpView",
    "static": true,
    "longname": "src/components/views/help-view.js~HelpView.navigationOptions",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 544,
    "kind": "member",
    "name": "componentWillMount",
    "memberof": "src/components/views/help-view.js~HelpView",
    "static": false,
    "longname": "src/components/views/help-view.js~HelpView#componentWillMount",
    "access": "public",
    "description": "Triggers when a component or this component is mounted.",
    "lineNumber": 36,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 545,
    "kind": "member",
    "name": "_onBack",
    "memberof": "src/components/views/help-view.js~HelpView",
    "static": false,
    "longname": "src/components/views/help-view.js~HelpView#_onBack",
    "access": "private",
    "description": "When the back button is clicked, check if the user was editing.",
    "lineNumber": 46,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 546,
    "kind": "member",
    "name": "_handleLinkClick",
    "memberof": "src/components/views/help-view.js~HelpView",
    "static": false,
    "longname": "src/components/views/help-view.js~HelpView#_handleLinkClick",
    "access": "private",
    "description": "Handle the user clicking a link.",
    "lineNumber": 55,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "The link to click"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 547,
    "kind": "method",
    "name": "renderText",
    "memberof": "src/components/views/help-view.js~HelpView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/views/help-view.js~HelpView#renderText",
    "access": "public",
    "description": "Renders text in a react-native text component.",
    "lineNumber": 65,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "The text to render"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Component"
      ],
      "spread": false,
      "description": "A react native component"
    }
  },
  {
    "__docId__": 548,
    "kind": "method",
    "name": "renderItemText",
    "memberof": "src/components/views/help-view.js~HelpView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/views/help-view.js~HelpView#renderItemText",
    "access": "public",
    "description": "Renders text in a react-native text component with an item style.",
    "lineNumber": 78,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "The text to render"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Component"
      ],
      "spread": false,
      "description": "A react native component"
    }
  },
  {
    "__docId__": 549,
    "kind": "method",
    "name": "renderIcon",
    "memberof": "src/components/views/help-view.js~HelpView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/views/help-view.js~HelpView#renderIcon",
    "access": "public",
    "description": "Render an icon with a specific name and type.",
    "lineNumber": 91,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "iconName",
        "description": "The name of the icon to be rendered"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "iconType",
        "description": "The library to get the icon from"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Component"
      ],
      "spread": false,
      "description": "A react native component"
    }
  },
  {
    "__docId__": 550,
    "kind": "member",
    "name": "renderLink",
    "memberof": "src/components/views/help-view.js~HelpView",
    "static": false,
    "longname": "src/components/views/help-view.js~HelpView#renderLink",
    "access": "public",
    "description": "Renders text as a link.",
    "lineNumber": 105,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "The text to render"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Component"
      ],
      "spread": false,
      "description": "A react native component"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 551,
    "kind": "method",
    "name": "render",
    "memberof": "src/components/views/help-view.js~HelpView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/views/help-view.js~HelpView#render",
    "access": "public",
    "description": "Renders the component.",
    "lineNumber": 113,
    "params": [],
    "return": null
  },
  {
    "__docId__": 552,
    "kind": "file",
    "name": "src/components/views/helpers/bikeitem.js",
    "content": "import React, { Component } from 'react';\nimport { StyleSheet, TouchableOpacity, Text, Image, View } from 'react-native';\nimport { Icon } from 'react-native-elements';\nimport PropTypes from 'prop-types';\n\nimport TimeUtil from '../../../util/timeutility';\n\n/**\n * Class to help the displaying of bike items on the bike view page\n */\nclass BikeItem extends Component {\n\t/**\n\t * Helper prop types.\n\t */\n\tstatic propTypes = {\n\t\tdata: PropTypes.shape({\n\t\t\tmodel: PropTypes.string,\n\t\t\tserial_number: PropTypes.string.isRequired,\n\t\t\tname: PropTypes.string.isRequired,\n\t\t\tthumbnail: PropTypes.array.isRequired,\n\t\t\tnotable_features: PropTypes.string,\n\t\t\tdescription: PropTypes.string,\n\t\t\tid: PropTypes.string.isRequired,\n\t\t}).isRequired\n\t}\n\n\t/**\n\t * Navigate to the Add bike page with the edit bike title.\n\t * This method is used over the commented out line below because successive touches of a bike item\n\t * would not add the data because data is only received in process in the componentWillMount function.\n\t * So adding the 'key' property to navigate makes it see that the new page is unique.\n\t */\n\tnavigate = () => {\n\t\t// <TouchableOpacity onPress={() => this.props.navigation.navigate('AddBike', {data: this.props.data, title: 'Edit Bike'})}>\n\t\tthis.props.navigation.navigate({\n\t\t\trouteName: 'AddBike',\n\t\t\tparams: {\n\t\t\t\tdata: this.props.data, \n\t\t\t\ttitle: 'Edit Bike'\n\t\t\t},\n\t\t\tkey: 'AddBike' + TimeUtil.getDateTime()\n\t\t});\n\t}\n\n\t/**\n\t * Renders the bike item.\n\t */\n\trender() {\n\t\t// return(\n\t\t// \t<TouchableOpacity onPress={() => this.navigate()}>\n\t\t// \t\t<View style={styles.rowContainer}>\n\t\t// \t\t\t<View style={{flex:1, flexDirection:'row', justifyContent:'space-between'}}>\n  //                       {/* Thumbnail */}\n  //                       <View style={{flex: 1, flexDirection:'row', justifyContent:'flex-start'}}>\n  //                               <Image source={{uri: this.props.data.thumbnail[0]}}\n  //                                      style={styles.thumbnail}\n  //                                      resizeMode=\"contain\" />\n  //                       </View>\n                      \n  //                       {/* Add more lines and format based on text that is needed */}\n  //                       <View style={styles.rowText}>\n\n  //                           <Text style={styles.name} numberOfLines={1} ellipsizeMode ={'tail'}>\n  //                               {this.props.data.name}\n  //                           </Text>\n  //                           <Text style={styles.other} numberOfLines={1} ellipsizeMode ={'tail'}>\n  //                               Model: {this.props.data.model}\n  //                           </Text>\n  //                           <Text style={styles.other} numberOfLines={1} ellipsizeMode ={'tail'}>\n  //                               Colour: {this.props.data.colour.join(', ')}\n  //                           </Text>\n  //                           <Text style={styles.other} numberOfLines={1} ellipsizeMode ={'tail'}>\n  //                               Serial Number: {this.props.data.serial_number}\n  //                           </Text>\n  //                           <Text style={styles.other} numberOfLines={2} ellipsizeMode ={'tail'}>\n  //                               Notable Features: {this.props.data.notable_features}\n  //                           </Text>\n\n  //                       </View>\n  //                   </View>\n\t\t// \t\t</View>\n\t\t// \t</TouchableOpacity>\n\t\t// );\n\t}\n}\n\nexport default BikeItem;\n\nconst styles = StyleSheet.create({\n\trowContainer: {\n\t\tflexDirection: 'row',\n\t\tbackgroundColor: '#FFF',\n\t\theight: 140,\n\t\tpadding: 10,\n\t\tmarginRight: 10,\n\t\tmarginLeft: 10,\n\t\tmarginTop: 10,\n\t\tborderRadius: 4,\n\t\tshadowOffset:{  width: 1,  height: 1,  },\n\t\tshadowColor: '#CCC',\n\t\tshadowOpacity: 1.0,\n\t\tshadowRadius: 1,\n\t},\n\tname: {\n\t\tpaddingLeft: 10,\n\t\tpaddingTop: 5,\n\t\tfontSize: 16,\n\t\tfontWeight: 'bold',\n\t\tcolor: '#777',\n\t},\n\tother: {\n\t\tpaddingLeft: 10,\n\t\tmarginTop: 5,\n\t\tfontSize: 12,\n\t\tcolor: '#777'\n\t},\n\tthumbnail: {\n\t\tflex: 1,\n\t\theight: undefined,\n\t\twidth: undefined\n\t},\n\trowText: {\n\t\tflex: 1,\n\t\tflexDirection: 'column',\n        alignItems: 'flex-start'\n\t},\n    topRow: { \n        flexDirection: 'row',\n    },\n    nameImageCol: {\n        flex:1, \n        flexDirection:'column', \n        width:140,\n    },\n});\n",
    "static": true,
    "longname": "/Users/seanr/Downloads/temp/src/components/views/helpers/bikeitem.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 553,
    "kind": "variable",
    "name": "styles",
    "memberof": "src/components/views/helpers/bikeitem.js",
    "static": true,
    "longname": "src/components/views/helpers/bikeitem.js~styles",
    "access": "public",
    "export": false,
    "importPath": "PedalPatrol/src/components/views/helpers/bikeitem.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 89,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 554,
    "kind": "class",
    "name": "BikeItem",
    "memberof": "src/components/views/helpers/bikeitem.js",
    "static": true,
    "longname": "src/components/views/helpers/bikeitem.js~BikeItem",
    "access": "public",
    "export": true,
    "importPath": "PedalPatrol/src/components/views/helpers/bikeitem.js",
    "importStyle": "BikeItem",
    "description": "Class to help the displaying of bike items on the bike view page",
    "lineNumber": 11,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 555,
    "kind": "member",
    "name": "propTypes",
    "memberof": "src/components/views/helpers/bikeitem.js~BikeItem",
    "static": true,
    "longname": "src/components/views/helpers/bikeitem.js~BikeItem.propTypes",
    "access": "public",
    "description": "Helper prop types.",
    "lineNumber": 15,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 556,
    "kind": "member",
    "name": "navigate",
    "memberof": "src/components/views/helpers/bikeitem.js~BikeItem",
    "static": false,
    "longname": "src/components/views/helpers/bikeitem.js~BikeItem#navigate",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 557,
    "kind": "method",
    "name": "render",
    "memberof": "src/components/views/helpers/bikeitem.js~BikeItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/views/helpers/bikeitem.js~BikeItem#render",
    "access": "public",
    "description": "Renders the bike item.",
    "lineNumber": 48,
    "params": [],
    "return": null
  },
  {
    "__docId__": 558,
    "kind": "file",
    "name": "src/components/views/helpers/drawerheader.js",
    "content": "import React, { Component } from 'react';\nimport { View, Text, Image, StyleSheet, TouchableOpacity } from 'react-native';\nimport PropTypes from 'prop-types';\n\nimport { colours } from '../stylesheets/base-styles';\n\n/**\n * Class to display the drawer header.\n * @extends Component\n */\nclass DrawerHeader extends Component {\n\t/**\n\t * Creates an instance of the DrawerHeader.\n\t * @constructor\n\t */\n\tconstructor (props) {\n\t\tsuper(props);\n\t}\n\n\t/**\n\t * Helper prop types.\n\t */\n\tstatic propTypes = {\n\t\timage: PropTypes.string\n\t}\n\n\t/**\n\t * Renders the drawer header.\n\t */\n\trender() {\n\t\t// return (\n\t\t// \t<View style={styles.container} >\n\t\t// \t\t<Image style={styles.image} source={{uri: this.props.image, flex:1, width: 70, height: 70, left: 40}}/>\n\t\t// \t\t<Text style={styles.text}>\n\t\t// \t\t\t{this.props.name}\n\t\t// \t\t</Text>\n\t\t// \t</View>\n\t\t// );\n\t}\n\n}\n\nexport default DrawerHeader;\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tflexDirection: 'row',\n\t\tbackgroundColor: colours.ppGreen,\n\t\tpaddingVertical: 28,\n\t\tpaddingLeft: 17,\n\t\theight: 100,\n\t\talignItems: 'center',\n\t},\n\timage: {\n\t\tborderRadius: 35\n\t},\n\ttext: { \n\t\tcolor: '#FFF', \n\t\tpaddingLeft: 15, \n\t\tfontSize: 24\n\t}\n});",
    "static": true,
    "longname": "/Users/seanr/Downloads/temp/src/components/views/helpers/drawerheader.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 559,
    "kind": "variable",
    "name": "styles",
    "memberof": "src/components/views/helpers/drawerheader.js",
    "static": true,
    "longname": "src/components/views/helpers/drawerheader.js~styles",
    "access": "public",
    "export": false,
    "importPath": "PedalPatrol/src/components/views/helpers/drawerheader.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 560,
    "kind": "class",
    "name": "DrawerHeader",
    "memberof": "src/components/views/helpers/drawerheader.js",
    "static": true,
    "longname": "src/components/views/helpers/drawerheader.js~DrawerHeader",
    "access": "public",
    "export": true,
    "importPath": "PedalPatrol/src/components/views/helpers/drawerheader.js",
    "importStyle": "DrawerHeader",
    "description": "Class to display the drawer header.",
    "lineNumber": 11,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 561,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/components/views/helpers/drawerheader.js~DrawerHeader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/views/helpers/drawerheader.js~DrawerHeader#constructor",
    "access": "public",
    "description": "Creates an instance of the DrawerHeader.",
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ]
  },
  {
    "__docId__": 562,
    "kind": "member",
    "name": "propTypes",
    "memberof": "src/components/views/helpers/drawerheader.js~DrawerHeader",
    "static": true,
    "longname": "src/components/views/helpers/drawerheader.js~DrawerHeader.propTypes",
    "access": "public",
    "description": "Helper prop types.",
    "lineNumber": 23,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 563,
    "kind": "method",
    "name": "render",
    "memberof": "src/components/views/helpers/drawerheader.js~DrawerHeader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/views/helpers/drawerheader.js~DrawerHeader#render",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 564,
    "kind": "file",
    "name": "src/components/views/helpers/handleback.js",
    "content": "import React, { Component } from \"react\";\nimport { withNavigation } from \"react-navigation\";\nimport { BackHandler } from \"react-native\";\n\n/**\n * Class to handle the back button on Android\n * @extends Component\n */\nclass HandleBack extends Component {\n\t/**\n\t * Creates an instance of the HandleBack component.\n\t * @constructor\n\t */\n\tconstructor(props) {\n\t\tsuper(props);\n\t\t\tthis.didFocus = props.navigation.addListener(\"didFocus\", payload =>\n\t\t\t\tBackHandler.addEventListener(\"hardwareBackPress\", this.onBack),\n\t\t\t);\n\t\t}\n\n\t/**\n\t * Component mounted.\n\t */\n\tcomponentDidMount() {\n\t\tthis.willBlur = this.props.navigation.addListener(\"willBlur\", payload =>\n\t\t\tBackHandler.removeEventListener(\"hardwareBackPress\", this.onBack),\n\t\t);\n\t}\n\n\t/**\n\t * Trigger the onBack function.\n\t */\n\tonBack = () => {\n\t\treturn this.props.onBack();\n\t};\n\n\t/**\n\t * Component is about to unmount.\n\t */\n\tcomponentWillUnmount() {\n\t\tthis.didFocus.remove();\n\t\tthis.willBlur.remove();\n\t\tBackHandler.removeEventListener(\"hardwareBackPress\", this.onBack);\n\t}\n\n\t/**\n\t * Renders the children components\n\t */\n\trender() {\n\t\treturn this.props.children;\n\t}\n}\n\nexport default withNavigation(HandleBack);",
    "static": true,
    "longname": "/Users/seanr/Downloads/temp/src/components/views/helpers/handleback.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 565,
    "kind": "class",
    "name": "HandleBack",
    "memberof": "src/components/views/helpers/handleback.js",
    "static": true,
    "longname": "src/components/views/helpers/handleback.js~HandleBack",
    "access": "public",
    "export": false,
    "importPath": "PedalPatrol/src/components/views/helpers/handleback.js",
    "importStyle": null,
    "description": "Class to handle the back button on Android",
    "lineNumber": 9,
    "interface": false,
    "extends": [
      "*"
    ],
    "ignore": true
  },
  {
    "__docId__": 566,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/components/views/helpers/handleback.js~HandleBack",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/views/helpers/handleback.js~HandleBack#constructor",
    "access": "public",
    "description": "Creates an instance of the HandleBack component.",
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ]
  },
  {
    "__docId__": 567,
    "kind": "member",
    "name": "didFocus",
    "memberof": "src/components/views/helpers/handleback.js~HandleBack",
    "static": false,
    "longname": "src/components/views/helpers/handleback.js~HandleBack#didFocus",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 568,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "src/components/views/helpers/handleback.js~HandleBack",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/views/helpers/handleback.js~HandleBack#componentDidMount",
    "access": "public",
    "description": "Component mounted.",
    "lineNumber": 24,
    "params": [],
    "return": null
  },
  {
    "__docId__": 569,
    "kind": "member",
    "name": "willBlur",
    "memberof": "src/components/views/helpers/handleback.js~HandleBack",
    "static": false,
    "longname": "src/components/views/helpers/handleback.js~HandleBack#willBlur",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 570,
    "kind": "member",
    "name": "onBack",
    "memberof": "src/components/views/helpers/handleback.js~HandleBack",
    "static": false,
    "longname": "src/components/views/helpers/handleback.js~HandleBack#onBack",
    "access": "public",
    "description": "Trigger the onBack function.",
    "lineNumber": 33,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 571,
    "kind": "method",
    "name": "componentWillUnmount",
    "memberof": "src/components/views/helpers/handleback.js~HandleBack",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/views/helpers/handleback.js~HandleBack#componentWillUnmount",
    "access": "public",
    "description": "Component is about to unmount.",
    "lineNumber": 40,
    "params": [],
    "return": null
  },
  {
    "__docId__": 572,
    "kind": "method",
    "name": "render",
    "memberof": "src/components/views/helpers/handleback.js~HandleBack",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/views/helpers/handleback.js~HandleBack#render",
    "access": "public",
    "description": "Renders the children components",
    "lineNumber": 49,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 573,
    "kind": "file",
    "name": "src/components/views/helpers/imagecarousel.js",
    "content": "import React, { Component } from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport Carousel, { Pagination } from 'react-native-snap-carousel';\nimport PropTypes from 'prop-types';\n\nimport { sliderWidth, itemWidth } from './imagehelpers/styles/SliderEntry.style';\nimport SliderEntry from './imagehelpers/components/SliderEntry';\nimport stylesC, { colors } from './imagehelpers/styles/index.style';\nimport { colours } from '../stylesheets/base-styles';\n\nconst SLIDER_1_FIRST_ITEM = 0;\n\n/**\n * Class to display the image carousel and the page dots underneath.\n */\nclass ImageCarousel extends Component {\n\tstate = {\n\t\tslider1ActiveSlide: SLIDER_1_FIRST_ITEM,\n\t}\n\n\t/**\n\t * Helper prop types.\n\t */\n\tstatic propTypes = {\n\t\tloading: PropTypes.bool,\n\t\tselected: PropTypes.func.isRequired,\n\t\tphotos: PropTypes.array.isRequired\t\n\t}\n\n\t/**\n\t * Render an image.\n\t *\n\t * @param {Object, Number} item - A list item, index - The index of the item\n\t */\n\t_renderImage = ({item, index}) => {\n\t\t// return (\n\t\t// \t<SliderEntry\n\t\t// \t  data={item}\n\t\t// \t  id={index}\n\t\t// \t  parallax={false}\n\t\t// \t  loading={this.props.loading ? this.props.loading : false}\n\t\t// \t  selectPhoto={this.props.selected}\n\t\t// \t/>\n\t\t// );\n\t}\n\n\t/**\n\t * Renders the image carousel.\n\t */\n\trender() {\n\t\tconst { slider1ActiveSlide } = this.state;\n\n\t\t// return (\n\t\t// \t<View style={stylesC.exampleContainer}>\n\t\t// \t\t<Carousel\n\t\t// \t\t  ref={c => this._slider1Ref = c}\n\t\t// \t\t  data={this.props.photos}\n\t\t// \t\t  renderItem={this._renderImage}\n\t\t// \t\t  sliderWidth={sliderWidth}\n\t\t// \t\t  itemWidth={itemWidth}\n\t\t// \t\t  hasParallaxImages={true}\n\t\t// \t\t  firstItem={SLIDER_1_FIRST_ITEM}\n\t\t// \t\t  inactiveSlideScale={0.94}\n\t\t// \t\t  inactiveSlideOpacity={0.7}\n\t\t// \t\t  // inactiveSlideShift={20}\n\t\t// \t\t  removeClippedSubviews={false} \n\t\t// \t\t  containerCustomStyle={stylesC.slider}\n\t\t// \t\t  contentContainerCustomStyle={stylesC.sliderContentContainer}\n\t\t// \t\t  loop={false}\n\t\t// \t\t  loopClonesPerSide={0}\n\t\t// \t\t  autoplay={false}\n\t\t// \t\t  onSnapToItem={(index) => this.setState({ slider1ActiveSlide: index }) }\n\t\t// \t\t/>\n\t\t// \t\t<Pagination\n\t\t// \t\t  dotsLength={this.props.photos.length}\n\t\t// \t\t  activeDotIndex={slider1ActiveSlide}\n\t\t// \t\t  containerStyle={stylesC.paginationContainer}\n\t\t// \t\t  dotColor={colours.ppGreen}\n\t\t// \t\t  dotStyle={stylesC.paginationDot}\n\t\t// \t\t  inactiveDotColor={colors.black}\n\t\t// \t\t  inactiveDotOpacity={0.4}\n\t\t// \t\t  inactiveDotScale={0.6}\n\t\t// \t\t  carouselRef={this._slider1Ref}\n\t\t// \t\t  tappableDots={!!this._slider1Ref}\n\t\t// \t\t/>\n\t\t// \t</View>\n\t\t// );\n\t}\n}\n\nexport default ImageCarousel;",
    "static": true,
    "longname": "/Users/seanr/Downloads/temp/src/components/views/helpers/imagecarousel.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 574,
    "kind": "variable",
    "name": "SLIDER_1_FIRST_ITEM",
    "memberof": "src/components/views/helpers/imagecarousel.js",
    "static": true,
    "longname": "src/components/views/helpers/imagecarousel.js~SLIDER_1_FIRST_ITEM",
    "access": "public",
    "export": false,
    "importPath": "PedalPatrol/src/components/views/helpers/imagecarousel.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 575,
    "kind": "class",
    "name": "ImageCarousel",
    "memberof": "src/components/views/helpers/imagecarousel.js",
    "static": true,
    "longname": "src/components/views/helpers/imagecarousel.js~ImageCarousel",
    "access": "public",
    "export": true,
    "importPath": "PedalPatrol/src/components/views/helpers/imagecarousel.js",
    "importStyle": "ImageCarousel",
    "description": "Class to display the image carousel and the page dots underneath.",
    "lineNumber": 16,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 576,
    "kind": "member",
    "name": "state",
    "memberof": "src/components/views/helpers/imagecarousel.js~ImageCarousel",
    "static": false,
    "longname": "src/components/views/helpers/imagecarousel.js~ImageCarousel#state",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 577,
    "kind": "member",
    "name": "propTypes",
    "memberof": "src/components/views/helpers/imagecarousel.js~ImageCarousel",
    "static": true,
    "longname": "src/components/views/helpers/imagecarousel.js~ImageCarousel.propTypes",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 578,
    "kind": "member",
    "name": "_renderImage",
    "memberof": "src/components/views/helpers/imagecarousel.js~ImageCarousel",
    "static": false,
    "longname": "src/components/views/helpers/imagecarousel.js~ImageCarousel#_renderImage",
    "access": "private",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 579,
    "kind": "method",
    "name": "render",
    "memberof": "src/components/views/helpers/imagecarousel.js~ImageCarousel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/views/helpers/imagecarousel.js~ImageCarousel#render",
    "access": "public",
    "description": "Renders the image carousel.",
    "lineNumber": 50,
    "params": [],
    "return": null
  },
  {
    "__docId__": 580,
    "kind": "file",
    "name": "src/components/views/helpers/loginbutton.js",
    "content": "import React, { Component } from 'react';\nimport { Text, View, StyleSheet, Platform, TouchableHighlight, TouchableNativeFeedback } from 'react-native';\nimport PropTypes from 'prop-types';\n\nimport { colours } from '../stylesheets/base-styles';\n\n/**\n * Class to add a login button helper for the login and signup views\n */\nclass LoginButton extends Component {\n\n\t/**\n\t * Helper prop types.\n\t */\n\tstatic propTypes = {\n\t\tonPress: PropTypes.func.isRequired,\n\t\ttext: PropTypes.string.isRequired\n\t}\n\n\t/**\n\t * Renders the button content.\n\t */\n\t_renderContent() {\n\t\t// return(\n\t\t// \t<View >\n\t\t// \t\t<Text style={styles.text}>{this.props.text}</Text>\n\t\t// \t</View>\n\t\t// );\n\t}\n\n\t/**\n\t * Renders the login button.\n\t */ \n\trender() {\n\t\tif (Platform.OS === 'android') {\n\t\t\t// return(\n\t\t\t// \t<TouchableNativeFeedback\n\t\t\t// \t\tstyle={styles.content}\n\t\t\t// \t\tonPress={this.props.onPress}>\n\t\t\t// \t\t{this._renderContent()}\n\t\t\t// \t</TouchableNativeFeedback>\n\t\t //  \t);\n\t\t} else if (Platform.OS === 'ios') {\n\t\t\t// return(\n\t\t\t// \t<TouchableHighlight\n\t\t\t// \t\tstyle={styles.content}\n\t\t\t// \t\tonPress={this.props.onPress}>\n\t\t\t// \t\t{this._renderContent()}\n\t\t\t// \t</TouchableHighlight>\n\t\t\t// );\n\t\t}\n\t}\n}\n\nexport default LoginButton;\n\nconst styles = StyleSheet.create({\n\ttext: {\n\t\tcolor: 'black',\n\t\tfontSize: 14,\n\t\tfontWeight:'bold',\n\t},\n\tcontent: {\n\t\theight: 45,\n\t\tborderRadius: 30,\n\t\tbackgroundColor: colours.ppGreen,\n\t\talignItems:'center',\n\t\tjustifyContent:'center',\n\t\toverflow: 'hidden'\n\t},\n});",
    "static": true,
    "longname": "/Users/seanr/Downloads/temp/src/components/views/helpers/loginbutton.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 581,
    "kind": "variable",
    "name": "styles",
    "memberof": "src/components/views/helpers/loginbutton.js",
    "static": true,
    "longname": "src/components/views/helpers/loginbutton.js~styles",
    "access": "public",
    "export": false,
    "importPath": "PedalPatrol/src/components/views/helpers/loginbutton.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 582,
    "kind": "class",
    "name": "LoginButton",
    "memberof": "src/components/views/helpers/loginbutton.js",
    "static": true,
    "longname": "src/components/views/helpers/loginbutton.js~LoginButton",
    "access": "public",
    "export": true,
    "importPath": "PedalPatrol/src/components/views/helpers/loginbutton.js",
    "importStyle": "LoginButton",
    "description": "Class to add a login button helper for the login and signup views",
    "lineNumber": 10,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 583,
    "kind": "member",
    "name": "propTypes",
    "memberof": "src/components/views/helpers/loginbutton.js~LoginButton",
    "static": true,
    "longname": "src/components/views/helpers/loginbutton.js~LoginButton.propTypes",
    "access": "public",
    "description": "Helper prop types.",
    "lineNumber": 15,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 584,
    "kind": "method",
    "name": "_renderContent",
    "memberof": "src/components/views/helpers/loginbutton.js~LoginButton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/views/helpers/loginbutton.js~LoginButton#_renderContent",
    "access": "private",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 585,
    "kind": "method",
    "name": "render",
    "memberof": "src/components/views/helpers/loginbutton.js~LoginButton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/views/helpers/loginbutton.js~LoginButton#render",
    "access": "public",
    "description": "Renders the login button.",
    "lineNumber": 34,
    "params": [],
    "return": null
  },
  {
    "__docId__": 586,
    "kind": "file",
    "name": "src/components/views/helpers/notificationbikeitem.js",
    "content": "import React, { Component } from 'react';\nimport { StyleSheet, TouchableOpacity, Text, Image, View, TouchableHighlight } from 'react-native';\nimport { Icon } from 'react-native-elements';\nimport PropTypes from 'prop-types';\n\nimport { colours } from '../stylesheets/base-styles';\n\nimport TimeUtil from '../../../util/timeutility';\n\nconst TYPE_STOLEN_HOME = 'Home';\nconst TYPE_FOUND_ALERTS = 'Alerts';\n\n/**\n * Class to help the displaying of notification items on the home view page.\n * @extends Component\n */\nclass NotificationBikeItem extends Component {\n\n\t/**\n\t * Helper prop types.\n\t */\n\tstatic propTypes = {\n\t\tfrom: PropTypes.oneOf([TYPE_STOLEN_HOME, TYPE_FOUND_ALERTS]).isRequired,\n\t\tdata: PropTypes.shape({\n\t\t\tbrand: PropTypes.string.isRequired,\n\t\t\tmodel: PropTypes.string.isRequired,\n\t\t\tthumbnail: PropTypes.array.isRequired,\n\t\t\tdatetime: PropTypes.string.isRequired,\n\t\t\taddress: PropTypes.string,\n\t\t\ttimeago: PropTypes.string.isRequired,\n\t\t\tnotable_features: PropTypes.string,\n\t\t\tdescription: PropTypes.string,\n\t\t\tid: PropTypes.string.isRequired,\n\t\t\tbookmarked: PropTypes.string.bool,\n\t\t}).isRequired\n\t}\n\n\t/**\n\t * Component is about to mount. Has not mounted yet\n\t */\n\tcomponentWillMount = () => {\n\t\tthis.setState({\n\t\t\tfrom: this.props.from,\n\t\t});\n\t}\n\n\t/**\n\t * Navigate to a page with a title.\n\t * This method is used over the commented out line below because successive touches of a bike item\n\t * would not add the data because data is only received in process in the componentWillMount function.\n\t * So adding the 'key' property to navigate makes it see that the new page is unique.\n\t *\n\t * @param {string} screen - The route to navigate to. See navigation.js stacks and screens\n\t * @param {Boolean} shouldRenavigate - If the component should call the navigation function again or not because parameters don't pass correctly\n\t */\n\tnavigate = (screen, shouldRenavigate=false) => {\n\t\t// <TouchableOpacity onPress={() => this.props.navigation.navigate('BikeDetails', {data: this.props.data})}>\n\t\tthis.props.navigation.navigate({\n\t\t\trouteName: screen,\n\t\t\tparams: {\n\t\t\t\trawData: this.props.data, // Report found takes in rawData but other pages in\n\t\t\t\tdata: this.props.data,\n\t\t\t\tfrom: this.props.from,\n\t\t\t\tfound: this.props.from === 'Alerts'\n\t\t\t},\n\t\t\tkey: screen + TimeUtil.getDateTime()\n\t\t});\n\n\t\t/*\n\t\t * The purpose of this is to trigger a re-navigate because for some reason, the Map tab does not receive the parameters\n\t\t * set in the first navigate. It only works on subsequent navigations so we just have a small delay and trigger the navigate\n\t\t * again. This is a hacky way to do it. A better solution would be to use Redux to save the state.\n\t\t * React Navigation has a terrible architecture which really doesn't allow for different things like this to happen.\n\t\t */\n\t\tif (shouldRenavigate) {\n\t\t\tsetTimeout(() => {this.navigate(screen, false)}, 50);\n\t\t}\n\t}\n \n \t/**\n \t * Renders the notification item card.\n \t */\n\trender() {\n\t\t// return(\n\t\t// \t<TouchableOpacity onPress={() => this.navigate('BikeDetails', false)}>\n\t\t// \t\t<View style={styles.rowContainer}>\n\t\t// \t\t  \t{/* Everything is put as columns from the top row */}\n\t\t// \t\t\t<View style={styles.topRow}>\n\t\t\t\t\t\t\n\t\t// \t\t\t\t{/* First column is model, image, datetime and address */}\n\t\t// \t\t\t\t<View style={{flex: 1, alignItems:'flex-start'}}>\n\t\t// \t\t\t\t\t<View style={styles.nameImageCol}>\n\t\t\t\t\t\t\t\t\n\t\t// \t\t\t\t\t\t{/* Model */}\n\t\t// \t\t\t\t\t\t<Text style={styles.model} numberOfLines={1} ellipsizeMode={'tail'}>\n\t\t// \t\t\t\t\t\t\t{this.props.data.brand + \" \" + this.props.data.model}\n\t\t// \t\t\t\t\t\t</Text>\n\t\t\t\t\t\t\t\t\n\t\t// \t\t\t\t\t\t<View style={{flex:1, flexDirection:'row', justifyContent:'space-between'}}>\n\t\t// \t\t\t\t\t\t\t{/* Thumbnail */}\n\t\t// \t\t\t\t\t\t\t<View style={{flex: 1, flexDirection:'row', justifyContent:'flex-start'}}>\n\t\t// \t\t\t\t\t\t\t\t\t<Image source={{uri: this.props.data.thumbnail[0]}}\n\t\t// \t\t\t\t\t\t\t\t\t\t   style={styles.thumbnail}\n\t\t// \t\t\t\t\t\t\t\t\t\t   resizeMode=\"contain\" />\n\t\t// \t\t\t\t\t\t\t</View>\n\t\t// \t\t\t\t\t\t</View>\n\t\t\t\t\t\t\t\t\n\t\t// \t\t\t\t\t\t{/* Datetime & Address (bottom left) */}\n\t\t// \t\t\t\t\t\t<Text style={styles.datetime} numberOfLines={1} ellipsizeMode={'tail'}>\n\t\t// \t\t\t\t\t\t\t{this.props.data.datetime}\n\t\t// \t\t\t\t\t\t</Text>\n\t\t// \t\t\t\t\t\t<Text style={styles.address} numberOfLines={1} ellipsizeMode={'tail'}>\n\t\t// \t\t\t\t\t\t\t{this.props.data.address}\n\t\t// \t\t\t\t\t\t</Text>\n\n\t\t// \t\t\t\t\t</View>\n\t\t// \t\t\t\t</View>\n\n\t\t// \t\t\t\t{/* Second column is hoursago, notable features, description and icons */}\n\t\t// \t\t\t\t<View style={{flex: 1}}>\n\t\t// \t\t\t\t\t<View style={{flex: 1, flexDirection:'column', alignItems:'flex-end'}}>\n\t\t\t\t\t\t\t\t\n\t\t// \t\t\t\t\t\t{/* Time ago */}\n\t\t// \t\t\t\t\t\t<Text style={styles.time} numberOfLines={1} ellipsizeMode={'tail'}>\n\t\t// \t\t\t\t\t\t\t{this.props.data.timeago}\n\t\t// \t\t\t\t\t\t</Text>\n\n\t\t// \t\t\t\t\t\t{/* Notable features and description */}\n\t\t// \t\t\t\t\t\t<View style={{flex: 5, flexDirection:'column', alignItems:'flex-start', justifyContent:'flex-start'}}>\n\t\t// \t\t\t\t\t\t\t<Text style={styles.other} numberOfLines={5} ellipsizeMode={'tail'}>\n\t\t// \t\t\t\t\t\t\t\t{this.props.data.description}\n\t\t// \t\t\t\t\t\t\t</Text>\n\t\t// \t\t\t\t\t\t\t<Text style={styles.other} numberOfLines={2} ellipsizeMode={'tail'}>\n\t\t// \t\t\t\t\t\t\t\tNotable Features: {this.props.data.notable_features}\n\t\t// \t\t\t\t\t\t\t</Text>\n\t\t// \t\t\t\t\t\t</View>\n\n\t\t// \t\t\t\t\t\t{/* Bottom icons only show if stolen bikes are shown */}\n\t\t\t\t\t\t\t\t\t\n\t\t// \t\t\t\t\t\t\t<View style={{flex: 1, flexDirection:'row', alignItems:'center', justiftContent:'space-between'}}>\n\t\t// \t\t\t\t\t\t\t\t{/* Bookmark button */}\n\t\t// \t\t\t\t\t\t\t\t{ \n\t\t// \t\t\t\t\t\t\t\t\tthis.state.from === TYPE_STOLEN_HOME &&\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t// \t\t\t\t\t\t\t\t\t<TouchableOpacity style={styles.icon} onPress={() => {this.props.setBookmark(this.props.data.id)}} accessibilityLabel=\"Bookmark\">\n\t\t// \t\t\t\t\t\t\t\t\t\t{ this.props.bookmarked ? \n\t\t// \t\t\t\t\t\t\t\t\t\t\t(<Icon name=\"bookmark\" type=\"MaterialIcons\" size={24} color={colours.ppGreen} />)\n\t\t// \t\t\t\t\t\t\t\t\t\t\t:\n\t\t// \t\t\t\t\t\t\t\t\t\t\t(<Icon name=\"bookmark-border\" type=\"MaterialIcons\" size={24} color={colours.ppGreen} />)\n\t\t// \t\t\t\t\t\t\t\t\t\t}\n\t\t// \t\t\t\t\t\t\t\t\t</TouchableOpacity>\n\t\t// \t\t\t\t\t\t\t\t}\n\t\t// \t\t\t\t\t\t\t\t{/* Map pin */}\n\t\t// \t\t\t\t\t\t\t\t<TouchableOpacity style={styles.icon} accessibilityLabel=\"Pin\" onPress={() => this.navigate('Map', true)}>\n\t\t// \t\t\t\t\t\t\t\t\t<Icon name=\"pin-drop\" type=\"MaterialIcons\" size={24} color={colours.ppGreen} />\n\t\t// \t\t\t\t\t\t\t\t</TouchableOpacity>\n\n\t\t// \t\t\t\t\t\t\t\t{/* Report Found */}\n\t\t// \t\t\t\t\t\t\t\t{\n\t\t// \t\t\t\t\t\t\t\t\tthis.state.from === TYPE_STOLEN_HOME &&\n\t\t// \t\t\t\t\t\t\t\t\t<TouchableOpacity style={styles.icon} accessibilityLabel=\"Report Found\" onPress={() => this.navigate('ReportFound')}>\n\t\t// \t\t\t\t\t\t\t\t\t\t<Icon name=\"comment\" type=\"MaterialIcons\" size={24} color={colours.ppGreen} />\n\t\t// \t\t\t\t\t\t\t\t\t</TouchableOpacity>\n\t\t// \t\t\t\t\t\t\t\t}\n\t\t// \t\t\t\t\t\t\t</View>\n\n\t\t// \t\t\t\t\t</View>\n\t\t// \t\t\t\t</View>\n\n\t\t// \t\t\t</View>\n\t\t// \t\t</View>\n\t\t// \t</TouchableOpacity>\n\t\t// );\n\t}\n}\n\nexport default NotificationBikeItem;\n\nconst styles = StyleSheet.create({\n\trowContainer: {\n\t\tflexDirection: 'row',\n\t\tbackgroundColor: '#FFF',\n\t\theight: 200,\n\t\tpadding: 10,\n\t\tmarginRight: 10,\n\t\tmarginLeft: 10,\n\t\tmarginTop: 10,\n\t\tborderRadius: 4,\n\t\tshadowOffset:{  width: 1,  height: 1,  },\n\t\tshadowColor: '#CCC',\n\t\tshadowOpacity: 1.0,\n\t\tshadowRadius: 1\n\t},\n\tdatetime: {\n\t\tpaddingLeft: 5,\n\t\tpaddingTop: 5,\n\t\tfontSize: 12,\n\t\tcolor: '#777'\n\t},\n\taddress: {\n\t\tpaddingLeft: 5,\n\t\tpaddingTop: 5,\n\t\tfontSize: 12,\n\t\tcolor: '#777'\n\t},\n\ttime: {\n\t\tpaddingTop: 7,\n\t\tpaddingLeft: 10,\n\t\tpaddingRight: 10,\n\t\tmarginRight: 15,\n\t\tfontSize: 16,\n\t\tfontWeight: 'bold',\n\t\tcolor: '#FFF',\n\t\tflex: 1,\n\t\tborderRadius: 15, \n\t\tbackgroundColor: colours.ppGreen, \n\t\toverflow: 'hidden'\n\t},\n\tother: {\n\t\tpaddingLeft: 10,\n\t\tmarginTop: 5,\n\t\tfontSize: 12,\n\t\tcolor: '#777'\n\t},\n\tmodel: {\n\t\tpaddingLeft: 5,\n\t\tpaddingTop: 5,\n\t\tfontSize: 16,\n\t\tfontWeight: 'bold',\n\t\tcolor: '#777',\n\t},\n\towner: {\n\t\tpaddingLeft: 10,\n\t\tmarginTop: 5,\n\t\tfontSize: 14,\n\t\tcolor: '#777',\n\t\tflex:1\n\t},\n\tdescription: {\n\t\tpaddingLeft: 10,\n\t\tmarginTop: 5,\n\t\tfontSize: 14,\n\t\tcolor: '#777',\n\t\t\n\t},\n\tthumbnail: {\n\t\tflex: 1,\n\t\theight: undefined,\n\t\twidth: undefined\n\t},\n\trowText: {\n\t\tflex: 1,\n\t\tflexDirection: 'column',\n\t},\n\ttopRow: {\n\t\tflex: 1,\n\t\tjustifyContent: 'space-between', \n\t\tflexDirection: 'row',\n\t},\n\tnameImageCol: {\n\t\tflex: 1, \n\t\tflexDirection: 'column', \n\t\twidth: undefined,\n\t},\n\ttimeOtherCol: {\n\t\tflex: 1, \n\t\tflexDirection: 'column', \n\t},\n\ticon: {\n\t\tmarginLeft: 20,\n\t\tmarginRight: 15,\n\t\tmarginTop: 5,\n\t\talignItems: 'flex-start'\n\t}\n});\n",
    "static": true,
    "longname": "/Users/seanr/Downloads/temp/src/components/views/helpers/notificationbikeitem.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 587,
    "kind": "variable",
    "name": "TYPE_STOLEN_HOME",
    "memberof": "src/components/views/helpers/notificationbikeitem.js",
    "static": true,
    "longname": "src/components/views/helpers/notificationbikeitem.js~TYPE_STOLEN_HOME",
    "access": "public",
    "export": false,
    "importPath": "PedalPatrol/src/components/views/helpers/notificationbikeitem.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 588,
    "kind": "variable",
    "name": "TYPE_FOUND_ALERTS",
    "memberof": "src/components/views/helpers/notificationbikeitem.js",
    "static": true,
    "longname": "src/components/views/helpers/notificationbikeitem.js~TYPE_FOUND_ALERTS",
    "access": "public",
    "export": false,
    "importPath": "PedalPatrol/src/components/views/helpers/notificationbikeitem.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 589,
    "kind": "variable",
    "name": "styles",
    "memberof": "src/components/views/helpers/notificationbikeitem.js",
    "static": true,
    "longname": "src/components/views/helpers/notificationbikeitem.js~styles",
    "access": "public",
    "export": false,
    "importPath": "PedalPatrol/src/components/views/helpers/notificationbikeitem.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 179,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 590,
    "kind": "class",
    "name": "NotificationBikeItem",
    "memberof": "src/components/views/helpers/notificationbikeitem.js",
    "static": true,
    "longname": "src/components/views/helpers/notificationbikeitem.js~NotificationBikeItem",
    "access": "public",
    "export": true,
    "importPath": "PedalPatrol/src/components/views/helpers/notificationbikeitem.js",
    "importStyle": "NotificationBikeItem",
    "description": "Class to help the displaying of notification items on the home view page.",
    "lineNumber": 17,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 591,
    "kind": "member",
    "name": "propTypes",
    "memberof": "src/components/views/helpers/notificationbikeitem.js~NotificationBikeItem",
    "static": true,
    "longname": "src/components/views/helpers/notificationbikeitem.js~NotificationBikeItem.propTypes",
    "access": "public",
    "description": "Helper prop types.",
    "lineNumber": 22,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 592,
    "kind": "member",
    "name": "componentWillMount",
    "memberof": "src/components/views/helpers/notificationbikeitem.js~NotificationBikeItem",
    "static": false,
    "longname": "src/components/views/helpers/notificationbikeitem.js~NotificationBikeItem#componentWillMount",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 593,
    "kind": "member",
    "name": "navigate",
    "memberof": "src/components/views/helpers/notificationbikeitem.js~NotificationBikeItem",
    "static": false,
    "longname": "src/components/views/helpers/notificationbikeitem.js~NotificationBikeItem#navigate",
    "access": "public",
    "description": "Navigate to a page with a title.\nThis method is used over the commented out line below because successive touches of a bike item\nwould not add the data because data is only received in process in the componentWillMount function.\nSo adding the 'key' property to navigate makes it see that the new page is unique.",
    "lineNumber": 56,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "screen",
        "description": "The route to navigate to. See navigation.js stacks and screens"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "shouldRenavigate",
        "description": "If the component should call the navigation function again or not because parameters don't pass correctly"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 594,
    "kind": "method",
    "name": "render",
    "memberof": "src/components/views/helpers/notificationbikeitem.js~NotificationBikeItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/views/helpers/notificationbikeitem.js~NotificationBikeItem#render",
    "access": "public",
    "description": "Renders the notification item card.",
    "lineNumber": 83,
    "params": [],
    "return": null
  },
  {
    "__docId__": 595,
    "kind": "file",
    "name": "src/components/views/helpers/privacypolicy.js",
    "content": "import React, { Component } from 'react';\nimport { ScrollView, Dimensions } from 'react-native';\nimport HTML from 'react-native-render-html';\n\nimport PrivacyPolicyHTML from '../../../assets/static/pedal-patrol-privacy-policy';\n\n/**\n * Class for displaying the privacy policy as html.\n */\nclass PrivacyPolicy extends Component {\n    /**\n     * Renders the privacy policy as HTML.\n     */\n    render () {\n        // return (\n        //     <ScrollView style={{ flex: 1 }}>\n        //         <HTML html={PrivacyPolicyHTML.PrivacyPolicyHTML} imagesMaxWidth={Dimensions.get('window').width} containerStyle={{marginLeft: 15, marginRight: 15}} />\n        //     </ScrollView>\n        // );\n    }\n}\n\nexport default PrivacyPolicy;",
    "static": true,
    "longname": "/Users/seanr/Downloads/temp/src/components/views/helpers/privacypolicy.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 596,
    "kind": "class",
    "name": "PrivacyPolicy",
    "memberof": "src/components/views/helpers/privacypolicy.js",
    "static": true,
    "longname": "src/components/views/helpers/privacypolicy.js~PrivacyPolicy",
    "access": "public",
    "export": true,
    "importPath": "PedalPatrol/src/components/views/helpers/privacypolicy.js",
    "importStyle": "PrivacyPolicy",
    "description": "Class for displaying the privacy policy as html.",
    "lineNumber": 10,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 597,
    "kind": "method",
    "name": "render",
    "memberof": "src/components/views/helpers/privacypolicy.js~PrivacyPolicy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/views/helpers/privacypolicy.js~PrivacyPolicy#render",
    "access": "public",
    "description": "Renders the privacy policy as HTML.",
    "lineNumber": 14,
    "params": [],
    "return": null
  },
  {
    "__docId__": 598,
    "kind": "file",
    "name": "src/components/views/helpers/profilebutton.js",
    "content": "import React, { Component } from 'react';\nimport { Image, StyleSheet, View, TouchableOpacity } from 'react-native';\nimport { Icon, SearchBar } from 'react-native-elements';\nimport Avatar from 'react-native-badge-avatar';\nimport PropTypes from 'prop-types';\n\nimport DrawerHelp from '../../../util/drawerhelper';\n\nconst DEFAULT_AVATAR = require('../../../assets/images/default-profile-picture.jpg');;\n\n/**\n * Class to add a profile button to the search bar header.\n * @extends Component\n */\nclass ProfileButton extends Component {\n\t/**\n\t * Helper prop types.\n\t */\n\tstatic propTypes = {\n\t\tnumNotifications: PropTypes.number.isRequired,\n\t\tprofilePicture: PropTypes.string,\n\t\thitSlop: PropTypes.object\n\t}\n\n\t//<Image style={styles.profile} resizeMode=\"cover\" source={{uri: this.props.profilePicture}} />\n\t/**\n\t * Renders the profile button.\n\t */\n\trender() {\n\t\tconst hitSlop = {\n\t\t\ttop: 1,\n\t\t\tbottom: 1,\n\t\t\tleft: 1,\n\t\t\tright: 1,\n\t\t}\n\n\t\t// return (\n\t\t// \t<View>\n\t\t// \t\t{/* Profile */}\n\t\t// \t\t<View style={{flex:1}}>\n\t\t// \t\t\t<TouchableOpacity \n\t\t// \t\t\t\thitSlop={this.props.hitSlop ? this.props.hitSlop : hitSlop} \n\t\t// \t\t\t\tonPress={() => {DrawerHelp.openDrawer(this.props.numNotifications)}}>\n\t\t// \t\t\t\t<Avatar\n\t\t// \t\t\t\t\tstyle={styles.profile}\n\t\t// \t\t\t\t\tsize={40}\n\t\t// \t\t\t\t\tname=\"\"\n\t\t// \t\t\t\t\tplaceholder={DEFAULT_AVATAR}\n\t\t// \t\t\t\t\tsource={this.props.profilePicture}\n\t\t// \t\t\t\t\tbadge={this.props.numNotifications}\n\t\t// \t\t        />\n\t\t// \t\t\t</TouchableOpacity>\n\t\t// \t\t</View>\n\t\t// \t</View>\n\t\t// );  \n\t};\n};\n\nexport default ProfileButton;\n\nconst styles = StyleSheet.create({\n\tprofile: {\n\t\tflex:1,\n\t\twidth: 40,\n\t\theight: 40,\n\t\tborderRadius: 20,\n\t\tleft:10,\n\t}\n});",
    "static": true,
    "longname": "/Users/seanr/Downloads/temp/src/components/views/helpers/profilebutton.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 599,
    "kind": "variable",
    "name": "DEFAULT_AVATAR",
    "memberof": "src/components/views/helpers/profilebutton.js",
    "static": true,
    "longname": "src/components/views/helpers/profilebutton.js~DEFAULT_AVATAR",
    "access": "public",
    "export": false,
    "importPath": "PedalPatrol/src/components/views/helpers/profilebutton.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 600,
    "kind": "variable",
    "name": "styles",
    "memberof": "src/components/views/helpers/profilebutton.js",
    "static": true,
    "longname": "src/components/views/helpers/profilebutton.js~styles",
    "access": "public",
    "export": false,
    "importPath": "PedalPatrol/src/components/views/helpers/profilebutton.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 601,
    "kind": "class",
    "name": "ProfileButton",
    "memberof": "src/components/views/helpers/profilebutton.js",
    "static": true,
    "longname": "src/components/views/helpers/profilebutton.js~ProfileButton",
    "access": "public",
    "export": true,
    "importPath": "PedalPatrol/src/components/views/helpers/profilebutton.js",
    "importStyle": "ProfileButton",
    "description": "Class to add a profile button to the search bar header.",
    "lineNumber": 15,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 602,
    "kind": "member",
    "name": "propTypes",
    "memberof": "src/components/views/helpers/profilebutton.js~ProfileButton",
    "static": true,
    "longname": "src/components/views/helpers/profilebutton.js~ProfileButton.propTypes",
    "access": "public",
    "description": "Helper prop types.",
    "lineNumber": 19,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 603,
    "kind": "method",
    "name": "render",
    "memberof": "src/components/views/helpers/profilebutton.js~ProfileButton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/views/helpers/profilebutton.js~ProfileButton#render",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 604,
    "kind": "file",
    "name": "src/components/views/helpers/safearea.js",
    "content": "import React, { Component } from 'react';\nimport {SafeAreaView} from 'react-native';\nimport PropTypes from 'prop-types';\n\nimport { colours } from '../stylesheets/base-styles';\n\n/**\n * Class to render a safe area on the screen. Also colours the status colour\n * @extends Component\n */\nclass SafeArea extends Component {\n\t/**\n\t * Helper prop types.\n\t */\n\tstatic propTypes = {\n\t\toverrideColour: PropTypes.string\n\t}\n\n\t/**\n\t * Render the safe area.\n\t */\n\trender() {\n\t\t// return (\n\t\t// \t<SafeAreaView \n\t\t// \t\tstyle={{ flex:0, backgroundColor: this.props.overrideColour ? this.props.overrideColour : colours.ppWhite }} \n\t\t// \t\tforceInset={{top: 'always'}} />\n\t\t// );\n\t};\n}\n\nexport default SafeArea;",
    "static": true,
    "longname": "/Users/seanr/Downloads/temp/src/components/views/helpers/safearea.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 605,
    "kind": "class",
    "name": "SafeArea",
    "memberof": "src/components/views/helpers/safearea.js",
    "static": true,
    "longname": "src/components/views/helpers/safearea.js~SafeArea",
    "access": "public",
    "export": true,
    "importPath": "PedalPatrol/src/components/views/helpers/safearea.js",
    "importStyle": "SafeArea",
    "description": "Class to render a safe area on the screen. Also colours the status colour",
    "lineNumber": 11,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 606,
    "kind": "member",
    "name": "propTypes",
    "memberof": "src/components/views/helpers/safearea.js~SafeArea",
    "static": true,
    "longname": "src/components/views/helpers/safearea.js~SafeArea.propTypes",
    "access": "public",
    "description": "Helper prop types.",
    "lineNumber": 15,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 607,
    "kind": "method",
    "name": "render",
    "memberof": "src/components/views/helpers/safearea.js~SafeArea",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/views/helpers/safearea.js~SafeArea#render",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 608,
    "kind": "file",
    "name": "src/components/views/helpers/searchbar.js",
    "content": "import React, { Component } from 'react';\nimport { Platform, Image, StyleSheet, View, TouchableHighlight, TouchableOpacity, ViewStyle, NativeModules } from 'react-native';\nimport { Icon } from 'react-native-elements';\nimport { Searchbar } from 'react-native-paper';\nimport PropTypes from 'prop-types';\nimport SectionedMultiSelect from 'react-native-sectioned-multi-select';\n\nimport { colours } from '../stylesheets/base-styles';\n\nimport SafeArea from './safearea';\nimport ProfileButton from './profilebutton';\nimport FilterHelper from './filter';\n\nconst {StatusBarManager} = NativeModules;\nconst STATUSBAR_HEIGHT = Platform.OS === 'ios' ? 20 : StatusBarManager.HEIGHT;\n\n/**\n * Class to add a search bar header to a page.\n * @extends Component\n */\nclass SearchBar extends Component {\n\tstate = {\n\t\tvalue: '',\n\t\tselectedItems: [],\n\t}\n\n\t/**\n\t * Helper prop types.\n\t */\n\tstatic propTypes = {\n\t\tprofilePicture: PropTypes.string,\n\t\tname: PropTypes.string,\n\t\tsearchBy: PropTypes.string,\n\t\tnumNotifications: PropTypes.number.isRequired,\n\t\thandleSearchFilter: PropTypes.func.isRequired,\n\t\thandleSearchCancel: PropTypes.func.isRequired,\n\t\thandleSearchClear: PropTypes.func.isRequired,\n\t\topenFilter: PropTypes.func.isRequired,\n\t\tsearchRef: PropTypes.func\n\t}\n\n\t/**\n\t * Component mounted\n\t */\n\tcomponentDidMount = () => {\n\t\tif (this.props.searchRef) {\n\t\t\tthis.props.searchRef(this);\t\t\t\n\t\t}\n\t}\n\n\t/**\n\t * Returns if there is text in the search bar. If the user is searching something.\n\t *\n\t * @return {Boolean} If the user is currently searching\n\t */\n\tisSearching = () => {\n\t\treturn this.state.value !== '';\n\t}\n\n\t/**\n\t * Add the new selected items to the state and update\n\t *\n\t * @param {List} selectedItems - List of selected items\n\t */\n\t_onSelectedItemsChange = (selectedItems) => {\n\t\tthis.setState({ selectedItems });\n\t} \n\n\t/**\n\t * Renders an icon.\n\t */\n\t_renderIcon = () => {\n\t\t// <Icon name=\"filter-list\" type=\"MaterialIcons\" size={30} color={colours.ppGreen} />\n\t}\n\t// );\n\n\t/**\n\t * Renders the search bar.\n\t */\n\trender() {\n\t\t// return (   \n\t\t// \t<View>\n\t\t// \t\t<SafeArea/>\n\t\t// \t\t<View style={styles.searchContainer}>\n\t\t// \t\t\t{/* Profile */}\n\t\t// \t\t\t<ProfileButton \n\t\t// \t\t\t\tprofilePicture={this.props.profilePicture} \n\t\t// \t\t\t\tnumNotifications={this.props.numNotifications}/>\n\n\t\t// \t\t\t{/* Search Bar */}\n\t\t// \t\t\t<View style={{flex:6}}>\n\t\t// \t\t\t\t<Searchbar        \n\t\t// \t\t\t\t\tplaceholder={\"Search\" + (this.props.searchBy && this.props.searchBy !== '' ? ' by ' + this.props.searchBy : '')}\n\t\t// \t\t\t\t\tstyle={styles.searchBar}\n\t\t// \t\t\t\t\tvalue={this.state.value}\n\t\t// \t\t\t\t\tonChangeText={(text) => { this.props.handleSearchFilter(text); this.setState({ value: text })}}\n\t\t// \t\t\t\t/>\n\t\t// \t\t\t</View>\n\t\t\t\t\t\n\t\t// \t\t\t\t{/* Filter button - Using sectioned multi select */}\n\t\t// \t\t\t\t{/* <View style={{flex:1, bottom:25}}> */}\n\t\t// \t\t\t\t\t{/* <FilterHelper onSelectedItemsChange={this.props.onSelectedItemsChange} selectedItems={this.props.selectedItems}/> */}\n\t\t// \t\t\t\t{/* </View> */}\n\n\t\t// \t\t\t\t{ Filter button - Using button - Needs dropdown }\n\t\t// \t\t\t\t<View style={{flex:1, top:5}}>\n\t\t// \t\t\t\t\t<TouchableOpacity onPress={() => this.props.openFilter()} accessibilityLabel=\"New\">\n\t\t// \t\t\t\t\t\t<Icon name=\"filter-list\" type=\"MaterialIcons\" size={35} color={colours.ppGreen} />\n\t\t// \t\t\t\t\t</TouchableOpacity>\n\t\t// \t\t\t\t</View>\n\t\t\t\t\t\n\t\t// \t\t</View>\n\n\n\t\t// \t\t{/*<SectionedMultiSelect\n\t\t// \t\t\titems={filters}\n\t\t// \t\t\tdisplayKey='name'\n\t\t// \t\t\tuniqueKey={'id'}\n\t\t// \t\t\tcolors={{ primary: this.state.selectedItems.length ? 'forestgreen' : 'crimson' }}\n\t\t// \t\t\tselectText=''\n\t\t// \t\t\tselectToggleIconComponent={this._renderIcon()}\n\t\t// \t\t\thideSelect\n\t\t// \t\t\tshowDropDowns\n\t\t// \t\t\tshowChips={false}\n\t\t// \t\t\talwaysShowSelectText={false}\n\t\t// \t\t\tshowCancelButton={false}\n\t\t// \t\t\tonSelectedItemsChange={this._onSelectedItemsChange}\n\t\t// \t\t\tselectedItems={this.state.selectedItems}\n\t\t// \t\t\tref={(SectionedMultiSelect) => this.sectionedMultiSelect = SectionedMultiSelect}\n\t\t// \t\t/>*/}\n\t\t// \t</View>\n\t\t// );  \n\t};\n};\n\nexport default SearchBar;\n\nconst filters = [\n\t{\n\t\tid: 0,\n\t\tname: 'Model',\n\t\ticon: { uri: \"https://cdn4.iconfinder.com/data/icons/free-crystal-icons/512/Gemstone.png\" }\n\t},\n\t{\n\t\tid: 1,\n\t\tname: 'Brand',\n\t\ticon: { uri: \"https://cdn4.iconfinder.com/data/icons/free-crystal-icons/512/Gemstone.png\" }\n\t}\n]\n\nconst styles = StyleSheet.create({\n\tsearchContainer: { // View that contains search bar\n\t\tbackgroundColor: colours.ppWhite,\n\t\tflexDirection:'row',\n\t\tpaddingBottom: STATUSBAR_HEIGHT,\n\t\tpaddingTop: STATUSBAR_HEIGHT\n\t},\n\tsearchBar: {\n\t\tbackgroundColor: colours.ppGrey,\n\t\tborderWidth: 1,\n\t\tborderRadius: 50,\n\t\theight: 35,\n\t\tleft: 20,\n\t\ttop: 5,\n\t\tmarginRight: 20\n\t},\n});",
    "static": true,
    "longname": "/Users/seanr/Downloads/temp/src/components/views/helpers/searchbar.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 609,
    "kind": "variable",
    "name": "StatusBarManager",
    "memberof": "src/components/views/helpers/searchbar.js",
    "static": true,
    "longname": "src/components/views/helpers/searchbar.js~StatusBarManager",
    "access": "public",
    "export": false,
    "importPath": "PedalPatrol/src/components/views/helpers/searchbar.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 610,
    "kind": "variable",
    "name": "STATUSBAR_HEIGHT",
    "memberof": "src/components/views/helpers/searchbar.js",
    "static": true,
    "longname": "src/components/views/helpers/searchbar.js~STATUSBAR_HEIGHT",
    "access": "public",
    "export": false,
    "importPath": "PedalPatrol/src/components/views/helpers/searchbar.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 611,
    "kind": "variable",
    "name": "filters",
    "memberof": "src/components/views/helpers/searchbar.js",
    "static": true,
    "longname": "src/components/views/helpers/searchbar.js~filters",
    "access": "public",
    "export": false,
    "importPath": "PedalPatrol/src/components/views/helpers/searchbar.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 138,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 612,
    "kind": "variable",
    "name": "styles",
    "memberof": "src/components/views/helpers/searchbar.js",
    "static": true,
    "longname": "src/components/views/helpers/searchbar.js~styles",
    "access": "public",
    "export": false,
    "importPath": "PedalPatrol/src/components/views/helpers/searchbar.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 151,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 613,
    "kind": "class",
    "name": "SearchBar",
    "memberof": "src/components/views/helpers/searchbar.js",
    "static": true,
    "longname": "src/components/views/helpers/searchbar.js~SearchBar",
    "access": "public",
    "export": true,
    "importPath": "PedalPatrol/src/components/views/helpers/searchbar.js",
    "importStyle": "SearchBar",
    "description": "Class to add a search bar header to a page.",
    "lineNumber": 21,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 614,
    "kind": "member",
    "name": "state",
    "memberof": "src/components/views/helpers/searchbar.js~SearchBar",
    "static": false,
    "longname": "src/components/views/helpers/searchbar.js~SearchBar#state",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 615,
    "kind": "member",
    "name": "propTypes",
    "memberof": "src/components/views/helpers/searchbar.js~SearchBar",
    "static": true,
    "longname": "src/components/views/helpers/searchbar.js~SearchBar.propTypes",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 616,
    "kind": "member",
    "name": "componentDidMount",
    "memberof": "src/components/views/helpers/searchbar.js~SearchBar",
    "static": false,
    "longname": "src/components/views/helpers/searchbar.js~SearchBar#componentDidMount",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 617,
    "kind": "member",
    "name": "isSearching",
    "memberof": "src/components/views/helpers/searchbar.js~SearchBar",
    "static": false,
    "longname": "src/components/views/helpers/searchbar.js~SearchBar#isSearching",
    "access": "public",
    "description": "Returns if there is text in the search bar. If the user is searching something.",
    "lineNumber": 56,
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "If the user is currently searching"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 618,
    "kind": "member",
    "name": "_onSelectedItemsChange",
    "memberof": "src/components/views/helpers/searchbar.js~SearchBar",
    "static": false,
    "longname": "src/components/views/helpers/searchbar.js~SearchBar#_onSelectedItemsChange",
    "access": "private",
    "description": "Add the new selected items to the state and update",
    "lineNumber": 65,
    "params": [
      {
        "nullable": null,
        "types": [
          "List"
        ],
        "spread": false,
        "optional": false,
        "name": "selectedItems",
        "description": "List of selected items"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 619,
    "kind": "member",
    "name": "_renderIcon",
    "memberof": "src/components/views/helpers/searchbar.js~SearchBar",
    "static": false,
    "longname": "src/components/views/helpers/searchbar.js~SearchBar#_renderIcon",
    "access": "private",
    "description": "Renders an icon.",
    "lineNumber": 72,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 620,
    "kind": "method",
    "name": "render",
    "memberof": "src/components/views/helpers/searchbar.js~SearchBar",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/views/helpers/searchbar.js~SearchBar#render",
    "access": "public",
    "description": "Renders the search bar.",
    "lineNumber": 80,
    "params": [],
    "return": null
  },
  {
    "__docId__": 621,
    "kind": "file",
    "name": "src/components/views/helpers/sidedrawer.js",
    "content": "import React, { Component } from 'react';\nimport { Platform, TouchableHighlight, Text, View, StyleSheet, FlatList } from 'react-native';\nimport Drawer from 'react-native-drawer';\nimport Icon from 'react-native-vector-icons/FontAwesome';\nimport PropTypes from 'prop-types';\n\nimport DrawerHelp from '../../../util/drawerhelper';\nimport SafeArea from './safearea';\nimport DrawerHeader from './drawerheader';\nimport NavigatorService from '../../../config/navigationservice';\n\n/**\n * Class for the side drawer component.\n * @extends Component\n */\nclass SideDrawer extends Component {\n\t/**\n\t * Helper prop types.\n\t */\n\tstatic propTypes = {\n\t\trenderMainContent: PropTypes.func.isRequired\n\t}\n\n\t/**\n\t * Creates an instance of the SideDrawer component.\n\t *\n\t * @constructor\n\t * @param {Object} props - The component's properties\n\t */\n\tconstructor (props) {\n\t\tsuper(props);\n\t\tthis.state = { drawerOpen: false, numNotifications: 0, profileData: {} };\n\t\t// console.log(this.state.drawerOpen);\n\t\tDrawerHelp.setDrawer(this);\n\t};\n\n\t/**\n\t * Component has mounted.\n\t */\n\tcomponentDidMount = () => {\n\t\tthis.setState({\n\t\t\tprofileData: {profilePicture: DrawerHelp.getDefaultProfile()}\n\t\t})\n\t}\n\n\t/**\n\t * Toggles the side drawer open and closed.\n\t */\n\ttoggleDrawer = () => {\n\t\t// console.log(this.state.drawerOpen);\n\t\tthis.setState({\n\t\t\tdrawerOpen: !this.state.drawerOpen\n\t\t});\n\t}\n\n\t/**\n\t * Render a text input item.\n\t * \n\t * @param {Object} item - A list item\n\t */\n\t_renderItem = ({item}) => {}\n\t// \t<View style={styles.icon}>\n\t// \t\t<Icon.Button\n\t// \t\t\tname={item.icon_name} \n\t// \t\t\ttype={item.icon_type}\n\t// \t\t\tbackgroundColor=\"#F5FCFF\"\n\t// \t\t\tcolor=\"#000\"\n\t// \t\t\tsize={30}\n\t// \t\t\tonPress={() => this.onItemPressed(item)}>\n\t// \t\t\t<Text style={styles.itemText}>{item.text}</Text>\n\t// \t\t\t{\n\t// \t\t\t\tthis.state.numNotifications > 0 &&\n\t// \t\t\t\titem.text === 'Alerts' &&\n\t// \t\t\t\t<View style={styles.notifications}>\n\t// \t\t\t\t\t<Text style={styles.notificationsText}>{this.state.numNotifications}</Text>\n\t// \t\t\t\t</View>\n\t// \t\t\t}\n\t// \t\t</Icon.Button>\n\t// \t</View>\n\t// );\n\n\t/**\n\t * Function is called when a drawer item is pressed.\n\t *\n\t * @param {Object} item - The drawer item that is pressed, see drawerData for possible items.\n\t */\n\tonItemPressed = (item) => {\n\t\tlet routeParams = {};\n\t\tif (item.hasOwnProperty('params')) { // If there's parameters, flatten them\n\t\t\trouteParams = this.getParams(item.params);\n\t\t}\n\t\tthis.navigateToScreen(item.screen, routeParams);\n\t}\n\n\t/**\n\t * Flattens a list of objects into an object with properties.\n\t * Example:\n\t * \t\tOriginal: [{key: k1, value: v1}, {key: k2, value: v2}]\n\t * \t\tAfter:\t  {k1: v1, k2: v2}\n\t * \n\t * @param {List} params - A list of key, value pair objects\n\t * @return {Object} An object with properties \n\t */\n\tgetParams = (params) => {\n\t\tlet paramsAsObject = {};\n\t\tfor (let i=0; i < params.length; i++) {\n\t\t\t// Property value 'key' becomes the property in final object\n\t\t\tparamsAsObject[params[i].key] = params[i].value;\n\t\t}\n\t\treturn paramsAsObject;\n\t}\n\n\t/**\n\t * Navigate to a specified screen. Screen must be a possible navigation\n\t *\n\t * @param {string} screen - The name of the screen to navigate to.\n\t * @param {Object} params - The params to add to the navigation call. Key, value pairs\n\t */\n\tnavigateToScreen = (screen, params) => {\n\t\t// console.log(screen);\n\t\tthis.closeDrawer();\n\t\t// Need to use navigator service because we are navigating from above the root navigator\n\t\tNavigatorService.navigate(screen, params);\n\t}\n\n\t/**\n\t * Closes the drawer.\n\t */\n\tcloseDrawer = () => {\n\t\tthis._drawer.close();\n\t\tthis.setState({drawerOpen: false});\n\t};\n\t\n\t/**\n\t * Opens the drawer.\n\t *\n\t * @param {Number} numNotifications - The number of notifications\n\t */\n\topenDrawer = (numNotifications) => {\n\t\tthis._drawer.open();\n\t\tthis.setState({drawerOpen: true, numNotifications});\n\t};\n\n\n\t/**\n\t * Extract the key from the item and index\n\t */\n\t_keyExtractor = (item, index) => item.text;\n\n\t/**\n\t * Render the contents of the drawer.\n\t */\n\trenderSideMenuContent = () => {\n\t\t// return (\n\t\t// \t<View style={{height: '100%'}}>\n\t\t// \t\t<SafeArea/>\n\t\t// \t\t<DrawerHeader \n\t\t// \t\t\timage={this.state.profileData.profilePicture}\n\t\t// \t\t\tname={this.state.profileData.full_name ? this.state.profileData.full_name : ''}/>\n\t\t\n\t\t// \t\t<FlatList\n\t\t// \t\t\tstyle={styles.flatList}\n\t\t// \t\t\tdata={drawerData}\n\t\t// \t\t\textraData={this.state}\n\t\t// \t\t\tkeyExtractor={this._keyExtractor}\n\t\t// \t\t\trenderItem={this._renderItem}/>\n\n\t\t// \t\t<SafeArea />\n\t\t// \t</View>\n\t\t// );\n\t}\n\n\t/**\n\t * Render the side drawer.\n\t */\n\trender() {\n\t\t// return (\n\t\t// \t<Drawer\n\t\t// \t\tref={(ref) => this._drawer = ref}\n\t\t// \t\topen={this.state.drawerOpen}\n\t\t// \t\tcontent={this.renderSideMenuContent()}\n\t\t// \t\ttype=\"overlay\"\n\t\t// \t\ttapToClose={true}\n\t\t// \t\tstyles={drawerStyles}\n\t\t// \t\topenDrawerOffset={0.2}\n\t\t// \t\tpanCloseMask={0.2}\n\t\t// \t\tclosedDrawerOffset={-3}\n\t\t// \t\tonClose={() => {\n\t\t// \t\t\tthis.setState({drawerOpen: false});\n\t\t// \t\t}}\n\t\t// \t\tpanOpenMask={0.80}\n\t\t// \t\tcaptureGestures=\"open\"\n\t\t// \t\tacceptPan={false}>\n\t\t\t\t\t\t\n\t\t// \t\t\t{/* Main Content goes here (e.g. Tab Views) */}\n\t\t// \t\t\t{this.props.renderMainContent()}\n\n\t\t// \t</Drawer>\n\t\t// );\n\t}\n}\n\nexport default SideDrawer;\n\n/*\n * 'text' property is the drawer name\n * 'icon_name' property is the icon name from the icon type\n * 'icon_type' property is the type of icon (see react-native-vector-icons)\n * 'screen' property must be the stack navigator defined in navigation.js\n * 'params' property is a list of key, value pair objects. The 'key' property will appear as a param in the navigated to screen, with value 'value'\n */\nconst drawerData = [\n\t{\n\t\ttext: 'Profile',\n\t\ticon_name: 'user',\n\t\ticon_type: 'font-awesome',\n\t\tscreen: 'ProfileStack',\n\t},\n\t{\n\t\ttext: 'Alerts',\n\t\ticon_name: 'bell',\n\t\ticon_type: 'font-awesome',\n\t\tscreen: 'AlertStack'\n\t},\n\t{\n\t\ttext: 'Settings',\n\t\ticon_name: 'cog',\n\t\ticon_type: 'font-awesome',\n\t\tscreen: 'SettingsStack'\n\t},\n\t{\n\t\ttext: 'Help Center',\n\t\ticon_name: 'info-circle',\n\t\ticon_type: 'font-awesome',\n\t\tscreen: 'HelpStack'\n\t},\n\t{\n\t\ttext: 'Logout',\n\t\ticon_name: 'sign-out',\n\t\ticon_type: 'font-awesome',\n\t\tscreen: 'AuthLoading',\n\t\tparams: [{ key: 'logout', value: true }]\n\t}\n\n]\n\nconst drawerStyles = StyleSheet.create({\n   drawer: {\n\t\tshadowColor: '#000000',\n\t\tshadowOpacity: 0.8,\n\t\tshadowRadius: 3,\n\t\t// backgroundColor: 'rgba(0, 0, 0, 0.5)',\n\t\tbackgroundColor: '#F5FCFF',\n\t},\n\tmain: {\n\t\tpaddingLeft: 3\n\t},\n});\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tflex: 1,\n\t\tjustifyContent: 'center',\n\t\talignItems: 'center',\n\t\tbackgroundColor: '#F5FCFF',\n\t},\n\ticon: {\n\t\tmarginTop: 5,\n\t\tmarginLeft: 5,\n\t\tmarginRight: 5,\n\t\t// padding: 10\n\t},\n\tflatlist: {\n\t\tflex: 1,\n\t\tmarginTop: 5\n\t},\n\titemText: {\n\t\tflex: 1,\n\t\tfontSize: 20,\n\t    paddingRight: 40,\n\t    marginLeft: 20,\n\t    marginTop: 3\n\t},\n\tnotifications: {\n\t\twidth: 30,\n\t\theight: 30,\n\t\tborderRadius: 15,\n\t\tmarginLeft: 5,\n\t\tbackgroundColor: '#696969',\n\t\talignItems: 'center',\n\t\tjustifyContent: 'center'\n\t},\n\tnotificationsText: {\n\t\tfontSize: 20, \n\t\tcolor: 'white', \n\t}\n});",
    "static": true,
    "longname": "/Users/seanr/Downloads/temp/src/components/views/helpers/sidedrawer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 622,
    "kind": "variable",
    "name": "drawerData",
    "memberof": "src/components/views/helpers/sidedrawer.js",
    "static": true,
    "longname": "src/components/views/helpers/sidedrawer.js~drawerData",
    "access": "public",
    "export": false,
    "importPath": "PedalPatrol/src/components/views/helpers/sidedrawer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 212,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 623,
    "kind": "variable",
    "name": "drawerStyles",
    "memberof": "src/components/views/helpers/sidedrawer.js",
    "static": true,
    "longname": "src/components/views/helpers/sidedrawer.js~drawerStyles",
    "access": "public",
    "export": false,
    "importPath": "PedalPatrol/src/components/views/helpers/sidedrawer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 247,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 624,
    "kind": "variable",
    "name": "styles",
    "memberof": "src/components/views/helpers/sidedrawer.js",
    "static": true,
    "longname": "src/components/views/helpers/sidedrawer.js~styles",
    "access": "public",
    "export": false,
    "importPath": "PedalPatrol/src/components/views/helpers/sidedrawer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 260,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 625,
    "kind": "class",
    "name": "SideDrawer",
    "memberof": "src/components/views/helpers/sidedrawer.js",
    "static": true,
    "longname": "src/components/views/helpers/sidedrawer.js~SideDrawer",
    "access": "public",
    "export": true,
    "importPath": "PedalPatrol/src/components/views/helpers/sidedrawer.js",
    "importStyle": "SideDrawer",
    "description": "Class for the side drawer component.",
    "lineNumber": 16,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 626,
    "kind": "member",
    "name": "propTypes",
    "memberof": "src/components/views/helpers/sidedrawer.js~SideDrawer",
    "static": true,
    "longname": "src/components/views/helpers/sidedrawer.js~SideDrawer.propTypes",
    "access": "public",
    "description": "Helper prop types.",
    "lineNumber": 20,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 627,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/components/views/helpers/sidedrawer.js~SideDrawer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/views/helpers/sidedrawer.js~SideDrawer#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true
  },
  {
    "__docId__": 628,
    "kind": "member",
    "name": "state",
    "memberof": "src/components/views/helpers/sidedrawer.js~SideDrawer",
    "static": false,
    "longname": "src/components/views/helpers/sidedrawer.js~SideDrawer#state",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "{\"drawerOpen\": *, \"numNotifications\": *, \"profileData\": *}"
      ]
    }
  },
  {
    "__docId__": 629,
    "kind": "member",
    "name": "componentDidMount",
    "memberof": "src/components/views/helpers/sidedrawer.js~SideDrawer",
    "static": false,
    "longname": "src/components/views/helpers/sidedrawer.js~SideDrawer#componentDidMount",
    "access": "public",
    "description": "Component has mounted.",
    "lineNumber": 40,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 630,
    "kind": "member",
    "name": "toggleDrawer",
    "memberof": "src/components/views/helpers/sidedrawer.js~SideDrawer",
    "static": false,
    "longname": "src/components/views/helpers/sidedrawer.js~SideDrawer#toggleDrawer",
    "access": "public",
    "description": "Toggles the side drawer open and closed.",
    "lineNumber": 49,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 631,
    "kind": "member",
    "name": "_renderItem",
    "memberof": "src/components/views/helpers/sidedrawer.js~SideDrawer",
    "static": false,
    "longname": "src/components/views/helpers/sidedrawer.js~SideDrawer#_renderItem",
    "access": "private",
    "description": "Render a text input item.",
    "lineNumber": 61,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "item",
        "description": "A list item"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 632,
    "kind": "member",
    "name": "onItemPressed",
    "memberof": "src/components/views/helpers/sidedrawer.js~SideDrawer",
    "static": false,
    "longname": "src/components/views/helpers/sidedrawer.js~SideDrawer#onItemPressed",
    "access": "public",
    "description": "Function is called when a drawer item is pressed.",
    "lineNumber": 87,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "item",
        "description": "The drawer item that is pressed, see drawerData for possible items."
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 633,
    "kind": "member",
    "name": "getParams",
    "memberof": "src/components/views/helpers/sidedrawer.js~SideDrawer",
    "static": false,
    "longname": "src/components/views/helpers/sidedrawer.js~SideDrawer#getParams",
    "access": "public",
    "description": "Flattens a list of objects into an object with properties.\nExample:\n\t\tOriginal: [{key: k1, value: v1}, {key: k2, value: v2}]\n\t\tAfter:\t  {k1: v1, k2: v2}",
    "lineNumber": 104,
    "params": [
      {
        "nullable": null,
        "types": [
          "List"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "A list of key, value pair objects"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "An object with properties"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 634,
    "kind": "member",
    "name": "navigateToScreen",
    "memberof": "src/components/views/helpers/sidedrawer.js~SideDrawer",
    "static": false,
    "longname": "src/components/views/helpers/sidedrawer.js~SideDrawer#navigateToScreen",
    "access": "public",
    "description": "Navigate to a specified screen. Screen must be a possible navigation",
    "lineNumber": 119,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "screen",
        "description": "The name of the screen to navigate to."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "The params to add to the navigation call. Key, value pairs"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 635,
    "kind": "member",
    "name": "closeDrawer",
    "memberof": "src/components/views/helpers/sidedrawer.js~SideDrawer",
    "static": false,
    "longname": "src/components/views/helpers/sidedrawer.js~SideDrawer#closeDrawer",
    "access": "public",
    "description": "Closes the drawer.",
    "lineNumber": 129,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 636,
    "kind": "member",
    "name": "openDrawer",
    "memberof": "src/components/views/helpers/sidedrawer.js~SideDrawer",
    "static": false,
    "longname": "src/components/views/helpers/sidedrawer.js~SideDrawer#openDrawer",
    "access": "public",
    "description": "Opens the drawer.",
    "lineNumber": 139,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "numNotifications",
        "description": "The number of notifications"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 637,
    "kind": "member",
    "name": "_keyExtractor",
    "memberof": "src/components/views/helpers/sidedrawer.js~SideDrawer",
    "static": false,
    "longname": "src/components/views/helpers/sidedrawer.js~SideDrawer#_keyExtractor",
    "access": "private",
    "description": "Extract the key from the item and index",
    "lineNumber": 148,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 638,
    "kind": "member",
    "name": "renderSideMenuContent",
    "memberof": "src/components/views/helpers/sidedrawer.js~SideDrawer",
    "static": false,
    "longname": "src/components/views/helpers/sidedrawer.js~SideDrawer#renderSideMenuContent",
    "access": "public",
    "description": "Render the contents of the drawer.",
    "lineNumber": 153,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 639,
    "kind": "method",
    "name": "render",
    "memberof": "src/components/views/helpers/sidedrawer.js~SideDrawer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/views/helpers/sidedrawer.js~SideDrawer#render",
    "access": "public",
    "description": "Render the side drawer.",
    "lineNumber": 176,
    "params": [],
    "return": null
  },
  {
    "__docId__": 640,
    "kind": "file",
    "name": "src/components/views/home-view.js",
    "content": "import React, { Component } from 'react';\nimport { StyleSheet, FlatList, View, TouchableHighlight, RefreshControl, Alert, ScrollView } from 'react-native';\nimport { Icon } from 'react-native-elements';\n\nimport { styles } from './stylesheets/base-styles';\n\nimport SafeArea from './helpers/safearea';\nimport NotificationBikeItem from './helpers/notificationbikeitem';\nimport SearchBar from './helpers/searchbar';\nimport BaseView from './view';\nimport HomePresenter from '../presenters/home-presenter';\n\n/**\n * Class for the Home view\n * @extends BaseView\n */\nclass HomeView extends BaseView {\n\t/**\n\t * Creates an instance of BikeView\n\t *\n\t * @constructor\n\t * @param {Object} props - Component properties\n\t */\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.resetState();\n\t\tthis._renderItem = this._renderItem.bind(this);\n\t\tthis._renderSearchBar = this._renderSearchBar.bind(this);\n\t\tthis.HomeP = new HomePresenter(this);\n\t}\n\n\t/**\n\t * Resets the state \n\t */\n\tresetState = () => {\n\t\tthis.state = { refresh: true, data: [], refreshing: false, profileData: {} };\n\t}\n\n\t/**\n\t * Renders an item from a list to the screen by extracting data.\n\t * \n\t * @param {Object} item - An item to be rendered\n\t */\n\t_renderItem = ({item}) => {}\n\t// \t<NotificationBikeItem\n\t// \t\tdata={item}\n\t// \t\tfrom={'Home'}\n\t// \t\tsetBookmark={this.HomeP.setBookmark}\n\t// \t\tbookmarked={this.HomeP.getBookmarked(item.id)}\n\t// \t\tnavigation={this.props.navigation}/>\n\t// );\n\n\t/**\n\t * Sets the state to the profile data retrieved from the model.\n\t */\n\t_setProfileImage = () => {\n\t\tthis.HomeP.getProfileImage((result) => this.setState({profileData: result}));\n\t}\n\n\t// Temporary alert until filter feature is implemented\n\ttemporaryFilter = () => {\n\t\tAlert.alert(\n\t\t\t\"The search filter is currently disabled.\",\n\t\t\t\"Sorry for any inconvenience.\",\n\t\t\t[\n\t\t\t\t{ text: \"Ok\", style: \"ok\" },\n\t\t\t],\n\t\t\t{ cancelable: false },\n\t\t);\n\t}\n\n\t/**\n\t * Renders a search bar as the header including the profile icon and the filter button.\n\t */\n\t_renderSearchBar = () => {}\n\t// \t<SearchBar \n\t// \t\thandleSearchFilter={(text) => this.HomeP.handleSearchFilter(text)}\n\t// \t\thandleSearchCancel={this.HomeP.handleSearchCancel}\n\t// \t\thandleSearchClear={this.HomeP.handleSearchClear}\n\t// \t\tsearchBy='brand'\n\t// \t\topenFilter={this.temporaryFilter}\n\t// \t\tprofilePicture={this.state.profileData.profilePicture}\n\t// \t\tname={this.state.profileData.full_name}\n\t// \t\tnumNotifications={this.HomeP.getNotificationCount()}/>\n\t// );\n\n\n\t/**\n\t * Refreshes the state of the component so new data is fetched.\n\t */\n\trefreshState = () => {\n\t\tthis.setState({ \n\t\t\trefresh: !this.state.refresh\n\t\t});\n\t};\n\n\t/**\n\t * Triggers when a component or this component is mounted.\n\t */\n\tcomponentWillMount = () => {\n\t\tthis.setState({\n\t\t\tdata: this.HomeP.getData()\n\t\t});\n\t\tthis._setProfileImage();\n\t};\n\n\n\t/**\n\t * Component is about to unmount, do any cleanup here.\n\t * Call viewUnmounting in base class so it can do any cleanup for the view before calling the presenter destroy method\n\t */\n\tcomponentWillUnmount = () => {\n\t\tthis.viewUnmounting(this.HomeP);\n\t}\n\n\t/**\n\t * Triggers a force refresh of the view\n\t */\n\t_onRefresh = () => {\n\t\tthis.HomeP.forceRefresh();\n\t}\n\n\t/**\n\t * Extracts the item id as a string.\n\t *\n\t * @param {Object} item - An item being rendered\n\t * @param {Number} index - The index of the item \n\t */\n\t_keyExtractor = (item, index) => item.dataID.toString();\n\n\t/**\n\t * Renders the screen\n\t */\n\trender() {\n\t\t// RefreshControl (below) allows for the pull down of the list to update it\n\t\t// return (\t\n\t\t// \t\t<View style={styles.container}>\n\t\t// \t\t\t<SafeArea/>\n\t\t// \t\t\t<View>\n\t\t// \t\t\t\t<FlatList\n\t\t// \t\t\t\t\tscrollEnabled={false}\n\t\t// \t\t\t\t\tListHeaderComponent={this._renderSearchBar}\n\t\t// \t\t\t\t\tstickyHeaderIndices={[0]}/>\n\t\t// \t\t\t</View>\n\t\t// \t\t\t{/* Refresh control must be added to ScrollView otherwise it won't show up */}\n\t\t// \t\t\t<ScrollView\n\t\t// \t\t\t\trefreshControl={\n\t\t// \t\t\t\t\t<RefreshControl\n\t\t// \t\t\t\t\t\tcolors={[\"#9Bd35A\", \"#689F38\"]}\n\t\t// \t\t\t\t\t\trefreshing={this.state.refreshing}\n\t\t// \t\t\t\t\t\tonRefresh={() => this._onRefresh()}/>\n\t\t// \t\t\t\t}>\n\t\t// \t\t\t\t<FlatList\n\t\t// \t\t\t\t\tdata={this.state.data}\n\t\t// \t\t\t\t\textraData={this.state.refresh}\n\t\t// \t\t\t\t\tkeyExtractor={this._keyExtractor}\n\t\t// \t\t\t\t\trenderItem={this._renderItem}\n\t\t// \t\t\t\t\tcontentContainerStyle={{paddingBottom: 5}}>\n\t\t// \t\t\t\t</FlatList>\n\t\t// \t\t\t</ScrollView>\n\t\t// \t\t</View>\n\t\t// );\n\t};\n\n};\n\nexport default HomeView;",
    "static": true,
    "longname": "/Users/seanr/Downloads/temp/src/components/views/home-view.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 641,
    "kind": "class",
    "name": "HomeView",
    "memberof": "src/components/views/home-view.js",
    "static": true,
    "longname": "src/components/views/home-view.js~HomeView",
    "access": "public",
    "export": true,
    "importPath": "PedalPatrol/src/components/views/home-view.js",
    "importStyle": "HomeView",
    "description": "Class for the Home view",
    "lineNumber": 17,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 642,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/components/views/home-view.js~HomeView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/views/home-view.js~HomeView#constructor",
    "access": "public",
    "description": "Creates an instance of BikeView",
    "lineNumber": 24,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "Component properties"
      }
    ]
  },
  {
    "__docId__": 643,
    "kind": "member",
    "name": "_renderItem",
    "memberof": "src/components/views/home-view.js~HomeView",
    "static": false,
    "longname": "src/components/views/home-view.js~HomeView#_renderItem",
    "access": "private",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 644,
    "kind": "member",
    "name": "_renderSearchBar",
    "memberof": "src/components/views/home-view.js~HomeView",
    "static": false,
    "longname": "src/components/views/home-view.js~HomeView#_renderSearchBar",
    "access": "private",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 645,
    "kind": "member",
    "name": "HomeP",
    "memberof": "src/components/views/home-view.js~HomeView",
    "static": false,
    "longname": "src/components/views/home-view.js~HomeView#HomeP",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 646,
    "kind": "member",
    "name": "resetState",
    "memberof": "src/components/views/home-view.js~HomeView",
    "static": false,
    "longname": "src/components/views/home-view.js~HomeView#resetState",
    "access": "public",
    "description": "Resets the state ",
    "lineNumber": 35,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 647,
    "kind": "member",
    "name": "state",
    "memberof": "src/components/views/home-view.js~HomeView",
    "longname": "src/components/views/home-view.js~HomeView#state",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "{\"refresh\": boolean, \"data\": *, \"refreshing\": *, \"profileData\": *}"
      ]
    }
  },
  {
    "__docId__": 649,
    "kind": "member",
    "name": "_setProfileImage",
    "memberof": "src/components/views/home-view.js~HomeView",
    "static": false,
    "longname": "src/components/views/home-view.js~HomeView#_setProfileImage",
    "access": "private",
    "description": "Sets the state to the profile data retrieved from the model.",
    "lineNumber": 56,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 650,
    "kind": "member",
    "name": "temporaryFilter",
    "memberof": "src/components/views/home-view.js~HomeView",
    "static": false,
    "longname": "src/components/views/home-view.js~HomeView#temporaryFilter",
    "access": "public",
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 652,
    "kind": "member",
    "name": "refreshState",
    "memberof": "src/components/views/home-view.js~HomeView",
    "static": false,
    "longname": "src/components/views/home-view.js~HomeView#refreshState",
    "access": "public",
    "description": "Refreshes the state of the component so new data is fetched.",
    "lineNumber": 91,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 653,
    "kind": "member",
    "name": "componentWillMount",
    "memberof": "src/components/views/home-view.js~HomeView",
    "static": false,
    "longname": "src/components/views/home-view.js~HomeView#componentWillMount",
    "access": "public",
    "description": "Triggers when a component or this component is mounted.",
    "lineNumber": 100,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 654,
    "kind": "member",
    "name": "componentWillUnmount",
    "memberof": "src/components/views/home-view.js~HomeView",
    "static": false,
    "longname": "src/components/views/home-view.js~HomeView#componentWillUnmount",
    "access": "public",
    "description": "Component is about to unmount, do any cleanup here.\nCall viewUnmounting in base class so it can do any cleanup for the view before calling the presenter destroy method",
    "lineNumber": 112,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 655,
    "kind": "member",
    "name": "_onRefresh",
    "memberof": "src/components/views/home-view.js~HomeView",
    "static": false,
    "longname": "src/components/views/home-view.js~HomeView#_onRefresh",
    "access": "private",
    "description": "Triggers a force refresh of the view",
    "lineNumber": 119,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 656,
    "kind": "member",
    "name": "_keyExtractor",
    "memberof": "src/components/views/home-view.js~HomeView",
    "static": false,
    "longname": "src/components/views/home-view.js~HomeView#_keyExtractor",
    "access": "private",
    "description": "Extracts the item id as a string.",
    "lineNumber": 129,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "item",
        "description": "An item being rendered"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": "The index of the item"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 657,
    "kind": "method",
    "name": "render",
    "memberof": "src/components/views/home-view.js~HomeView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/views/home-view.js~HomeView#render",
    "access": "public",
    "description": "Renders the screen",
    "lineNumber": 134,
    "params": [],
    "return": null
  },
  {
    "__docId__": 658,
    "kind": "file",
    "name": "src/components/views/login-view.js",
    "content": "import React, {Component} from 'react';\nimport { View, Text, StyleSheet, Image, PixelRatio, Alert, TouchableOpacity, Button, KeyboardAvoidingView, Platform, ActivityIndicator } from 'react-native';\nimport { TextInput } from 'react-native-paper';\nimport Icon from 'react-native-vector-icons/FontAwesome';\n\nimport { styles, text, colours, login_styles } from './stylesheets/login-styles';\n\nimport BaseView from './view';\nimport SafeArea from './helpers/safearea';\nimport LoginButton from './helpers/loginbutton';\nimport LoginPresenter from '../presenters/login-presenter';\n\nlet logo = require('../../assets/images/ppInvertedLogo.png');\n\n/**\n * Class for the Login view\n * @extends BaseView\n */\nclass LoginView extends BaseView {\n\t\n\tstatic navigationOptions = {header:null};\n\t\n\t/**\n\t * Create an instance of LoginView\n\t *\n\t * @constructor\n\t * @param {Object} props - Component properties\n\t */\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tusername: '',\n\t\t\tpassword: '',\n\t\t\tloaderVisible: false,\n\t\t};\n\t\tthis.LoginP = new LoginPresenter(this);\n\t}\n\n\t/**\n\t * Navigate to the tabs screen.\n\t */\n\tnavigateToTabs = () => {\n\t\tthis.setState({loaderVisible: false});\n\t\tthis.props.navigation.navigate('Tabs');\n\t}\n\n\t/**\n\t * Handle the click of the signup button.\n\t */\n\t_handleClick = () => {\n\t\tthis.setState({loaderVisible: true});\n\t\tif (this.LoginP.checkInput(this.state.username, this.state.password, this.reportError)) {\n\t\t\tthis.sendUpdate();\n\t\t}\n\t}\n\n\t/**\n\t * Handle the Twitter icon click.\n\t */\n\t_handleClickT = () => {\n\t\tif (Platform.OS !== 'ios' ) {\n\t\t\tconsole.log('clicked twitter')\n\t\t\tthis.LoginP.updateT(this.onError);\n\t\t} else {\n\t\t\tAlert.alert(\n\t\t\t\t'Twitter login on iOS is currently disabled',\n\t\t\t\t\"\",\n\t\t\t\t[\n\t\t\t\t\t{text: 'OK', onPress: () => {}},\n\t\t\t\t],\n\t\t\t\t{cancelable: false},\n\t\t\t);\n\t\t\t\n\t\t}\n\t}\n\n\t/**\n\t * Alert popup with a message.\n\t *\n\t * @param {string} message - An error message \n\t */\n\tonError = (message) => {\n\t\tAlert.alert(\n\t\t\tmessage,\n\t\t\t\"\",\n\t\t\t[\n\t\t\t\t{text: 'OK', onPress: () => {}},\n\t\t\t],\n\t\t\t{cancelable: false},\n\t\t);\n\t}\n\t\n\t/**\n\t * Handles a Facebook icon click.\n\t */\n\t_handleClickF = () => {\n\t\tif (Platform.OS !== 'ios' ) {\n\t\t\tconsole.log('clicked facebook')\n\t\t\tthis.LoginP.updateF(this.onError);\n\t\t} else {\n\t\t\tAlert.alert(\n\t\t\t\t'Facebook login on iOS is currently disabled',\n\t\t\t\t\"\",\n\t\t\t\t[\n\t\t\t\t\t{text: 'OK', onPress: () => {}},\n\t\t\t\t],\n\t\t\t\t{cancelable: false},\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Called if the user input username or password is invalid.\n\t * @param {Object} errmsg - the error message that corresponding to the problem.\n\t */\n\treportError = (errmsg) => {\n\t\tthis.setState({loaderVisible: false});\n\t\tAlert.alert(\n\t\t\t\t'Error',\n\t\t\t\terrmsg,\n\t\t\t\t[\n\t\t\t\t\t{text: 'OK', onPress: () => console.log('OK Pressed')},\n\t\t\t\t],\n\t\t\t\t{cancelable: false},\n\t\t\t);\n\t}\n\n\t/**\n\t * Send an update to the presenter\n\t */\n\tsendUpdate = () => {\n\t\t// Extract data from components\n\t\tlet new_data = {\n\t\t\tdata:\t{\n\t\t\t\tusername: this.state.username,\n\t\t\t\tpassword: this.state.password\n\t\t\t}\n\t\t}\n\t\tlet data = new_data;\n\t\tthis.LoginP.update(data);\n\t}\n\n\t/**\n\t * Refreshes the state of the component so new data is fetched.\n\t */\n\trefreshState = () => {\n\t\tthis.setState({\n\t\t\trefresh: !this.state.refresh\n\t\t});\n\t};\n\n\t/**\n\t * Handle an incorrect login by displaying an alert\n\t */\n\thandleLoginIncorrect = () => {\n\t\tthis.setState({loaderVisible: false});\n\t\tAlert.alert(\n\t\t\t'Error',\n\t\t\t'Username or Password is incorrect or email needs to be verified.',\n\t\t\t[\n\t\t\t\t{ text: \"Ok\", onPress: () => {}, style: \"ok\" },\n\t\t\t],\n\t\t\t{cancelable: false}\n\t\t);\n\t};\n\n\t/**\n\t * Component will unmount after this method is called, do any clean up here\n\t * Call viewUnmounting in base class so it can do any cleanup for the view before calling the presenter destroy method\n\t */\n\tcomponentWillUnmount = () => {\n\t\tthis.viewUnmounting(this.LoginP);\n\t}\n\n\t/**\n\t * Renders the main content on the screen.\n\t * Defined in a function because on Android we don't render the KeyboardAvoidingView\n\t */\n\trenderContent = () => {}\n\t// \t<View>\n\t// \t\t<View style={login_styles.centered}>\n\t// \t\t\t<Image source={logo} style={login_styles.image} resizeMode=\"contain\" />\n\t// \t\t</View>\n\t// \t\t<View style={login_styles.editGroup}>\n\t// \t\t\t<View style={login_styles.username}>\n\t// \t\t\t\t<TextInput\n\t// \t\t\t\t\tstyle={text.textInput}\n\t// \t\t\t\t\tlabel=\"Username\"\n\t// \t\t\t\t\ttextContentType='username'\n\t// \t\t\t\t\tautoCapitalize=\"none\"\n\t// \t\t\t\t\tvalue={this.state.username}\n\t// \t\t\t\t\tonChangeText={(username) => this.setState({username})}/>\n\t// \t\t\t</View>\n\t\t\t\t\n\t// \t\t\t<View style={login_styles.password}>\n\t// \t\t\t\t<TextInput\n\t// \t\t\t\t\tstyle={text.textInput}\n\t// \t\t\t\t\tlabel=\"Password\"\n\t// \t\t\t\t\ttextContentType='password'\n\t// \t\t\t\t\tsecureTextEntry\n\t// \t\t\t\t\tvalue={this.state.password}\n\t// \t\t\t\t\tonChangeText={(password) => this.setState({password})}/>\n\t// \t\t\t</View>\n\t\t\t\t\n\t// \t\t\t<View style={{marginTop: 30}}>\n\t// \t\t\t\t<LoginButton text=\"SIGN IN\" onPress={this._handleClick.bind(this)}/>\n\t// \t\t\t</View>\n\t// \t\t</View>\n\t// \t</View>\n\t// );\n\n\t/**\n\t * Renders the social media icons.\n\t */\n\t_renderSocialMedia = () => {}\n\t// \t\t<View style={login_styles.socialMedia}>\n\t// \t\t\t<Text style={login_styles.centerText}> Login With Social Account: </Text>\n\t// \t\t\t<View style={login_styles.socialIcons}>\n\t// \t\t\t\t<Icon.Button\n\t// \t\t\t\t\tname=\"facebook\"\n\t// \t\t\t\t\ttype=\"FontAwesome\"\n\t// \t\t\t\t\tcolor=\"#000000\"\n\t// \t\t\t\t\tbackgroundColor={'transparent'}\n\t// \t\t\t\t\tonPress={() => this._handleClickF()}\n\t// \t\t\t\t\tsize={30}\n\t// \t\t\t\t\tstyle={{marginRight: 10}}>\n\t// \t\t\t\t</Icon.Button>\n\t// \t\t\t\t<Icon.Button\n\t// \t\t\t\t\tname=\"twitter\"\n\t// \t\t\t\t\ttype=\"FontAwesome\"\n\t// \t\t\t\t\tcolor=\"#000000\"\n\t// \t\t\t\t\tbackgroundColor={'transparent'}\n\t// \t\t\t\t\tonPress={() => this._handleClickT()}\n\t// \t\t\t\t\tsize={30}\n\t// \t\t\t\t\tstyle={{marginLeft: 10}}>\n\t// \t\t\t\t</Icon.Button>\n\t// \t\t\t</View>\n\t// \t\t</View>\n\t// );\n\n\t/**\n\t * Extract data from the component's view and send an update to the presenter to do any logic before sending it to the model\n\t */\n\trender() {\n\t\t// return (\n\t\t// \t<View style={[styles.container]}>\n\t\t// \t\t<SafeArea overrideColour={colours.ppGrey} />\n\t\t// \t\t{\n\t\t// \t\t\tPlatform.OS === 'ios' &&\n\t\t// \t\t\t<KeyboardAvoidingView\n\t\t// \t\t\t\tstyle={styles.container}\n\t\t// \t\t\t\tbehavior=\"padding\"\n\t\t// \t\t\t\tenabled>\n\t\t// \t\t\t\t{this.renderContent()}\n\t\t// \t\t\t</KeyboardAvoidingView>\n\t\t// \t\t}\n\n\t\t// \t\t{\n\t\t// \t\t\tPlatform.OS !== 'ios' &&\n\t\t// \t\t\tthis.renderContent()\n\t\t// \t\t}\n\n\t\t// \t\t{this._renderSocialMedia()}\n\n\t\t// \t\t<View style={login_styles.bottom}>\n\t\t// \t\t\t<TouchableOpacity style={login_styles.signupButton} onPress={() => this.props.navigation.navigate('Signup')}>\n\t\t// \t\t\t\t<Text style={login_styles.signupText}>\n\t\t// \t\t\t\t\t{\"New Member?      SIGN UP!\"}\n\t\t// \t\t\t\t</Text>\n\t\t// \t\t\t</TouchableOpacity>\n\t\t// \t\t</View>\n\n\t\t// \t\t{\n\t\t// \t\t\tthis.state.loaderVisible &&\n\t\t// \t\t\t<View style={login_styles.loading} pointerEvents=\"none\">\n\t\t// \t\t\t\t<ActivityIndicator size='small' color=\"#0000ff\" />\n\t\t// \t\t\t</View>\n\t\t// \t\t}\n\t\t// \t</View>\n\t\t// );\n\t}\n}\n\nexport default LoginView;",
    "static": true,
    "longname": "/Users/seanr/Downloads/temp/src/components/views/login-view.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 659,
    "kind": "variable",
    "name": "logo",
    "memberof": "src/components/views/login-view.js",
    "static": true,
    "longname": "src/components/views/login-view.js~logo",
    "access": "public",
    "export": false,
    "importPath": "PedalPatrol/src/components/views/login-view.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 660,
    "kind": "class",
    "name": "LoginView",
    "memberof": "src/components/views/login-view.js",
    "static": true,
    "longname": "src/components/views/login-view.js~LoginView",
    "access": "public",
    "export": true,
    "importPath": "PedalPatrol/src/components/views/login-view.js",
    "importStyle": "LoginView",
    "description": "Class for the Login view",
    "lineNumber": 19,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 661,
    "kind": "member",
    "name": "navigationOptions",
    "memberof": "src/components/views/login-view.js~LoginView",
    "static": true,
    "longname": "src/components/views/login-view.js~LoginView.navigationOptions",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 662,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/components/views/login-view.js~LoginView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/views/login-view.js~LoginView#constructor",
    "access": "public",
    "description": "Create an instance of LoginView",
    "lineNumber": 29,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "Component properties"
      }
    ]
  },
  {
    "__docId__": 663,
    "kind": "member",
    "name": "state",
    "memberof": "src/components/views/login-view.js~LoginView",
    "static": false,
    "longname": "src/components/views/login-view.js~LoginView#state",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "{\"username\": *, \"password\": *, \"loaderVisible\": *}"
      ]
    }
  },
  {
    "__docId__": 664,
    "kind": "member",
    "name": "LoginP",
    "memberof": "src/components/views/login-view.js~LoginView",
    "static": false,
    "longname": "src/components/views/login-view.js~LoginView#LoginP",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 665,
    "kind": "member",
    "name": "navigateToTabs",
    "memberof": "src/components/views/login-view.js~LoginView",
    "static": false,
    "longname": "src/components/views/login-view.js~LoginView#navigateToTabs",
    "access": "public",
    "description": "Navigate to the tabs screen.",
    "lineNumber": 42,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 666,
    "kind": "member",
    "name": "_handleClick",
    "memberof": "src/components/views/login-view.js~LoginView",
    "static": false,
    "longname": "src/components/views/login-view.js~LoginView#_handleClick",
    "access": "private",
    "description": "Handle the click of the signup button.",
    "lineNumber": 50,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 667,
    "kind": "member",
    "name": "_handleClickT",
    "memberof": "src/components/views/login-view.js~LoginView",
    "static": false,
    "longname": "src/components/views/login-view.js~LoginView#_handleClickT",
    "access": "private",
    "description": "Handle the Twitter icon click.",
    "lineNumber": 60,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 668,
    "kind": "member",
    "name": "onError",
    "memberof": "src/components/views/login-view.js~LoginView",
    "static": false,
    "longname": "src/components/views/login-view.js~LoginView#onError",
    "access": "public",
    "description": "Alert popup with a message.",
    "lineNumber": 82,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "An error message"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 669,
    "kind": "member",
    "name": "_handleClickF",
    "memberof": "src/components/views/login-view.js~LoginView",
    "static": false,
    "longname": "src/components/views/login-view.js~LoginView#_handleClickF",
    "access": "private",
    "description": "Handles a Facebook icon click.",
    "lineNumber": 96,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 670,
    "kind": "member",
    "name": "reportError",
    "memberof": "src/components/views/login-view.js~LoginView",
    "static": false,
    "longname": "src/components/views/login-view.js~LoginView#reportError",
    "access": "public",
    "description": "Called if the user input username or password is invalid.",
    "lineNumber": 116,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "errmsg",
        "description": "the error message that corresponding to the problem."
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 671,
    "kind": "member",
    "name": "sendUpdate",
    "memberof": "src/components/views/login-view.js~LoginView",
    "static": false,
    "longname": "src/components/views/login-view.js~LoginView#sendUpdate",
    "access": "public",
    "description": "Send an update to the presenter",
    "lineNumber": 131,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 672,
    "kind": "member",
    "name": "refreshState",
    "memberof": "src/components/views/login-view.js~LoginView",
    "static": false,
    "longname": "src/components/views/login-view.js~LoginView#refreshState",
    "access": "public",
    "description": "Refreshes the state of the component so new data is fetched.",
    "lineNumber": 146,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 673,
    "kind": "member",
    "name": "handleLoginIncorrect",
    "memberof": "src/components/views/login-view.js~LoginView",
    "static": false,
    "longname": "src/components/views/login-view.js~LoginView#handleLoginIncorrect",
    "access": "public",
    "description": "Handle an incorrect login by displaying an alert",
    "lineNumber": 155,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 674,
    "kind": "member",
    "name": "componentWillUnmount",
    "memberof": "src/components/views/login-view.js~LoginView",
    "static": false,
    "longname": "src/components/views/login-view.js~LoginView#componentWillUnmount",
    "access": "public",
    "description": "Component will unmount after this method is called, do any clean up here\nCall viewUnmounting in base class so it can do any cleanup for the view before calling the presenter destroy method",
    "lineNumber": 171,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 675,
    "kind": "member",
    "name": "renderContent",
    "memberof": "src/components/views/login-view.js~LoginView",
    "static": false,
    "longname": "src/components/views/login-view.js~LoginView#renderContent",
    "access": "public",
    "description": "Renders the main content on the screen.\nDefined in a function because on Android we don't render the KeyboardAvoidingView",
    "lineNumber": 179,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 676,
    "kind": "member",
    "name": "_renderSocialMedia",
    "memberof": "src/components/views/login-view.js~LoginView",
    "static": false,
    "longname": "src/components/views/login-view.js~LoginView#_renderSocialMedia",
    "access": "private",
    "description": "Renders the social media icons.",
    "lineNumber": 215,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 677,
    "kind": "method",
    "name": "render",
    "memberof": "src/components/views/login-view.js~LoginView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/views/login-view.js~LoginView#render",
    "access": "public",
    "description": "Extract data from the component's view and send an update to the presenter to do any logic before sending it to the model",
    "lineNumber": 244,
    "params": [],
    "return": null
  },
  {
    "__docId__": 678,
    "kind": "file",
    "name": "src/components/views/map-view.js",
    "content": "import React, {Component} from 'react';\nimport {Platform, StyleSheet, Text, View, Button, Alert, TouchableOpacity, Dimensions, NativeModules, ScrollView} from 'react-native';\nimport {Icon} from 'react-native-elements';\nimport {default as RNMapView} from 'react-native-maps';\nimport { Marker, Callout, Polygon, Circle } from 'react-native-maps';\nimport SectionedMultiSelect from 'react-native-sectioned-multi-select';\nimport { GooglePlacesAutocomplete } from 'react-native-google-places-autocomplete';\n\nimport { styles, colours, map_styles, autocomplete_styles, STATUSBAR_HEIGHT } from './stylesheets/map-styles';\n\nimport MapPresenter from '../presenters/map-presenter';\nimport BaseView from './view';\nimport SafeArea from './helpers/safearea';\nimport ProfileButton from './helpers/profilebutton';\nimport ActionButton from './helpers/ActionButton/ActionButton';\nimport TimeUtil from '../../util/timeutility';\n\n/**\n * Class for the Map view\n * @extends BaseView\n */\nclass MapView extends BaseView {\n\n\t/**\n\t* Create an instance of LoginView\n\t*\n\t* @constructor\n\t* @param {Object} props - Component properties\n\t*/\n\tconstructor(props){\n\t   super(props);\n\t   this.MapP = new MapPresenter(this);\n\t   this.resetState();\n\t}\n\n\t/**\n\t * Resets the state with default variables\n\t */\n\tresetState = () => {\n\t\tthis.state = {\n\t\t\trefresh: true,\n\t\t\tcircleRadius : 500,\n\t\t\tx: {\n\t\t\t\tlatitude: 44.257424,\n\t\t\t\tlongitude: -76.5231,\n\t\t\t},\n\t\t\tshowCircle: false,\n\t\t\tshowMarker: false,\n\t\t\tmarkerCreated:[],\n\t\t\tmarkers: [],\n\t\t\tmarkerRefs: {},\n\t\t\ttempMarkers: [],\n\t\t\ttempMarkerRefs: [],\n\t\t\tfoundMarker: null,\n\t\t\tfoundCalloutOpened: false,\n\t\t\tselectedFilters: [0],\n\t\t\tprofileData: {},\n\t\t};\n\t}\n\n\t/**\n\t * Refreshes the state of the component so new data is fetched.\n\t */\n\trefreshState = () => {\n\t\tthis.setState({ \n\t\t\trefresh: !this.state.refresh\n\t\t});\n\t}\n\n\tcomponentWillMount = () => {\n\t\tthis._setProfileImage();\n\t}\n\n\t/**\n\t * Triggers when the component is mounted.\n\t */\n\tcomponentDidMount = () => {\n\t\tthis.MapP.forceRequestData();\n\t\tthis._setUserLocation();\n\t\tthis._setMarkers(this.state.selectedFilters);\n\t};\n\n\t/**\n\t * Component will receive new properties via the props attribute\n\t */\n\tcomponentWillReceiveProps = () => {\n\t\tconst { navigation } = this.props;\n\t\tconst data = navigation.getParam('data', 'NO-DATA');\n\t\tconst found = navigation.getParam('found', false);\n\t\t\n\t\tif (found) {\n\t\t\tconst foundMarker = this._createNewMarker(data);\n\t\t\tthis.setState({foundCalloutOpened: true});\n\t\t\tthis.state.tempMarkers = [foundMarker]; // We just overwrite because best to only keep track of one\n\t\t} else if (data !== 'NO-DATA') {\n\t\t\t// Only set the location if the marker wasn't clicked from the Alerts page\n\t\t\tthis._setLocationToMarkerItem(this.state.markerRefs, data, true);\n\t\t}\n\t}\n\n\t/**\n\t * Component is about to unmount, do any cleanup here.\n\t * Call viewUnmounting in base class so it can do any cleanup for the view before calling the presenter destroy method\n\t */ \n\tcomponentWillUnmount = () => {\n\t\tthis.viewUnmounting(this.MapP);\n\t}\n\n\t/**\n\t * Component's state has updated\n\t */\n\tcomponentDidUpdate = () => {\n\t\tif (this.state.tempMarkers.length !== 0 && this.state.foundCalloutOpened) {\n\t\t\tthis.setState({foundCalloutOpened: false})\n\t\t\tthis._setLocationToMarkerItem(this.state.tempMarkerRefs, this.state.tempMarkers[0].data, true);\n\t\t}\n\t}\n\n\t/**\n\t * Sets markers according to the filter, if any, that is set.\n\t *\n\t * @param {List} selectedFilters - A list of selected filters. Indices correspond to places in the list in the 'filters' constant\n\t */\n\t_setMarkers = (selectedFilters) => {\n\t\tthis.setState({\n\t\t\tmarkers : this.MapP.filterMarkers(this.MapP.getData(), selectedFilters.length > 0 ? filters[selectedFilters[0]] : null)\n\t\t});\t\t\n\t}\n\n\n\t/**\n\t * Add the new selected items to the state and update\n\t *\n\t * @param {List} selectedFilters - List of selected items\n\t */\n\t_onSelectedItemsChange = (selectedFilters) => {\n\t\tthis.setState({ selectedFilters });\n\t\tthis._setMarkers(selectedFilters);\n\t} \n\n\t/**\n\t * Creates a new marker from the data.\n\t *\n\t * @param {Object} data - The data from the marker to be created\n\t * @return {Object} A new marker object with data, key and coordinate properties\n\t */\n\t_createNewMarker = (data) => {\n\t\tconst newMarker = {\n\t\t\t\tdata: data,\n\t\t\t\tkey: data.id,\n\t\t\t\tcoordinate: {\n\t\t\t\t\tlatitude: data.found_latitude,\n\t\t\t\t\tlongitude: data.found_longitude,\n\t\t\t\t}\n\t\t}\n\n\t\treturn newMarker;\n\t}\n\n\t/**\n\t * Sets the location of the map to the marker's position and open its callout.\n\t *\n\t * @param {List} refs - A list of marker references\n\t * @param {Object} item - The marker's data\n\t * @param {Boolean} shouldReshowCallout - If the callout should be triggered twice on a delay. default=false\n\t */\n\t_setLocationToMarkerItem = (refs, item, shouldReshowCallout=false) => {\n\t\tif (item.hasOwnProperty('longitude') && item.hasOwnProperty('latitude')) {\n\t\t\tconst location = {\n\t\t\t\tlatitude: item.latitude,\n\t\t\t\tlongitude: item.longitude,\n\t\t\t\tlatitudeDelta: 0.0922,\n\t\t\t\tlongitudeDelta: 0.0421,\n\t\t\t};\n\t\t\tthis.onRegionChange(location);\n\t\t\trefs[item.id].showCallout();\n\n\t\t\t// Sometimes the callouts don't popup immediately so we have to call it again after 50 milliseconds\n\t\t\tif (shouldReshowCallout) {\n\t\t\t\tsetTimeout(() => {refs[item.id].showCallout();}, 50);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Sets the user's location to their current location.\n\t */\n\t_setUserLocation = () => {\n\t\tthis.MapP.getUserLocation().then(position => {\n\t\t\tif (position) {\n\t\t\t\tconst location = {\n\t\t\t\t\tlatitude: position.coords.latitude,\n\t\t\t\t\tlongitude: position.coords.longitude,\n\t\t\t\t\tlatitudeDelta: 0.0922,\n\t\t\t\t\tlongitudeDelta: 0.0421,\n\t\t\t\t};\n\t\t\t\tthis.setState({\n\t\t\t\t\tx: location,\n\t\t\t\t\tuser: location,\n\t\t\t\t\tregion: location\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Render \"save/delete\" button after clicking \"create lost report\" button\n\t */\n\t// renderSDButton(){\n\t// \tif (this.state.showButton){\n\t// \t\treturn(\n\t// \t\t<View style={map_styles.saveDeleteButton}>\n\t// \t\t\t<View style={map_styles.Buttons}>\n\t// \t\t\t<Button\n\t// \t\t\t\tonPress={()=>{this.sendNewMarker()}}\n\t// \t\t\t\ttitle=\"save\"/></View>\n\t// \t\t\t   <View style={map_styles.Buttons}>\n\t// \t\t\t<Button\n\t// \t\t\t\tonPress={()=>{\n\t// \t\t\t\t\tthis.deleteItem()\n\t// \t\t\t\t}}\n\t// \t\t\t\ttitle=\"delete\"/></View>\n\t// \t\t</View>\n\t// \t\t)\n\t// \t}\n\t// }\n\n/**\n\t* Render a searchbar for user to search location after clicking \"search location\" button\n\t*/\n\trenderSearchbar = () => {\n\t\tif (this.state.showSearchbar){\n\t\t\t// return (\n\t\t\t// \t<GooglePlacesAutocomplete\n\t\t\t// \t\t\tplaceholder='Enter location'\n\t\t\t// \t\t\tminLength={2} // minimum length of text to search\n\t\t\t// \t\t\tautoFocus={false}\n\t\t\t// \t\t\treturnKeyType={'search'} // Can be left out for default return key https://facebook.github.io/react-native/docs/textinput.html#returnkeytype\n\t\t\t// \t\t\tlistViewDisplayed='true'     // true/false/undefined\n\t\t\t// \t\t\tfetchDetails={true}\n\t\t\t// \t\t\tonPress={(data, details = null) => { // 'details' is provided when fetchDetails = true\n\t\t\t// \t\t\t\tconsole.log(data, details);\n\t\t\t// \t\t\t\tthis.setState({\n\t\t\t// \t\t\t\t\tshowSearchbar:false,\n\t\t\t// \t\t\t\t\tregion: { \n\t\t\t// \t\t\t\t\t\tlatitude: details.geometry.location.lat,\n\t\t\t// \t\t\t\t\t\tlongitude: details.geometry.location.lng,\n\t\t\t// \t\t\t\t\t\tlatitudeDelta: 0.0922,\n\t\t\t// \t\t\t\t\t\tlongitudeDelta: 0.0421,\n\t\t\t// \t\t\t\t\t}\n\t\t\t// \t\t\t\t});\n\t\t\t// \t\t\t}}\n\t\t\t// \t\t\tgetDefaultValue={() => ''}\n\t\t\t// \t\t\tquery={{\n\t\t\t// \t\t\t\t// available options: https://developers.google.com/places/web-service/autocomplete\n\t\t\t// \t\t\t\tkey: 'AIzaSyCS9j9HB64sW9w8LgvtxVET6LqoET78OcA',\n\t\t\t// \t\t\t\tlanguage: 'en', // language of the results\n\t\t\t// \t\t\t}}\n\t\t\t// \t\t\tstyles={autocomplete_styles}\n\t\t\t// \t\t\tdebounce={200} // debounce the requests in ms. Set to 0 to remove debounce. By default 0ms.\n\t\t\t// \t\t  />\n\n\t\t\t// );\n\t\t}\n\t}\n\n\t/**\n\t *  Save data of created marker or circle after clicking save button\n\t */\n\tsaveItem(){\n\t\tif (this.state.showCircle){\n\t\t\tthis.sendCircle();\n\t\t\tthis.setState({\n\t\t\t\tshowCircle: false,\n\t\t\t\tshowMarker: false\n\t\t\t});\n\t\t}\n\t\tif (this.state.showMarker){\n\t\t\tthis.sendNewMarker();\n\t\t\tthis.setState({\n\t\t\t\tshowCircle: false,\n\t\t\t\tshowMarker: false\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Delete created marker or circle after clicking delete button\n\t */\n\tdeleteItem(){\n\t\tthis.setState()\n\t\tif (this.state.showCircle){\n\t\t\tthis.setState({\n\t\t\t\tx:{\n\t\t\t\t\tlatitude: 44.257424,\n\t\t\t\t\tlongitude: -76.5231, \n\t\t\t\t},\n\t\t\t\tcircleRadius: 500, \n\t\t\t\tshowCircle: false,\n\t\t\t\tshowMarker: false\n\t\t\t});\n\t\t} else if (this.state.showMarker) {\n\t\t\tthis.setState({showMarker:false, showCircle: false, markerCreated:[]})\n\t\t}\n\n\t}\n\n\t/**\n\t * Render buttons that can adjust circle's radius\n\t */\n\t// renderForCircle(){\n\t// \tif (this.state.showCircle){\n\t// \t\treturn(\n\t// \t\t<View style={map_styles.circleRadiusButton}>\n\t// \t\t\t<View style={map_styles.Buttons}>\n\t// \t\t\t<Button\n\t// \t\t\t\tonPress={()=>{this.setState({circleRadius: this.state.circleRadius+200})}}\n\t// \t\t\t\ttitle=\"more\"/></View>\n\t// \t\t\t   <View style={map_styles.Buttons}>\n\t// \t\t\t<Button\n\t// \t\t\t\tonPress={()=>{if (this.state.circleRadius>200){this.setState({circleRadius: this.state.circleRadius-200})}}}\n\t// \t\t\t\ttitle=\"less\"/></View>\n\t// \t\t</View>\n\t// \t\t)\n\t// \t}\n\t// }\n\n\t/**\n\t * Render a circle to set notification receiving area\n\t */\n\trenderCircle(){\n\t\tif (this.state.showCircle){\n\t\t\t// return (\n\t\t\t// \t<Circle\n\t\t\t// \t\tcenter = {{latitude:this.state.x.latitude,longitude:this.state.x.longitude}}\n\t\t\t// \t\tradius = {this.state.circleRadius}\n\t\t\t// \t\tstrokeColor = \"#4F6D7A\"\n\t\t\t// \t\tstrokeWidth = { 2 }\n\t\t\t// \t\tfillColor = 'rgba(200,0,0,0.5)'/>\n\t\t\t// )\n\t\t}\n\t}\n\n\t/**\n\t * Save data of circle to notification settings\n\t */\n\tsendCircle(){\n\t\t//nothing\n\t\tnewData = {\n\t\t\tdata: {\n\t\t\t\tcircleLatitude: this.state.x.latitude,\n\t\t\t\tcircleLongitude: this.state.x.longitude,\n\t\t\t\tradius: this.state.circleRadius,\n\t\t\t}\n\t\t}\n\t\tthis.MapP.updateCircle(newData);\n\t\t// console.log(newData);\n\t}\n\n\t/**\n\t * Save data of created marker to report lost page\n\t */\n\tsendNewMarker() {\n\t\tnewData={\n\t\t\tdata:\n\t\t\t\t{\n\t\t\t\t\tlatitude: this.state.markerCreated[0].coordinate.latitude,\n\t\t\t\t\tlongitude: this.state.markerCreated[0].coordinate.longitude,\n\t\t\t\t}\n\t\t}\n\t\tthis.navigate('ReportLost', newData);\n\t}\n\n\t/**\n\t *  Long press the map to change the coordinate of circle\n\t *\n\t * @param {Object} e - The event of long press on the map\n\t */\n\tsetCircleLat(e) {\n\t\tlet cor = e.nativeEvent.coordinate;\n\t\tif (this.state.showCircle){\n\t\t\tthis.setState({\n\t\t\t\tx: {\n\t\t\t\t\tlatitude: cor.latitude,\n\t\t\t\t\tlongitude: cor.longitude,\n\t\t\t\t}\n\n\t\t\t})\n\t\t}\n\t}\n\n\t/**\n\t * handle click event after clicking \"create marker\" button\n\t */\n\t_onPinMarkerPress=()=> {\n\t\tif (this.state.showMarker) {\n\t\t\tthis.setState({\n\t\t\t\tshowMarker: false,\n\t\t\t\tshowCircle: false,\n\t\t\t\tmarkerCreated: []\n\t\t\t});\n\t\t\tthis.circleABRef.reset();\n\t\t} else {\n\t\t\tthis.setState({\n\t\t\t\tshowMarker: true,\n\t\t\t\tshowCircle: false,\n\t\t\t\tmarkerCreated:  [this.newMarker(this.state.region.latitude,this.state.region.longitude)],\n\t\t\t});\n\t\t\tthis.circleABRef.reset();\n\t\t}\n\t}\n\n\t/**\n\t * helper function of _onPinMarkerPress\n\t *\n\t * @param {Integer} latitude and longitude of a marker\n\t */\n\tnewMarker = (lat,long) => {\n\t\tconst key = this.state.markers.length-1\n\t\treturn({key, coordinate: {latitude: lat,longitude: long}});\n\t};\n\n\t/**\n\t *  Change region state as moving the map\n\t *\n\t * @param {region} A presenter class instance\n\t */\n\tonRegionChange = (region) => {\n\t  this.setState({region: region });\n\t};\n\n\t/**\n\t * Sets the state to the profile data retrieved from the model.\n\t */\n\t_setProfileImage = () => {\n\t\tthis.MapP.getProfileImage((result) => this.setState({profileData: result}));\n\t}\n\n\t/**\n\t * Get the string to display from the colours list.\n\t *\n\t * @param {List} colours - A list of colours\n\t * @return {string} A string obtained from the colours in the list\n\t */\n\t_getColourString = (colours) => {\n\t\tlet colourString = '';\n\t\tif (colours != null && colours != undefined) {\n\t\t\tcolourString = 'Colour';\n\t\t\tcolourString = colourString + ((colours.length > 1) ? \"s: \" : \": \") + colours.join(', ');\n\t\t}\n\t\treturn colourString\n\t}\n\n\t/**\n\t * Renders the callout for a marker.\n\t *\n\t * @param {Object} item - The data to display for a marker\n\t */\n\t_renderCallout = (item) => {}\n\t// \t<Callout onPress={() => {this.navigate('BikeDetails', item.data)}}>\n\t// \t\t<ScrollView>\n\t// \t\t\t<ScrollView horizontal>\n\t// \t\t\t\t<View style={map_styles.calloutColumn}>\n\t// \t\t\t\t\t<View style={map_styles.calloutRow}>\n\t// \t\t\t\t\t\t<Text style={map_styles.brandText} numberOfLines={1} ellipsizeMode ={'tail'}>\n\t// \t\t\t\t\t\t\t{item.data.brand == undefined || item.data.brand === '' ? 'Brand Unknown' : item.data.brand}\n\t// \t\t\t\t\t\t</Text>\n\t// \t\t\t\t\t\t<Text numberOfLines={1} ellipsizeMode={'tail'}>\n\t// \t\t\t\t\t\t{'   '}\n\t// \t\t\t\t\t\t</Text>\n\t// \t\t\t\t\t\t<View style={map_styles.timeago}>\n\t// \t\t\t\t\t\t\t<Text style={[map_styles.mapText, map_styles.timeagoText]} numberOfLines={1} ellipsizeMode ={'tail'}>\n\t// \t\t\t\t\t\t\t\t{item.data.timeago}\n\t// \t\t\t\t\t\t\t</Text>\n\t// \t\t\t\t\t\t</View>\n\t// \t\t\t\t\t</View>\n\t// \t\t\t\t\t{\n\t// \t\t\t\t\t\titem.data.model != undefined && item.data.model !== '' && \n\t// \t\t\t\t\t\t<Text style={map_styles.mapText}>\n\t// \t\t\t\t\t\t\t{item.data.model != '' ? \"Model: \" + item.data.model : ''}\n\t// \t\t\t\t\t\t</Text>\n\t// \t\t\t\t\t}\n\t// \t\t\t\t\t{\n\t// \t\t\t\t\t\titem.data.colour != undefined && item.data.colour.length !== 0 &&\n\t// \t\t\t\t\t\t<Text style={map_styles.mapText}>\n\t// \t\t\t\t\t\t\t{this._getColourString(item.data.colour)}\n\t// \t\t\t\t\t\t</Text>\n\t// \t\t\t\t\t}\n\t// \t\t\t\t</View>\n\t// \t\t\t</ScrollView>\n\t// \t\t</ScrollView>\n\t// \t</Callout>\n\t// );\n\n\t/**\n\t * Renders the save action button\n\t */\n\t_renderSaveActionButton = () => {}\n\t// \t<ActionButton.Item\n\t// \t\tonPress={()=>{this.saveItem(); this.circleABRef.reset(); this.pinABRef.reset();}}\n\t// \t\tbuttonColor={colours.ppPinGreen}\n\t// \t\tstyle={map_styles.iconButton}\n\t// \t\ttitle=\"Save\">\n\t// \t\t<Icon name=\"check\" type=\"font-awesome\" size={22} color={colours.ppWhite} />\n\t// \t</ActionButton.Item>\n\t// );\n\n\t/**\n\t * Renders the cancel action button\n\t */\n\t_renderCancelActionButton = () => {}\n\t// \t<ActionButton.Item\n\t// \t\tonPress={()=>{this.deleteItem(); this.circleABRef.reset(); this.pinABRef.reset();}}\n\t// \t\tbuttonColor={colours.ppPinRed}\n\t// \t\tstyle={map_styles.iconButton}\n\t// \t\ttitle=\"Cancel\">\n\t// \t\t<Icon name=\"times\" type=\"font-awesome\" size={22} color={colours.ppWhite} />\n\t// \t</ActionButton.Item>\n\t// );\n\t\n\t/**\n\t * Renders the action button icon pin.\n\t */\n\t_renderActionButtonPinIcon = () => {}\n\t// \t<Icon name=\"pin-drop\" type=\"MaterialIcons\" size={35} color={this.state.showMarker ? colours.ppWhite : colours.ppBlue} />\n\t// );\n\n\t/**\n\t * Renders the action button add icon.\n\t */\n\t_renderActionButtonAddIcon = () => {}\n\t// \t<Icon name=\"circle-o-notch\" type=\"font-awesome\" size={35} color={this.state.showCircle ? colours.ppWhite : colours.ppBlue}/>\n\t// );\n\n\t/**\n\t * Toggle the notification area.\n\t */\n\t_toggleCircle = () => {\n\t\tif (this.state.showCircle) {\n\t\t\tthis.setState({\n\t\t\t\tshowCircle: false, showMarker: false\n\t\t\t});\n\t\t\tthis.pinABRef.reset();\n\t\t} else {\n\t\t\tthis.setState({showCircle: true, showMarker:false, markerCreated:[]});\n\t\t\tthis.pinABRef.reset();\n\t\t}\n\t}\n\n\t/**\n\t * Triggers after a marker being dragged has stopped being dragged.\n\t *\n\t * @param {Object} coord - The coordinate position of the marker\n\t */\n\tonMarkerDragEnd = (coord) => {\n\t\tconst { latLng } = coord;\n\t    const lat = latLng.lat();\n\t    const lng = latLng.lng();\n\t\tconst marker = this.state.markerCreated;\n\t\tmarker[0].coordinate = { latitude: lat, longitude: lng };\n\n\t\tthis.setState({markerCreated: marker});\n\t}\n\n\t/**\n\t * Navigate to a page with a title.\n\t * This method is used over the commented out line below because successive touches of a bike item\n\t * would not add the data because data is only received in process in the componentWillMount function.\n\t * So adding the 'key' property to navigate makes it see that the new page is unique.\n\t *\n\t * @param {string} screen - The route to navigate to. See navigation.js stacks and screens\n\t */\n\tnavigate = (screen, data) => {\n\t\tthis.props.navigation.navigate({\n\t\t\trouteName: screen,\n\t\t\tparams: {\n\t\t\t\tdata: data,\n\t\t\t\tfrom: 'Map'\n\t\t\t},\n\t\t\tkey: screen + TimeUtil.getDateTime()\n\t\t});\n\t}\n\n\t/**\n\t * Extract data from the component's view and send an update to the presenter to do any logic before sending it to the model\n\t */\n\trender() {\n\t\tconst { height: windowHeight, width: windowWidth } = Dimensions.get('window');\n\t\tconst varTop = windowHeight - 100;\n\t\tconst highestIcon = 50;\n\t\tconst hitSlop = {\n\t\t\ttop: 15,\n\t\t\tbottom: 15,\n\t\t\tleft: 15,\n\t\t\tright: 15,\n\t\t}\n\t\tlet bbStyle = (vheight, start=false) => {\n\t\t\tlet style = {\n\t\t\t\tposition: 'absolute',\n\t\t\t\ttop: vheight-20,\n\t\t\t\tleft: start ? 5 : windowWidth-60,\n\t\t\t\tright: start ? 5 : windowWidth-60,\n\t\t\t\twidth: map_styles.iconButton.width,\n\t\t\t\tbackgroundColor: 'transparent',\n\t\t\t\talignItems: start ? 'flex-start' : 'flex-end',\n\t\t\t\talignSelf: start ? 'flex-start' : 'flex-end',\n\t\t\t};\n\t\t\treturn style;\n\t\t}\n\t\t\n\n\t// \treturn (\n\t// \t\t\t<View style={{ flex: 1 }}>\n\t// \t\t\t\t{\n\t// \t\t\t\t\tthis.state.showSearchbar && \n\t// \t\t\t\t\t<SafeArea overrideColour={colours.ppGrey}/>\n\t// \t\t\t\t}\n\n\t// \t\t\t\t<RNMapView \n\t// \t\t\t\t\tstyle={{flex:1}}\n\t// \t\t\t\t\tregion={this.state.region}\n\t// \t\t\t\t\tstyle={map_styles.map}\n\t// \t\t\t\t\tshowsUserLocation={true}\n\t// \t\t\t\t\tshowsMyLocationButton={true}\n\t// \t\t\t\t\trotateEnabled={true}\n\t// \t\t\t\t\tonRegionChangeComplete={this.onRegionChange.bind(this)}\n\t// \t\t\t\t\tonLongPress = {e => this.setCircleLat(e)}\n // onPress = {() => {this.setState({showSearchbar:false})}}>\n\t// \t\t\t\t\t{this.state.markers.map(marker => (\n\t// \t\t\t\t\t\t<Marker \n\t// \t\t\t\t\t\t\t{...marker} \n\t// \t\t\t\t\t\t\tref={(ref) => this.state.markerRefs[marker.key] = ref}\n\t// \t\t\t\t\t\t\tpinColor={marker.data.stolen ? colours.ppPinRed : colours.ppPinGreen}>\n\t// \t\t\t\t\t\t\t{this._renderCallout(marker)}\n\t// \t\t\t\t\t\t</Marker>\n\t// \t\t\t\t\t))}\n\t// \t\t\t\t\t{this.state.tempMarkers.map(marker => (\n\t// \t\t\t\t\t\t<Marker \n\t// \t\t\t\t\t\t\t{...marker} \n\t// \t\t\t\t\t\t\tref={(ref) => this.state.tempMarkerRefs[marker.key] = ref}\n\t// \t\t\t\t\t\t\tpinColor={marker.data.stolen ? colours.ppPinRed : colours.ppPinGreen}>\n\t// \t\t\t\t\t\t\t{this._renderCallout(marker)}\n\t// \t\t\t\t\t\t</Marker>\n\t// \t\t\t\t\t))}\n\t// \t\t\t\t\t{this.state.markerCreated.map(marker => (<Marker draggable{...marker} onDragend={(t, map, coord) => this.onMarkerDragEnd(coord)} />))}\n\t// \t\t\t\t\t{this.renderCircle(this)}\n\t// \t\t\t\t</RNMapView>\n\n\t// \t\t\t\t{this.renderSearchbar()}\n\n\t// \t\t\t\t{/* Height of search bar container covers the profile button and the search button so we don't */}\n\t// \t\t\t\t{/* need to use this.state.showSearchbar to block rendering. If we block rendering with that, then */}\n\t// \t\t\t\t{/* profile button will re-render and there will be a visible flicker of the profile picture. */}\n\n\t// \t\t\t\t<View style={[bbStyle(highestIcon, true), {zIndex: 11, width: map_styles.iconButton.width+2}]}>\n\t// \t\t\t\t\t<ProfileButton\n\t// \t\t\t\t\t\thitSlop={hitSlop}\n\t// \t\t\t\t\t\tprofilePicture={this.state.profileData.profilePicture}\n\t// \t\t\t\t\t\tnumNotifications={this.MapP.getNotificationCount()}/>\n\t// \t\t\t\t</View>\n\n\t// \t\t\t\t<View style={bbStyle(highestIcon)}>\n\t// \t\t\t\t\t<TouchableOpacity \n\t// \t\t\t\t\t\tstyle={map_styles.iconButton} \n\t// \t\t\t\t\t\taccessibilityLabel=\"Search\"\n\t// \t\t\t\t\t\thitSlop={hitSlop}\n\t// \t\t\t\t\t\tonPress={() => {this.setState({showSearchbar:true})}}>\n\t// \t\t\t\t\t\t<Icon name=\"search\" type=\"MaterialIcons\" size={35} color={colours.ppBlue} />\n\t// \t\t\t\t\t</TouchableOpacity>\n\t// \t\t\t\t</View>\n\n\t// \t\t\t\t<View style={bbStyle(125)}>\n\t// \t\t\t\t\t<TouchableOpacity \n\t// \t\t\t\t\t\tstyle={map_styles.iconButton} \n\t// \t\t\t\t\t\taccessibilityLabel=\"Filter\"\n\t// \t\t\t\t\t\thitSlop={hitSlop}\n\t// \t\t\t\t\t\tonPress={() => this.sectionedMultiSelect._toggleSelector()}>\n\t// \t\t\t\t\t\t<Icon name=\"filter-list\" type=\"MaterialIcons\" size={35} color={colours.ppBlue} />\n\t// \t\t\t\t\t</TouchableOpacity>\n\t\t\t\t\t\t\n\t// \t\t\t\t\t{/* This is hidden */}\n\t// \t\t\t\t\t<SectionedMultiSelect\n\t// \t\t\t\t\t\tstyle={{zIndex: -5}}\n\t// \t\t\t\t\t\titems={filters}\n\t// \t\t\t\t\t\tdisplayKey='name'\n\t// \t\t\t\t\t\tconfirmText='Cancel'\n\t// \t\t\t\t\t\tuniqueKey={'id'}\n\t// \t\t\t\t\t\tcolors={{ primary: this.state.selectedFilters.length ? 'forestgreen' : 'crimson' }}\n\t// \t\t\t\t\t\tselectText=''\n\t// \t\t\t\t\t\thideSelect\n\t// \t\t\t\t\t\tshowDropDowns\n\t// \t\t\t\t\t\tsingle\n\t// \t\t\t\t\t\tshowChips={false}\n\t// \t\t\t\t\t\talwaysShowSelectText={false}\n\t// \t\t\t\t\t\tshowCancelButton={false}\n\t// \t\t\t\t\t\tonSelectedItemsChange={this._onSelectedItemsChange}\n\t// \t\t\t\t\t\tselectedItems={this.state.selectedFilters}\n\t// \t\t\t\t\t\tref={(SectionedMultiSelect) => this.sectionedMultiSelect = SectionedMultiSelect}/>\n\t// \t\t\t\t</View>\n\n\t// \t\t\t\t<View style={[bbStyle(varTop-map_styles.iconButton.height-35), {marginLeft: 10}]}>\n\t// \t\t\t\t\t<ActionButton\n\t// \t\t\t\t\t\tactive={this.state.showMarker}\n\t// \t\t\t\t\t\tbuttonColor={colours.ppWhite}\n\t// \t\t\t\t\t\tbtnOutRange={colours.ppBlue}\n\t// \t\t\t\t\t\tstyle={map_styles.iconButton}\n\t// \t\t\t\t\t\tradius={65}\n\t// \t\t\t\t\t\tautoInactive={false}\n\t// \t\t\t\t\t\tposition={'right'}\n\t// \t\t\t\t\t\tstartDegree={0}\n\t// \t\t\t\t\t\trefer={(ref) => this.pinABRef = ref}\n\t// \t\t\t\t\t\tsize={map_styles.iconButton.width}\n\t// \t\t\t\t\t\ticon={this._renderActionButtonPinIcon()}\n\t// \t\t\t\t\t\tonPress={this._onPinMarkerPress}>\t\t\t\t\t\t\t\n\t// \t\t\t\t\t\t{this._renderSaveActionButton()}\n\t// \t\t\t\t\t\t{this._renderCancelActionButton()}\n\t// \t\t\t\t\t</ActionButton>\n\t// \t\t\t\t</View>\n\n\t// \t\t\t\t<View style={[bbStyle(varTop-map_styles.iconButton.height*2-37*3), {marginLeft: 10}]}>\n\t// \t\t\t\t\t<ActionButton\n\t// \t\t\t\t\t\tactive={this.state.showCircle}\n\t// \t\t\t\t\t\tbuttonColor={colours.ppWhite}\n\t// \t\t\t\t\t\tbtnOutRange={colours.ppBlue}\n\t// \t\t\t\t\t\tstyle={map_styles.iconButton}\n\t// \t\t\t\t\t\tradius={65}\n\t// \t\t\t\t\t\tautoInactive={false}\n\t// \t\t\t\t\t\tposition={'right'}\n\t// \t\t\t\t\t\tstartDegree={90}\n\t// \t\t\t\t\t\trefer={(ref) => this.circleABRef = ref}\n\t// \t\t\t\t\t\tsize={map_styles.iconButton.width}\n\t// \t\t\t\t\t\ticon={this._renderActionButtonAddIcon()}\n\t// \t\t\t\t\t\tonPress={this._toggleCircle}>\n\t// \t\t\t\t\t\t<ActionButton.Item\n\t// \t\t\t\t\t\t\tonPress={()=>{if (this.state.circleRadius>200){this.setState({circleRadius: this.state.circleRadius-200})}}}\n\t// \t\t\t\t\t\t\tbuttonColor={colours.ppBlue}\n\t// \t\t\t\t\t\t\tstyle={map_styles.iconButton}\n\t// \t\t\t\t\t\t\ttitle=\"Less\">\n\t// \t\t\t\t\t\t\t<Icon name=\"minus\" type=\"font-awesome\" size={22} color={colours.ppWhite} />\n\t// \t\t\t\t\t\t</ActionButton.Item>\n\t// \t\t\t\t\t\t<ActionButton.Item\n\t// \t\t\t\t\t\t\tonPress={()=>{this.setState({circleRadius: this.state.circleRadius+200})}}\n\t// \t\t\t\t\t\t\tbuttonColor={colours.ppBlue}\n\t// \t\t\t\t\t\t\tstyle={map_styles.iconButton}\n\t// \t\t\t\t\t\t\ttitle=\"More\">\n\t// \t\t\t\t\t\t\t<Icon name=\"plus\" type=\"font-awesome\" size={22} color={colours.ppWhite} />\n\t// \t\t\t\t\t\t</ActionButton.Item>\n\t// \t\t\t\t\t\t{this._renderSaveActionButton()}\n\t// \t\t\t\t\t\t{this._renderCancelActionButton()}\n\t// \t\t\t\t\t</ActionButton>\n\t// \t\t\t\t</View>\n\n\t// \t\t\t\t<View style={bbStyle(varTop)}>\n\t// \t\t\t\t\t<TouchableOpacity\n\t// \t\t\t\t\t\thitSlop={hitSlop}\n\t// \t\t\t\t\t\taccessibilityLabel=\"Current Location\"\n\t// \t\t\t\t\t\tstyle={map_styles.iconButton}\n\t// \t\t\t\t\t\tonPress={ () => this._setUserLocation() }>\n\t// \t\t\t\t\t\t<Icon name=\"location-arrow\" type=\"font-awesome\" size={20} color={colours.ppBlue} />\n\t// \t\t\t\t\t</TouchableOpacity>\n\t// \t\t\t\t</View>\n\n\t// \t\t\t\t{/*this.renderSDButton(this)*/}\n\t// \t\t\t\t{/*this.renderForCircle(this)*/}\n\t// \t\t\t</View>\n\t// \t);\n\t}\n}\n\n/* <TouchableOpacity \n\t\t\t\t\t\t\tstyle={map_styles.iconButton} \n\t\t\t\t\t\t\taccessibilityLabel=\"Lost Report\"\n\t\t\t\t\t\t\thitSlop={hitSlop}\n\t\t\t\t\t\t\tonPress={this._onPinMarkerPress}>\n\t\t\t\t\t\t\t<Icon name=\"pin-drop\" type=\"MaterialIcons\" size={35} color={colours.ppBlue} />\n\t\t\t\t\t\t</TouchableOpacity> */\n\n\t\t/*<TouchableOpacity \n\t\t\t\t\t\t\tstyle={map_styles.iconButton} \n\t\t\t\t\t\t\taccessibilityLabel=\"Receiving Area\"\n\t\t\t\t\t\t\thitSlop={hitSlop}\n\t\t\t\t\t\t\tonPress={()=>{this.setState({showCircle: true,showButton:true,showMarker:false,markerCreated:[]})}}>\n\t\t\t\t\t\t\t<Icon name=\"add-circle\" type=\"MaterialIcons\" size={35} color={colours.ppBlue} />\n\t\t\t\t\t\t</TouchableOpacity> */\n\nexport default MapView;\n\nconst filters = [\n\t{\n\t\tid: 0,\n\t\tname: 'None'\n\t},\n\t{\n\t\tid: 1,\n\t\tname: '< 1 min ago',\n\t},\n\t{\n\t\tid: 2,\n\t\tname: '< 1 hour ago',\n\t},\n\t{\n\t\tid: 3,\n\t\tname: '< 12 hours ago',\n\t},\n\t{\n\t\tid: 4,\n\t\tname: '< 1 day ago',\n\t},\n\t{\n\t\tid: 5,\n\t\tname: '< 7 days ago',\n\t},\n\t{\n\t\tid: 6,\n\t\tname: '< 1 month ago',\n\t},\n\t{\n\t\tid: 7,\n\t\tname: '< 1 year ago',\n\t}\n]",
    "static": true,
    "longname": "/Users/seanr/Downloads/temp/src/components/views/map-view.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 679,
    "kind": "variable",
    "name": "filters",
    "memberof": "src/components/views/map-view.js",
    "static": true,
    "longname": "src/components/views/map-view.js~filters",
    "access": "public",
    "export": false,
    "importPath": "PedalPatrol/src/components/views/map-view.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 788,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 680,
    "kind": "class",
    "name": "MapView",
    "memberof": "src/components/views/map-view.js",
    "static": true,
    "longname": "src/components/views/map-view.js~MapView",
    "access": "public",
    "export": true,
    "importPath": "PedalPatrol/src/components/views/map-view.js",
    "importStyle": "MapView",
    "description": "Class for the Map view",
    "lineNumber": 22,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 681,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/components/views/map-view.js~MapView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/views/map-view.js~MapView#constructor",
    "access": "public",
    "description": "Create an instance of LoginView",
    "lineNumber": 30,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "Component properties"
      }
    ]
  },
  {
    "__docId__": 682,
    "kind": "member",
    "name": "MapP",
    "memberof": "src/components/views/map-view.js~MapView",
    "static": false,
    "longname": "src/components/views/map-view.js~MapView#MapP",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 683,
    "kind": "member",
    "name": "resetState",
    "memberof": "src/components/views/map-view.js~MapView",
    "static": false,
    "longname": "src/components/views/map-view.js~MapView#resetState",
    "access": "public",
    "description": "Resets the state with default variables",
    "lineNumber": 39,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 684,
    "kind": "member",
    "name": "state",
    "memberof": "src/components/views/map-view.js~MapView",
    "longname": "src/components/views/map-view.js~MapView#state",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "{\"refresh\": boolean, \"circleRadius\": number, \"x\": *, \"showCircle\": *, \"showMarker\": *, \"markerCreated\": *, \"markers\": *, \"markerRefs\": *, \"tempMarkers\": *, \"tempMarkerRefs\": *, \"foundMarker\": *, \"foundCalloutOpened\": *, \"selectedFilters\": *, \"profileData\": *}"
      ]
    }
  },
  {
    "__docId__": 685,
    "kind": "member",
    "name": "refreshState",
    "memberof": "src/components/views/map-view.js~MapView",
    "static": false,
    "longname": "src/components/views/map-view.js~MapView#refreshState",
    "access": "public",
    "description": "Refreshes the state of the component so new data is fetched.",
    "lineNumber": 64,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 686,
    "kind": "member",
    "name": "componentWillMount",
    "memberof": "src/components/views/map-view.js~MapView",
    "static": false,
    "longname": "src/components/views/map-view.js~MapView#componentWillMount",
    "access": "public",
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 687,
    "kind": "member",
    "name": "componentDidMount",
    "memberof": "src/components/views/map-view.js~MapView",
    "static": false,
    "longname": "src/components/views/map-view.js~MapView#componentDidMount",
    "access": "public",
    "description": "Triggers when the component is mounted.",
    "lineNumber": 77,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 688,
    "kind": "member",
    "name": "componentWillReceiveProps",
    "memberof": "src/components/views/map-view.js~MapView",
    "static": false,
    "longname": "src/components/views/map-view.js~MapView#componentWillReceiveProps",
    "access": "public",
    "description": "Component will receive new properties via the props attribute",
    "lineNumber": 86,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 689,
    "kind": "member",
    "name": "componentWillUnmount",
    "memberof": "src/components/views/map-view.js~MapView",
    "static": false,
    "longname": "src/components/views/map-view.js~MapView#componentWillUnmount",
    "access": "public",
    "description": "Component is about to unmount, do any cleanup here.\nCall viewUnmounting in base class so it can do any cleanup for the view before calling the presenter destroy method",
    "lineNumber": 105,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 690,
    "kind": "member",
    "name": "componentDidUpdate",
    "memberof": "src/components/views/map-view.js~MapView",
    "static": false,
    "longname": "src/components/views/map-view.js~MapView#componentDidUpdate",
    "access": "public",
    "description": "Component's state has updated",
    "lineNumber": 112,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 691,
    "kind": "member",
    "name": "_setMarkers",
    "memberof": "src/components/views/map-view.js~MapView",
    "static": false,
    "longname": "src/components/views/map-view.js~MapView#_setMarkers",
    "access": "private",
    "description": "Sets markers according to the filter, if any, that is set.",
    "lineNumber": 124,
    "params": [
      {
        "nullable": null,
        "types": [
          "List"
        ],
        "spread": false,
        "optional": false,
        "name": "selectedFilters",
        "description": "A list of selected filters. Indices correspond to places in the list in the 'filters' constant"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 692,
    "kind": "member",
    "name": "_onSelectedItemsChange",
    "memberof": "src/components/views/map-view.js~MapView",
    "static": false,
    "longname": "src/components/views/map-view.js~MapView#_onSelectedItemsChange",
    "access": "private",
    "description": "Add the new selected items to the state and update",
    "lineNumber": 136,
    "params": [
      {
        "nullable": null,
        "types": [
          "List"
        ],
        "spread": false,
        "optional": false,
        "name": "selectedFilters",
        "description": "List of selected items"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 693,
    "kind": "member",
    "name": "_createNewMarker",
    "memberof": "src/components/views/map-view.js~MapView",
    "static": false,
    "longname": "src/components/views/map-view.js~MapView#_createNewMarker",
    "access": "private",
    "description": "Creates a new marker from the data.",
    "lineNumber": 147,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The data from the marker to be created"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "A new marker object with data, key and coordinate properties"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 694,
    "kind": "member",
    "name": "_setLocationToMarkerItem",
    "memberof": "src/components/views/map-view.js~MapView",
    "static": false,
    "longname": "src/components/views/map-view.js~MapView#_setLocationToMarkerItem",
    "access": "private",
    "description": "Sets the location of the map to the marker's position and open its callout.",
    "lineNumber": 167,
    "params": [
      {
        "nullable": null,
        "types": [
          "List"
        ],
        "spread": false,
        "optional": false,
        "name": "refs",
        "description": "A list of marker references"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "item",
        "description": "The marker's data"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "shouldReshowCallout",
        "description": "If the callout should be triggered twice on a delay. default=false"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 695,
    "kind": "member",
    "name": "_setUserLocation",
    "memberof": "src/components/views/map-view.js~MapView",
    "static": false,
    "longname": "src/components/views/map-view.js~MapView#_setUserLocation",
    "access": "private",
    "description": "Sets the user's location to their current location.",
    "lineNumber": 188,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 696,
    "kind": "member",
    "name": "renderSearchbar",
    "memberof": "src/components/views/map-view.js~MapView",
    "static": false,
    "longname": "src/components/views/map-view.js~MapView#renderSearchbar",
    "access": "public",
    "description": "Render a searchbar for user to search location after clicking \"search location\" button",
    "lineNumber": 231,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 697,
    "kind": "method",
    "name": "saveItem",
    "memberof": "src/components/views/map-view.js~MapView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/views/map-view.js~MapView#saveItem",
    "access": "public",
    "description": " Save data of created marker or circle after clicking save button",
    "lineNumber": 270,
    "params": [],
    "return": null
  },
  {
    "__docId__": 698,
    "kind": "method",
    "name": "deleteItem",
    "memberof": "src/components/views/map-view.js~MapView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/views/map-view.js~MapView#deleteItem",
    "access": "public",
    "description": "Delete created marker or circle after clicking delete button",
    "lineNumber": 290,
    "params": [],
    "return": null
  },
  {
    "__docId__": 699,
    "kind": "method",
    "name": "renderCircle",
    "memberof": "src/components/views/map-view.js~MapView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/views/map-view.js~MapView#renderCircle",
    "access": "public",
    "description": "Render a circle to set notification receiving area",
    "lineNumber": 331,
    "params": [],
    "return": null
  },
  {
    "__docId__": 700,
    "kind": "method",
    "name": "sendCircle",
    "memberof": "src/components/views/map-view.js~MapView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/views/map-view.js~MapView#sendCircle",
    "access": "public",
    "description": "Save data of circle to notification settings",
    "lineNumber": 347,
    "params": [],
    "return": null
  },
  {
    "__docId__": 701,
    "kind": "method",
    "name": "sendNewMarker",
    "memberof": "src/components/views/map-view.js~MapView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/views/map-view.js~MapView#sendNewMarker",
    "access": "public",
    "description": "Save data of created marker to report lost page",
    "lineNumber": 363,
    "params": [],
    "return": null
  },
  {
    "__docId__": 702,
    "kind": "method",
    "name": "setCircleLat",
    "memberof": "src/components/views/map-view.js~MapView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/views/map-view.js~MapView#setCircleLat",
    "access": "public",
    "description": " Long press the map to change the coordinate of circle",
    "lineNumber": 379,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "The event of long press on the map"
      }
    ],
    "return": null
  },
  {
    "__docId__": 703,
    "kind": "member",
    "name": "_onPinMarkerPress",
    "memberof": "src/components/views/map-view.js~MapView",
    "static": false,
    "longname": "src/components/views/map-view.js~MapView#_onPinMarkerPress",
    "access": "private",
    "description": "handle click event after clicking \"create marker\" button",
    "lineNumber": 395,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 704,
    "kind": "member",
    "name": "newMarker",
    "memberof": "src/components/views/map-view.js~MapView",
    "static": false,
    "longname": "src/components/views/map-view.js~MapView#newMarker",
    "access": "public",
    "description": "helper function of _onPinMarkerPress",
    "lineNumber": 418,
    "params": [
      {
        "nullable": null,
        "types": [
          "Integer"
        ],
        "spread": false,
        "optional": false,
        "name": "latitude",
        "description": "and longitude of a marker"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 705,
    "kind": "member",
    "name": "onRegionChange",
    "memberof": "src/components/views/map-view.js~MapView",
    "static": false,
    "longname": "src/components/views/map-view.js~MapView#onRegionChange",
    "access": "public",
    "description": " Change region state as moving the map",
    "lineNumber": 428,
    "params": [
      {
        "nullable": null,
        "types": [
          "region"
        ],
        "spread": false,
        "optional": false,
        "name": "A",
        "description": "presenter class instance"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 706,
    "kind": "member",
    "name": "_setProfileImage",
    "memberof": "src/components/views/map-view.js~MapView",
    "static": false,
    "longname": "src/components/views/map-view.js~MapView#_setProfileImage",
    "access": "private",
    "description": "Sets the state to the profile data retrieved from the model.",
    "lineNumber": 435,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 707,
    "kind": "member",
    "name": "_getColourString",
    "memberof": "src/components/views/map-view.js~MapView",
    "static": false,
    "longname": "src/components/views/map-view.js~MapView#_getColourString",
    "access": "private",
    "description": "Get the string to display from the colours list.",
    "lineNumber": 445,
    "params": [
      {
        "nullable": null,
        "types": [
          "List"
        ],
        "spread": false,
        "optional": false,
        "name": "colours",
        "description": "A list of colours"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "A string obtained from the colours in the list"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 708,
    "kind": "member",
    "name": "_renderCallout",
    "memberof": "src/components/views/map-view.js~MapView",
    "static": false,
    "longname": "src/components/views/map-view.js~MapView#_renderCallout",
    "access": "private",
    "description": "Renders the callout for a marker.",
    "lineNumber": 459,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "item",
        "description": "The data to display for a marker"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 709,
    "kind": "member",
    "name": "_renderSaveActionButton",
    "memberof": "src/components/views/map-view.js~MapView",
    "static": false,
    "longname": "src/components/views/map-view.js~MapView#_renderSaveActionButton",
    "access": "private",
    "description": "Renders the save action button",
    "lineNumber": 498,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 710,
    "kind": "member",
    "name": "_renderCancelActionButton",
    "memberof": "src/components/views/map-view.js~MapView",
    "static": false,
    "longname": "src/components/views/map-view.js~MapView#_renderCancelActionButton",
    "access": "private",
    "description": "Renders the cancel action button",
    "lineNumber": 511,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 711,
    "kind": "member",
    "name": "_renderActionButtonPinIcon",
    "memberof": "src/components/views/map-view.js~MapView",
    "static": false,
    "longname": "src/components/views/map-view.js~MapView#_renderActionButtonPinIcon",
    "access": "private",
    "description": "Renders the action button icon pin.",
    "lineNumber": 524,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 712,
    "kind": "member",
    "name": "_renderActionButtonAddIcon",
    "memberof": "src/components/views/map-view.js~MapView",
    "static": false,
    "longname": "src/components/views/map-view.js~MapView#_renderActionButtonAddIcon",
    "access": "private",
    "description": "Renders the action button add icon.",
    "lineNumber": 531,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 713,
    "kind": "member",
    "name": "_toggleCircle",
    "memberof": "src/components/views/map-view.js~MapView",
    "static": false,
    "longname": "src/components/views/map-view.js~MapView#_toggleCircle",
    "access": "private",
    "description": "Toggle the notification area.",
    "lineNumber": 538,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 714,
    "kind": "member",
    "name": "onMarkerDragEnd",
    "memberof": "src/components/views/map-view.js~MapView",
    "static": false,
    "longname": "src/components/views/map-view.js~MapView#onMarkerDragEnd",
    "access": "public",
    "description": "Triggers after a marker being dragged has stopped being dragged.",
    "lineNumber": 555,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "coord",
        "description": "The coordinate position of the marker"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 715,
    "kind": "member",
    "name": "navigate",
    "memberof": "src/components/views/map-view.js~MapView",
    "static": false,
    "longname": "src/components/views/map-view.js~MapView#navigate",
    "access": "public",
    "description": "Navigate to a page with a title.\nThis method is used over the commented out line below because successive touches of a bike item\nwould not add the data because data is only received in process in the componentWillMount function.\nSo adding the 'key' property to navigate makes it see that the new page is unique.",
    "lineNumber": 573,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "screen",
        "description": "The route to navigate to. See navigation.js stacks and screens"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 716,
    "kind": "method",
    "name": "render",
    "memberof": "src/components/views/map-view.js~MapView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/views/map-view.js~MapView#render",
    "access": "public",
    "description": "Extract data from the component's view and send an update to the presenter to do any logic before sending it to the model",
    "lineNumber": 587,
    "params": [],
    "return": null
  },
  {
    "__docId__": 717,
    "kind": "file",
    "name": "src/components/views/notification-view.js",
    "content": "import SettingsList from 'react-native-settings-list';\r\nimport React, {Component} from 'react';\r\nimport { View, Text, TextInput, PixelRatio, Alert, Picker } from 'react-native';\r\n\r\nimport { styles, text, colours, notifications_styles } from './stylesheets/notifications-styles';\r\n\r\n/**\r\n * Class for the Notification view\r\n * @extends BasePresenter\r\n */\r\nclass NotificationView extends Component {\r\n\t/**\r\n\t * Creates an instance of the NotificationView.\r\n\t * @constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.onValueChange = this.onValueChange.bind(this);\r\n\t\tthis.state = { switchValue: true, num:0 };\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the num in the state.\r\n\t *\r\n\t * @param {Number} num - A number\r\n\t */\r\n\tupdateNum = (num) => {\r\n\t\tthis.setState({ num: num })\r\n\t}\r\n\r\n\t/**\r\n\t * Render the element if condition is satisfied\r\n\t * @param {Boolean} condition - judge if condition is satisfied\r\n\t * @param {Boolean} element - element will be rendered.\r\n\t * @return {Component} The component if rendered, null otherwise\r\n\t */\r\n\trenderIf(condition,element){\r\n\t\t// return condition ? element : null;\r\n\t}\r\n\r\n\t/**\r\n\t * Toggle the status of item\r\n\t * @param {Boolean} value - status of the item\r\n\t */\r\n\tonValueChange(value) {\r\n\t\tthis.setState({switchValue: value});\r\n\t\tconsole.log('frequency is ' + this.state.value1 + 'index is' + this.state.index1)\r\n\t}\r\n\r\n\t/**\r\n\t * Renders the react native component.\r\n\t */\r\n\trender() {\r\n\t\t// return (\r\n\t\t// \t<View style={styles.container}>\r\n\t\t// \t\t<SettingsList borderColor='#c8c7cc' defaultItemSize={50}>\r\n\t\t// \t\t\t<SettingsList.Item\r\n\t\t// \t\t\t\thasNavArrow={false}\r\n\t\t// \t\t\t\ttitle='Status'\r\n\t\t// \t\t\t\ttitleStyle={notifications_styles.status}\r\n\t\t// \t\t\t\titemWidth={50}\r\n\t\t// \t\t\t\tborderHide={'Both'}/>\r\n\t\t// \t\t\t<SettingsList.Item\r\n\t\t// \t\t\t\thasSwitch={true}\r\n\t\t// \t\t\t\tswitchState={this.state.switchValue}\r\n\t\t// \t\t\t\tswitchOnValueChange={this.onValueChange}\r\n\t\t// \t\t\t\thasNavArrow={false}\r\n\t\t// \t\t\t\ttitle='Notifications On'/>\r\n\r\n\t\t// \t\t{this.renderIf(this.state.switchValue,\r\n\t\t// \t\t\t(\r\n\t\t// \t\t\t\t<SettingsList.Item\r\n\t\t// \t\t\t\t\thasNavArrow={false}\r\n\t\t// \t\t\t\t\ttitle='Distance'\r\n\t\t// \t\t\t\t\ttitleInfo = '1km'/>\r\n\r\n\t\t// \t\t\t)\r\n\t\t// \t\t)}\r\n\t\t// \t\t</SettingsList>\r\n\t\t// \t</View>\r\n\t\t// );\r\n\t}\r\n}\r\n\r\nexport default NotificationView;",
    "static": true,
    "longname": "/Users/seanr/Downloads/temp/src/components/views/notification-view.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 718,
    "kind": "class",
    "name": "NotificationView",
    "memberof": "src/components/views/notification-view.js",
    "static": true,
    "longname": "src/components/views/notification-view.js~NotificationView",
    "access": "public",
    "export": true,
    "importPath": "PedalPatrol/src/components/views/notification-view.js",
    "importStyle": "NotificationView",
    "description": "Class for the Notification view",
    "lineNumber": 11,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 719,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/components/views/notification-view.js~NotificationView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/views/notification-view.js~NotificationView#constructor",
    "access": "public",
    "description": "Creates an instance of the NotificationView.",
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ]
  },
  {
    "__docId__": 721,
    "kind": "member",
    "name": "state",
    "memberof": "src/components/views/notification-view.js~NotificationView",
    "static": false,
    "longname": "src/components/views/notification-view.js~NotificationView#state",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "{\"switchValue\": boolean, \"num\": *}"
      ]
    }
  },
  {
    "__docId__": 722,
    "kind": "member",
    "name": "updateNum",
    "memberof": "src/components/views/notification-view.js~NotificationView",
    "static": false,
    "longname": "src/components/views/notification-view.js~NotificationView#updateNum",
    "access": "public",
    "description": "Updates the num in the state.",
    "lineNumber": 27,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "num",
        "description": "A number"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 723,
    "kind": "method",
    "name": "renderIf",
    "memberof": "src/components/views/notification-view.js~NotificationView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/views/notification-view.js~NotificationView#renderIf",
    "access": "public",
    "description": "Render the element if condition is satisfied",
    "lineNumber": 37,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "condition",
        "description": "judge if condition is satisfied"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": "element will be rendered."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Component"
      ],
      "spread": false,
      "description": "The component if rendered, null otherwise"
    }
  },
  {
    "__docId__": 724,
    "kind": "method",
    "name": "onValueChange",
    "memberof": "src/components/views/notification-view.js~NotificationView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/views/notification-view.js~NotificationView#onValueChange",
    "access": "public",
    "description": "Toggle the status of item",
    "lineNumber": 45,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "status of the item"
      }
    ],
    "return": null
  },
  {
    "__docId__": 725,
    "kind": "method",
    "name": "render",
    "memberof": "src/components/views/notification-view.js~NotificationView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/views/notification-view.js~NotificationView#render",
    "access": "public",
    "description": "Renders the react native component.",
    "lineNumber": 53,
    "params": [],
    "return": null
  },
  {
    "__docId__": 726,
    "kind": "file",
    "name": "src/components/views/profile-view.js",
    "content": "import React, { Component } from 'react';\nimport { StyleSheet, Text, View, Button, PixelRatio, TouchableOpacity, Image, SafeAreaView, Alert, ScrollView, FlatList, ActivityIndicator, KeyboardAvoidingView } from 'react-native';\nimport { Icon } from 'react-native-elements';\nimport ImagePicker from 'react-native-image-picker';\nimport { HeaderBackButton } from 'react-navigation';\nimport { TextInput } from 'react-native-paper';\nimport SectionedMultiSelect from 'react-native-sectioned-multi-select';\n\nimport { styles, text, edit_styles } from './stylesheets/edit-styles';\n\nimport BaseView from './view';\nimport SafeArea from './helpers/safearea';\nimport HandleBack from './helpers/handleback';\nimport ImageCarousel from './helpers/imagecarousel';\nimport ProfilePresenter from '../presenters/profile-presenter';\nimport ImageUtil from '../../util/imageutility';\n\nconst PROFILE_TYPE = ImageUtil.getTypes().PROFILE;\nconst NO_DATA = 'NO-DATA';\n\n/**\n * Class for the Profile view\n * @extends BaseView\n */\nclass ProfileView extends BaseView {\n\tstate = { // Initializing the state\n\t\tediting: false, // Checks if user is editing\n\t\trefresh: true, // Triggers a view refresh\n\t\tloaderVisible: false,\n\n\t\tinputData: [], // Input text data is at each index\n\n\t\tcurrentID: '',\n\n\t\tphotoEntries: [],\n\t};\n\n\t/**\n\t * Set the navigation options, change the header to handle a back button.\n\t *\n\t * @return {Object} Navigation option\n\t */\n\tstatic navigationOptions = ({navigation, transitioning}) => {\n\t\tconst { params = {} } = navigation.state;\n\t\tconst back = params._onBack ? params._onBack : () => 'default';\n\t\tconst clear = params._clearData ? params._clearData : () => 'default';\n\t\t// return {\n\t\t// \theaderLeft: (<HeaderBackButton disabled={transitioning} onPress={()=>{back()}}/>),\n\t\t// \theaderRight: (<Button disabled={transitioning} onPress={()=>{clear()}} title='Clear'/>),\n\t\t// \ttitle: navigation.getParam('title', 'Profile')\n\t\t// }\n\t}\n\n\t/**\n\t * Creates an instance of the profile view\n\t *\n\t * @constructor\n\t * @param {Object} props - Component properties\n\t */\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.ProfileP = new ProfilePresenter(this);\n\t}\n\n\t/**\n\t * Component is about to mount, initialize the data.\n\t * This function is called before componentDidMount\n\t */\n\tcomponentWillMount = () => {\n\t\tthis.props.navigation.setParams({\n\t\t\t_onBack: this._onBack,\n\t\t\t_clearData: this._clearData\n\t\t});\n\n\t\tthis.setState({\n\t\t\tinputData: this.ProfileP.getTextInputData(this.ProfileP.getData()),\n\t\t\tphotoEntries: this.ProfileP.getCurrentPhotos()\n\t\t});\n\t}\n\n\t/**\n\t * Component will unmount after this method is called, do any clean up here\n\t * Call viewUnmounting in base class so it can do any cleanup for the view before calling the presenter destroy method\n\t */\n\tcomponentWillUnmount = () => {\n\t\tthis.viewUnmounting(this.ProfileP);\n\t}\n\n\t/**\n\t * Refreshes the state of the component so new data is fetched.\n\t */\n\trefreshState = () => {\n\t\tthis.setState({ \n\t\t\trefresh: !this.state.refresh\n\t\t});\n\t}\n\n\t/**\n\t * Toggle the editing mode.\n\t */\n\ttoggleEditing = () => {\n\t\tthis.setState({ editing: !editing });\n\t}\n\n\t/**\n\t * Set the editing value to the passed in value.\n\t*\n\t * @param {Boolean} edit - true: user is editing; false: user is not editing\n\t */\n\tsetEditing = (edit) => {\n\t\tthis.setState({ editing: edit });\n\t}\n\n\t/**\n\t * When the back button is clicked, check if the user was editing.\n\t */\n\t_onBack = () => {\n\t\tif (!this.state.loaderVisible) {\n\t\t\tthis.ProfileP.checkEditingState(this.state.editing, this.editingSuccess, this.editingFailure);\n\t\t}\n\t}\n\n\t/**\n\t * A function to execute when the editing state is true.\n\t */\n\teditingSuccess = () => {\n\t\tAlert.alert(\n\t\t\t\"You're still editing!\",\n\t\t\t\"Are you sure you want to go back with your edits not saved?\",\n\t\t\t[\n\t\t\t\t{ text: \"Keep Editing\", onPress: () => {}, style: \"cancel\" },\n\t\t\t\t{ text: \"Go Back\", onPress: () => this.resetAllOnBack() },\n\t\t\t],\n\t\t\t{ cancelable: false },\n\t\t);\n\t}\n\n\t/**\n\t * A function to execute when the editing state is false.\n\t */\n\teditingFailure = () => {\n\t\t// Clear the data just in case\n\t\tthis.resetAllOnBack(); // If not editing then go back\n\t}\n\n\t/**\n\t * Resets all the data and goes back to the bike page\n\t */\n\tresetAllOnBack = () => {\n\t\tthis._clearData();\n\t\tthis.props.navigation.navigate('Tabs');\n\t}\n\n\t/**\n\t * Clears all the data\n\t */\n\t_clearData = () => {\n\t\tif (!this.state.loaderVisible) {\n\t\t\tthis.ProfileP.clearPhotos();\n\t\t\tlet inputData = this.ProfileP.getTextInputData(NO_DATA); // inputData is a property in state\n\t\t\tlet photoEntries = ImageUtil.getDefaultPhotos(PROFILE_TYPE);\n\t\t\tthis.setState({ inputData, photoEntries });\n\t\t\tthis.setEditing(false); // Set editing to false so user can easily go back (for clear button)\n\t\t}\n\t}\n\n\t/**\n\t * Render a text input item.\n\t * \n\t * @param {Object} item - A list item, index - The index of the item in the data list\n\t */\n\t_renderItem = ({item, index}) => {}\n\t// \t<TextInput\n\t// \t\tstyle={text.textInput}\n\t// \t\tlabel={item.disabled ? this._renderName(item.name) : item.name}\n\t// \t\tmultiline={item.multiline}\n\t// \t\tdisabled={item.disabled}\n\t// \t\tkeyboardType={item.keyboardType}\n\t// \t\tvalue={this.state.inputData[index].text}\n\t// \t\tonChangeText={(text) => {\n\t// \t\t\tlet { inputData } = this.state; // inputData is a keyword in state\n\t// \t\t\tinputData[index].text = text;\n\t// \t\t\tthis.setState({ inputData });\n\t// \t\t\tthis.setEditing(true); // Now editing\n\t// \t\t}\n\t// \t}/>\n\t// );\n\n\t/**\n\t * Renders the name of a required field.\n\t */\n\t_renderName = (name) => {}\n\t// \t<Text style={[{color: 'black'}]}>{name}</Text>\n\t// );\n\n\n\t/**\n\t * Extract the key from the item and index\n\t */\n\t_keyExtractor = (item, index) => item.name;\n\n\t/**\n\t * Add the new selected items to the state and update\n\t *\n\t * @param {List} selectedItems - List of selected items\n\t */\n\t_onSelectedItemsChange = (selectedItems) => {\n\t\tthis.setEditing(true); // Now editing\n\t\tthis.setState({ selectedItems });\n\t} \n\n\n\t/**\n\t * Get the data from the state and send an update to the presenter\n\t */\n\t_getDataToUpdate = () => {\n\t\tif (this.ProfileP.checkInputs(this.state.inputData, this._inputRequirementFailure)) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._enableLoader();\n\t\tthis.refreshState();\n\n\t\tlet updateData = {\n\t\t\tcurrentID: this.state.currentID,\n\t\t\tinputTextData: this.state.inputData, \n\t\t\tpicture: this.state.photoEntries\n\t\t};\n\n\t\tthis.ProfileP.update(updateData, this.alertCallback);\n\t}\n\n\t/**\n\t * Enables the loader.\n\t */\n\t_enableLoader = () => { this.setState({ loaderVisible: true }); }\n\n\t/**\n\t * Disables the loader.\n\t */\n\t_disableLoader = () => { this.setState({ loaderVisible: false }); }\n\n\t/**\n\t * Alert for requirement input failure\n\t */\n\t_inputRequirementFailure = (names) => {\n\t\tconst joiner = names.length > 1 ? \" are\" : \" is\";\n\t\tAlert.alert(\n\t\t\t\"Required (*) inputs cannot be blank.\",\n\t\t\tnames.join(', ') + joiner + \" required.\",\n\t\t\t[\n\t\t\t\t{ text: \"Ok\", onPress: () => {}, style: \"ok\" },\n\t\t\t],\n\t\t\t{ cancelable: false },\n\t\t);\n\t}\n\n\t/**\n\t * Sets a callback on what to do if there is a success or error when a bike is uploaded.\n\t *\n\t * @param {Boolean} success - true: Uploading successful; false: Uploading failed\n\t */\n\talertCallback = (success) => {\n\t\tthis._disableLoader();\n\t\tthis.refreshState();\n\t\tif (success) {\n\t\t\tAlert.alert(\n\t\t\t\t\"Profile successfully updated!\",\n\t\t\t\t\"\",\n\t\t\t\t[\n\t\t\t\t\t{ text: \"Ok\", onPress: () => this.resetAllOnBack(), style: \"ok\" },\n\t\t\t\t],\n\t\t\t\t{ cancelable: false },\n\t\t\t);\n\t\t} else {\n\t\t\tAlert.alert(\n\t\t\t\t\"Profile was not able to be updated.\",\n\t\t\t\t\"Please try again.\",\n\t\t\t\t[\n\t\t\t\t\t{ text: \"Ok\", onPress: () => {}, style: \"ok\" },\n\t\t\t\t],\n\t\t\t\t{ cancelable: false },\n\t\t\t);\n\t\t}\n\t} \n\n\t/**\n\t * DON'T USE THIS METHOD UNLESS ABSOLUTELY NECESSARY.\n\t * Force a refresh of the view.\n\t */\n\t_forceRefresh = () => {\n\t\tthis.forceUpdate();\n\t}\n\n\t/**\n\t * Renders items to the screen\n\t *\n\t * @return {Component} \n\t */\n\trender() {\n\t\t// return (\n\t\t// \t<KeyboardAvoidingView\n\t\t// \t\tstyle={styles.container}\n\t\t// \t\tbehavior=\"padding\"\n\t\t// \t\tenabled>\n\t\t// \t<HandleBack onBack={this._onBack}>\n\t\t// \t\t<SafeArea/>\n\t\t// \t\t<View style={styles.container}>\n\t\t// \t\t\t<ScrollView \n\t\t// \t\t\t\tcontentContainerStyle={edit_styles.contentContainer}\n\t\t// \t\t\t\tkeyboardShouldPersistTaps='always'\n\t\t// \t\t\t\tkeyboardDismissMode='interactive'>\n\n\t\t// \t\t\t\t<ImageCarousel\n\t\t// \t\t\t\t\tphotos={this.state.photoEntries}\n\t\t// \t\t\t\t\tselected={(id) => {this.ProfileP.selectPhotoTapped(ImagePicker, this.setEditing, id, this.state.photoEntries)}} />\n\n\t\t// \t\t\t\t{/* List of text inputs */}\n\t\t// \t\t\t\t<FlatList\n\t\t// \t\t\t\t\tstyle={edit_styles.flatList}\n\t\t// \t\t\t\t\tdata={this.ProfileP.getTextInputData(NO_DATA)}\n\t\t// \t\t\t\t\textraData={this.state}\n\t\t// \t\t\t\t\tkeyExtractor={this._keyExtractor}\n\t\t// \t\t\t\t\trenderItem={this._renderItem}/>\n\n\t\t// \t\t\t\t<TouchableOpacity style={edit_styles.submitTouchable}>\n\t\t// \t\t\t\t\t<Button\n\t\t// \t\t\t\t\t\ttitle='Save'\n\t\t// \t\t\t\t\t\tonPress={() => this._getDataToUpdate()}/>\n\t\t// \t\t\t\t</TouchableOpacity>\n\n\t\t// \t\t\t\t{\n\t\t// \t\t\t\t\tthis.state.loaderVisible &&\n\t\t// \t\t\t\t\t<View style={styles.loading} pointerEvents=\"none\">\n\t\t// \t\t\t\t\t\t<ActivityIndicator size='large' color=\"#0000ff\" />\n\t\t// \t\t\t\t\t</View>\n\t\t// \t\t\t\t}\n\t\t// \t\t\t</ScrollView>\n\t\t// \t\t</View>\n\t\t// \t\t<SafeAreaView style={{ flex:0, backgroundColor: '#F5FCFF' }} />\n\t\t// \t</HandleBack>\n\t\t// \t</KeyboardAvoidingView>\n\t\t// );\n\t}\n}\n\nexport default ProfileView;",
    "static": true,
    "longname": "/Users/seanr/Downloads/temp/src/components/views/profile-view.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 727,
    "kind": "variable",
    "name": "PROFILE_TYPE",
    "memberof": "src/components/views/profile-view.js",
    "static": true,
    "longname": "src/components/views/profile-view.js~PROFILE_TYPE",
    "access": "public",
    "export": false,
    "importPath": "PedalPatrol/src/components/views/profile-view.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 728,
    "kind": "variable",
    "name": "NO_DATA",
    "memberof": "src/components/views/profile-view.js",
    "static": true,
    "longname": "src/components/views/profile-view.js~NO_DATA",
    "access": "public",
    "export": false,
    "importPath": "PedalPatrol/src/components/views/profile-view.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 729,
    "kind": "class",
    "name": "ProfileView",
    "memberof": "src/components/views/profile-view.js",
    "static": true,
    "longname": "src/components/views/profile-view.js~ProfileView",
    "access": "public",
    "export": true,
    "importPath": "PedalPatrol/src/components/views/profile-view.js",
    "importStyle": "ProfileView",
    "description": "Class for the Profile view",
    "lineNumber": 25,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 730,
    "kind": "member",
    "name": "state",
    "memberof": "src/components/views/profile-view.js~ProfileView",
    "static": false,
    "longname": "src/components/views/profile-view.js~ProfileView#state",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 731,
    "kind": "member",
    "name": "navigationOptions",
    "memberof": "src/components/views/profile-view.js~ProfileView",
    "static": true,
    "longname": "src/components/views/profile-view.js~ProfileView.navigationOptions",
    "access": "public",
    "description": "Set the navigation options, change the header to handle a back button.",
    "lineNumber": 43,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Navigation option"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 732,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/components/views/profile-view.js~ProfileView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/views/profile-view.js~ProfileView#constructor",
    "access": "public",
    "description": "Creates an instance of the profile view",
    "lineNumber": 60,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "Component properties"
      }
    ]
  },
  {
    "__docId__": 733,
    "kind": "member",
    "name": "ProfileP",
    "memberof": "src/components/views/profile-view.js~ProfileView",
    "static": false,
    "longname": "src/components/views/profile-view.js~ProfileView#ProfileP",
    "access": "public",
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 734,
    "kind": "member",
    "name": "componentWillMount",
    "memberof": "src/components/views/profile-view.js~ProfileView",
    "static": false,
    "longname": "src/components/views/profile-view.js~ProfileView#componentWillMount",
    "access": "public",
    "description": "Component is about to mount, initialize the data.\nThis function is called before componentDidMount",
    "lineNumber": 69,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 735,
    "kind": "member",
    "name": "componentWillUnmount",
    "memberof": "src/components/views/profile-view.js~ProfileView",
    "static": false,
    "longname": "src/components/views/profile-view.js~ProfileView#componentWillUnmount",
    "access": "public",
    "description": "Component will unmount after this method is called, do any clean up here\nCall viewUnmounting in base class so it can do any cleanup for the view before calling the presenter destroy method",
    "lineNumber": 85,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 736,
    "kind": "member",
    "name": "refreshState",
    "memberof": "src/components/views/profile-view.js~ProfileView",
    "static": false,
    "longname": "src/components/views/profile-view.js~ProfileView#refreshState",
    "access": "public",
    "description": "Refreshes the state of the component so new data is fetched.",
    "lineNumber": 92,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 737,
    "kind": "member",
    "name": "toggleEditing",
    "memberof": "src/components/views/profile-view.js~ProfileView",
    "static": false,
    "longname": "src/components/views/profile-view.js~ProfileView#toggleEditing",
    "access": "public",
    "description": "Toggle the editing mode.",
    "lineNumber": 101,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 738,
    "kind": "member",
    "name": "setEditing",
    "memberof": "src/components/views/profile-view.js~ProfileView",
    "static": false,
    "longname": "src/components/views/profile-view.js~ProfileView#setEditing",
    "access": "public",
    "description": "Set the editing value to the passed in value.",
    "lineNumber": 110,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "edit",
        "description": "true: user is editing; false: user is not editing"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 739,
    "kind": "member",
    "name": "_onBack",
    "memberof": "src/components/views/profile-view.js~ProfileView",
    "static": false,
    "longname": "src/components/views/profile-view.js~ProfileView#_onBack",
    "access": "private",
    "description": "When the back button is clicked, check if the user was editing.",
    "lineNumber": 117,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 740,
    "kind": "member",
    "name": "editingSuccess",
    "memberof": "src/components/views/profile-view.js~ProfileView",
    "static": false,
    "longname": "src/components/views/profile-view.js~ProfileView#editingSuccess",
    "access": "public",
    "description": "A function to execute when the editing state is true.",
    "lineNumber": 126,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 741,
    "kind": "member",
    "name": "editingFailure",
    "memberof": "src/components/views/profile-view.js~ProfileView",
    "static": false,
    "longname": "src/components/views/profile-view.js~ProfileView#editingFailure",
    "access": "public",
    "description": "A function to execute when the editing state is false.",
    "lineNumber": 141,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 742,
    "kind": "member",
    "name": "resetAllOnBack",
    "memberof": "src/components/views/profile-view.js~ProfileView",
    "static": false,
    "longname": "src/components/views/profile-view.js~ProfileView#resetAllOnBack",
    "access": "public",
    "description": "Resets all the data and goes back to the bike page",
    "lineNumber": 149,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 743,
    "kind": "member",
    "name": "_clearData",
    "memberof": "src/components/views/profile-view.js~ProfileView",
    "static": false,
    "longname": "src/components/views/profile-view.js~ProfileView#_clearData",
    "access": "private",
    "description": "Clears all the data",
    "lineNumber": 157,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 744,
    "kind": "member",
    "name": "_renderItem",
    "memberof": "src/components/views/profile-view.js~ProfileView",
    "static": false,
    "longname": "src/components/views/profile-view.js~ProfileView#_renderItem",
    "access": "private",
    "description": "Render a text input item.",
    "lineNumber": 172,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "item",
        "description": "A list item, index - The index of the item in the data list"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 745,
    "kind": "member",
    "name": "_renderName",
    "memberof": "src/components/views/profile-view.js~ProfileView",
    "static": false,
    "longname": "src/components/views/profile-view.js~ProfileView#_renderName",
    "access": "private",
    "description": "Renders the name of a required field.",
    "lineNumber": 192,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 746,
    "kind": "member",
    "name": "_keyExtractor",
    "memberof": "src/components/views/profile-view.js~ProfileView",
    "static": false,
    "longname": "src/components/views/profile-view.js~ProfileView#_keyExtractor",
    "access": "private",
    "description": "Extract the key from the item and index",
    "lineNumber": 200,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 747,
    "kind": "member",
    "name": "_onSelectedItemsChange",
    "memberof": "src/components/views/profile-view.js~ProfileView",
    "static": false,
    "longname": "src/components/views/profile-view.js~ProfileView#_onSelectedItemsChange",
    "access": "private",
    "description": "Add the new selected items to the state and update",
    "lineNumber": 207,
    "params": [
      {
        "nullable": null,
        "types": [
          "List"
        ],
        "spread": false,
        "optional": false,
        "name": "selectedItems",
        "description": "List of selected items"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 748,
    "kind": "member",
    "name": "_getDataToUpdate",
    "memberof": "src/components/views/profile-view.js~ProfileView",
    "static": false,
    "longname": "src/components/views/profile-view.js~ProfileView#_getDataToUpdate",
    "access": "private",
    "description": "Get the data from the state and send an update to the presenter",
    "lineNumber": 216,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 749,
    "kind": "member",
    "name": "_enableLoader",
    "memberof": "src/components/views/profile-view.js~ProfileView",
    "static": false,
    "longname": "src/components/views/profile-view.js~ProfileView#_enableLoader",
    "access": "private",
    "description": "Enables the loader.",
    "lineNumber": 236,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 750,
    "kind": "member",
    "name": "_disableLoader",
    "memberof": "src/components/views/profile-view.js~ProfileView",
    "static": false,
    "longname": "src/components/views/profile-view.js~ProfileView#_disableLoader",
    "access": "private",
    "description": "Disables the loader.",
    "lineNumber": 241,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 751,
    "kind": "member",
    "name": "_inputRequirementFailure",
    "memberof": "src/components/views/profile-view.js~ProfileView",
    "static": false,
    "longname": "src/components/views/profile-view.js~ProfileView#_inputRequirementFailure",
    "access": "private",
    "description": "Alert for requirement input failure",
    "lineNumber": 246,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 752,
    "kind": "member",
    "name": "alertCallback",
    "memberof": "src/components/views/profile-view.js~ProfileView",
    "static": false,
    "longname": "src/components/views/profile-view.js~ProfileView#alertCallback",
    "access": "public",
    "description": "Sets a callback on what to do if there is a success or error when a bike is uploaded.",
    "lineNumber": 263,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "success",
        "description": "true: Uploading successful; false: Uploading failed"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 753,
    "kind": "member",
    "name": "_forceRefresh",
    "memberof": "src/components/views/profile-view.js~ProfileView",
    "static": false,
    "longname": "src/components/views/profile-view.js~ProfileView#_forceRefresh",
    "access": "private",
    "description": "DON'T USE THIS METHOD UNLESS ABSOLUTELY NECESSARY.\nForce a refresh of the view.",
    "lineNumber": 291,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 754,
    "kind": "method",
    "name": "render",
    "memberof": "src/components/views/profile-view.js~ProfileView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/views/profile-view.js~ProfileView#render",
    "access": "public",
    "description": "Renders items to the screen",
    "lineNumber": 300,
    "return": {
      "nullable": null,
      "types": [
        "Component"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 755,
    "kind": "file",
    "name": "src/components/views/reportfound-view.js",
    "content": "import React, {Component} from 'react';\r\nimport {AppRegistry, StyleSheet, Text, View, TouchableOpacity, TouchableHighlight, ScrollView, Alert, Button} from 'react-native';\r\nimport ModalDropdown from 'react-native-modal-dropdown';\r\nimport MapView from 'react-native-maps';\r\nimport {Marker} from 'react-native-maps';\r\nimport { TextInput } from 'react-native-paper';\r\nimport { HeaderBackButton } from 'react-navigation';\r\n\r\nimport { styles, colours, reportfound_styles } from './stylesheets/reportfound-styles';\r\n\r\nimport ReportFoundPresenter from '../presenters/reportfound-presenter';\r\nimport BaseView from './view';\r\n\r\n/**\r\n * Class for the reportfound view\r\n * @extends BaseView\r\n */\r\nclass ReportFoundView extends BaseView {\r\n\t/**\r\n\t * Creates an instance of the report found view\r\n\t *\r\n\t * @constructor\r\n\t * @param {Object} props - Component properties\r\n\t */\r\n\tconstructor(props) {\r\n  \t\tsuper(props);\r\n\t\tthis.reportfoundP = new ReportFoundPresenter(this);\r\n\t\tthis.state = {\r\n\t\t\ttext:'',\r\n\t\t\tbikeMenu:[],\r\n\t\t\tregion:{\r\n\t\t\t\tlatitude:44.237424,\r\n\t\t\t\tlongitude:-76.5131,\r\n\t\t\t\tlatitudeDelta:0.0922,\r\n\t\t\t\tlongitudeDelta:0.0421,\r\n\t  \t\t},\r\n\t\t  thisMarker: [],\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Set the navigation options, change the header to handle a back button.\r\n\t *\r\n\t * @return {Object} Navigation option\r\n\t */\r\n\tstatic navigationOptions = ({navigation, transitioning}) => {\r\n\t\tconst { params = {} } = navigation.state;\r\n\t\t// const back = params._onBack ? params._onBack : () => 'default';\r\n\t\t// return {\r\n\t\t// \theaderLeft: (<HeaderBackButton disabled={transitioning} onPress={()=>{back()}}/>),\r\n\t\t// };\r\n\t}\r\n\r\n\t/**\r\n\t * The back function to go to the previous page.\r\n\t */\r\n\t_onBack = () => {\r\n\t\tthis.props.navigation.navigate(this.state.from);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Sets a marker in the state. Only one marker is stored at a time.\r\n\t *\r\n\t * @param {Object} e - A place marker event\r\n\t */\r\n\tsetMarker(e){\r\n\t\tlet coor = e.nativeEvent.coordinate;\r\n\t\tthis.setState({\r\n\t\t\tthisMarker:[{key: 0, coordinate:coor}],\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Component is about to mount, initialize the data before rendering.\r\n\t */\r\n\tcomponentWillMount = () => {\r\n\t\tthis.props.navigation.setParams({\r\n\t\t\t_onBack: this._onBack,\r\n\t\t});\r\n\t\t\r\n\t\tconst { navigation } = this.props;\r\n\t\tconst data = navigation.getParam('rawData', 'NO-DATA');\r\n\r\n\t\tconst fromPage = navigation.getParam('from', 'Home');\r\n\t\tthis.setState({\r\n\t\t\tediteddata: data,\r\n\t\t\tfrom: fromPage\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Component mounted\r\n\t */\r\n\tcomponentDidMount = () => {\r\n\t\tthis._setUserLocation();\r\n\t};\r\n\r\n\t/**\r\n\t * Component is about to unmount.\r\n\t */\r\n\tcomponentWillUnmount = () => {\r\n\t\tthis.viewUnmounting(this.reportfoundP);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Region has changed so set the state to the new region.\r\n\t *\r\n\t * @param {Object} region - A new region. Properties: latitude, longitude, latitudeDelta, longitudeDelta\r\n\t */\r\n\tonRegionChange = (region) =>{\r\n\t\tthis.setState({region:region});\r\n\t}\r\n\r\n\t/**\r\n\t * Set the location of user.\r\n \t */\r\n\t_setUserLocation = () => {\r\n\t\tthis._getCurrentLocation().then(position => {\r\n\t\t\tif (position) {\r\n\t\t\t\tconst location = {\r\n\t\t\t\t\tlatitude: position.coords.latitude,\r\n\t\t\t\t\tlongitude: position.coords.longitude,\r\n\t\t\t\t\tlatitudeDelta: 0.0922,\r\n\t\t\t\t\tlongitudeDelta: 0.0421,\r\n\t\t\t\t};\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tregion: location\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Get user's current location.\r\n\t */\r\n\t_getCurrentLocation = () => {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tnavigator.geolocation.getCurrentPosition(position => resolve(position), e => reject(e));\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Handle the events after clicking submit button.\r\n\t */\r\n\t_handleClick() {\r\n\t\tif (typeof(this.state.thisMarker[0])==='undefined') {\r\n\t\t\tAlert.alert(\"Please pin a location\")\r\n\t\t} else {\r\n\t\t\tthis.sendUpdate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Refreshes the state of the component so new data is fetched.\r\n\t */\r\n\trefreshState = () => {\r\n\t\tthis.setState({\r\n\t\t\trefresh: !this.state.refresh\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Get needed data from the view and send it to presenter.\r\n\t */\r\n\tsendUpdate = () => {\r\n\t\t// console.log('latitude in reportfound: '+this.state.thisMarker[0].coordinate.latitude)\r\n\t\t// Extract data from components\r\n\t\tlet new_data = {\r\n\t\t\tdata:\t{\r\n\t\t\t\tcoordinate:this.state.thisMarker[0].coordinate,\r\n\t\t\t\tediteddata:this.state.editeddata,\r\n\t\t\t\ttext:this.state.text,\r\n\t\t\t}\r\n\t\t}\r\n\t\tconst data = new_data;\r\n\t\tthis.reportfoundP.update(data, this.alertCallback);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets a callback on what to do if there is a success or error when a bike is uploaded.\r\n\t *\r\n\t * @param {Boolean} success - true: Uploading successful; false: Uploading failed\r\n\t */\r\n\talertCallback = (success) => {\r\n\t\tthis.refreshState();\r\n\t\tif (success) {\r\n\t\t\tAlert.alert(\r\n\t\t\t\t\"Report successfully uploaded!\",\r\n\t\t\t\t\"\",\r\n\t\t\t\t[\r\n\t\t\t\t\t{ text: \"Ok\", onPress: () => this.props.navigation.navigate('Home'), style: \"ok\" },\r\n\t\t\t\t],\r\n\t\t\t\t{ cancelable: false },\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\tAlert.alert(\r\n\t\t\t\t\"Fail to report.\",\r\n\t\t\t\t\"Please try again.\",\r\n\t\t\t\t[\r\n\t\t\t\t\t{ text: \"Ok\", onPress: () => {}, style: \"ok\" },\r\n\t\t\t\t],\r\n\t\t\t\t{ cancelable: false },\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Render the text of button.\r\n\t * @param {Object} rowData - the row data of the bike menu\r\n\t * @return {string} Returns the name of the component\r\n\t */\r\n\t_dropdown_2_renderButtonText(rowData) {\r\n\t\tconst {name} = rowData;\r\n\t\treturn `${name}`;\r\n\t}\r\n\r\n\t/**\r\n\t * Events after selecting the item from the dropdown menu\r\n\t * @param {Number} idx - the id of the selected item in menu.\r\n\t * @param {Object} value - the value of the selected item.\r\n\t */\r\n\t_dropdown_2_onSelect = (idx,value) => {\r\n\t\tthis.setState({bikeid: `${value.id}`});\r\n\t}\r\n\r\n\t/**\r\n\t * Render each row in the menu. Highlights the selected item.\r\n\t * @param {Object} rowData - each data in bikemenu\r\n\t * @param {Number} rowID - the id of item in the menu\r\n\t * @param {Boolean} highlighted - If the component should be highlighted or not\r\n\t */\r\n\t _dropdown_2_renderRow(rowData, rowID, highlighted) {\r\n\t\tlet evenRow = rowID % 2;\r\n\r\n\t\t// return (\r\n\t\t// \t<TouchableHighlight underlayColor='cornflowerblue'>\r\n\t\t// \t\t<View style={[reportfound_styles.dropdown_2_row, {backgroundColor: evenRow ? 'lemonchiffon' : 'white'}]}>\r\n\t\t// \t\t\t<Text style={[reportfound_styles.dropdown_2_row_text, highlighted && {color: 'mediumaquamarine'}]}>\r\n\t\t// \t\t\t\t{`${rowData.name} `}\r\n\t\t// \t\t\t</Text>\r\n\t\t// \t\t</View>\r\n\t\t//   </TouchableHighlight>\r\n\t\t// );\r\n\t}\r\n\r\n\t/**\r\n\t * Renders the react native component.\r\n\t */\r\n\trender() {\r\n\t\t// return (\r\n\t\t// \t<View style={styles.container}>\r\n\t\t// \t\t<Text style={reportfound_styles.serial_number}>\r\n\t\t// \t\t\t{\"Serial Number: \" + this.state.editeddata.serial_number}\r\n\t\t// \t\t</Text>\r\n\t\t// \t\t<TextInput style={reportfound_styles.row1}\r\n\t\t// \t\t\tlabel=\"Add a Description\"\r\n\t\t// \t\t\tmultiline={true}\r\n\t\t// \t\t\tblurOnSubmit\r\n\t\t// \t\t\tonChangeText={(text) => this.setState({text})}>\r\n\t\t// \t   \t</TextInput>\r\n\r\n\t\t// \t\t<View style = {reportfound_styles.cell}>\r\n\t\t// \t\t\t<MapView style = {reportfound_styles.cell}\r\n\t\t// \t\t\t\tregion= {this.state.region}\r\n\t\t// \t\t\t\tonPress = {e => this.setMarker(e)}\r\n\t\t// \t\t\t\tonRegionChangeComplete={this.onRegionChange.bind(this)}>\r\n\t\t// \t\t\t\t{this.state.thisMarker.map(marker=> (<Marker draggable {...marker}/>))}\r\n\t\t// \t\t\t</MapView>\r\n\t\t// \t\t</View>\r\n\t\t// \t\t<View>\r\n\t\t// \t\t\t<TouchableHighlight style={reportfound_styles.submitButton} onPress={this._handleClick.bind(this)}>\r\n\t\t// \t\t\t\t<Button color={'#000'} title=\"SUBMIT\"/>\r\n\t\t// \t\t\t</TouchableHighlight>\r\n\t\t// \t\t</View>\r\n\t\t//   </View>\r\n\t\t// );\r\n\t}\r\n}\r\n\r\nexport default ReportFoundView;",
    "static": true,
    "longname": "/Users/seanr/Downloads/temp/src/components/views/reportfound-view.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 756,
    "kind": "class",
    "name": "ReportFoundView",
    "memberof": "src/components/views/reportfound-view.js",
    "static": true,
    "longname": "src/components/views/reportfound-view.js~ReportFoundView",
    "access": "public",
    "export": true,
    "importPath": "PedalPatrol/src/components/views/reportfound-view.js",
    "importStyle": "ReportFoundView",
    "description": "Class for the reportfound view",
    "lineNumber": 18,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 757,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/components/views/reportfound-view.js~ReportFoundView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/views/reportfound-view.js~ReportFoundView#constructor",
    "access": "public",
    "description": "Creates an instance of the report found view",
    "lineNumber": 25,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "Component properties"
      }
    ]
  },
  {
    "__docId__": 758,
    "kind": "member",
    "name": "reportfoundP",
    "memberof": "src/components/views/reportfound-view.js~ReportFoundView",
    "static": false,
    "longname": "src/components/views/reportfound-view.js~ReportFoundView#reportfoundP",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 759,
    "kind": "member",
    "name": "state",
    "memberof": "src/components/views/reportfound-view.js~ReportFoundView",
    "static": false,
    "longname": "src/components/views/reportfound-view.js~ReportFoundView#state",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "{\"text\": *, \"bikeMenu\": *, \"region\": *, \"thisMarker\": *}"
      ]
    }
  },
  {
    "__docId__": 760,
    "kind": "member",
    "name": "navigationOptions",
    "memberof": "src/components/views/reportfound-view.js~ReportFoundView",
    "static": true,
    "longname": "src/components/views/reportfound-view.js~ReportFoundView.navigationOptions",
    "access": "public",
    "description": "Set the navigation options, change the header to handle a back button.",
    "lineNumber": 46,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Navigation option"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 761,
    "kind": "member",
    "name": "_onBack",
    "memberof": "src/components/views/reportfound-view.js~ReportFoundView",
    "static": false,
    "longname": "src/components/views/reportfound-view.js~ReportFoundView#_onBack",
    "access": "private",
    "description": "The back function to go to the previous page.",
    "lineNumber": 57,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 762,
    "kind": "method",
    "name": "setMarker",
    "memberof": "src/components/views/reportfound-view.js~ReportFoundView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/views/reportfound-view.js~ReportFoundView#setMarker",
    "access": "public",
    "description": "Sets a marker in the state. Only one marker is stored at a time.",
    "lineNumber": 66,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "A place marker event"
      }
    ],
    "return": null
  },
  {
    "__docId__": 763,
    "kind": "member",
    "name": "componentWillMount",
    "memberof": "src/components/views/reportfound-view.js~ReportFoundView",
    "static": false,
    "longname": "src/components/views/reportfound-view.js~ReportFoundView#componentWillMount",
    "access": "public",
    "description": "Component is about to mount, initialize the data before rendering.",
    "lineNumber": 76,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 764,
    "kind": "member",
    "name": "componentDidMount",
    "memberof": "src/components/views/reportfound-view.js~ReportFoundView",
    "static": false,
    "longname": "src/components/views/reportfound-view.js~ReportFoundView#componentDidMount",
    "access": "public",
    "description": "Component mounted",
    "lineNumber": 94,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 765,
    "kind": "member",
    "name": "componentWillUnmount",
    "memberof": "src/components/views/reportfound-view.js~ReportFoundView",
    "static": false,
    "longname": "src/components/views/reportfound-view.js~ReportFoundView#componentWillUnmount",
    "access": "public",
    "description": "Component is about to unmount.",
    "lineNumber": 101,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 766,
    "kind": "member",
    "name": "onRegionChange",
    "memberof": "src/components/views/reportfound-view.js~ReportFoundView",
    "static": false,
    "longname": "src/components/views/reportfound-view.js~ReportFoundView#onRegionChange",
    "access": "public",
    "description": "Region has changed so set the state to the new region.",
    "lineNumber": 110,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "region",
        "description": "A new region. Properties: latitude, longitude, latitudeDelta, longitudeDelta"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 767,
    "kind": "member",
    "name": "_setUserLocation",
    "memberof": "src/components/views/reportfound-view.js~ReportFoundView",
    "static": false,
    "longname": "src/components/views/reportfound-view.js~ReportFoundView#_setUserLocation",
    "access": "private",
    "description": "Set the location of user.",
    "lineNumber": 117,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 768,
    "kind": "member",
    "name": "_getCurrentLocation",
    "memberof": "src/components/views/reportfound-view.js~ReportFoundView",
    "static": false,
    "longname": "src/components/views/reportfound-view.js~ReportFoundView#_getCurrentLocation",
    "access": "private",
    "description": "Get user's current location.",
    "lineNumber": 136,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 769,
    "kind": "method",
    "name": "_handleClick",
    "memberof": "src/components/views/reportfound-view.js~ReportFoundView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/views/reportfound-view.js~ReportFoundView#_handleClick",
    "access": "private",
    "description": "Handle the events after clicking submit button.",
    "lineNumber": 145,
    "params": [],
    "return": null
  },
  {
    "__docId__": 770,
    "kind": "member",
    "name": "refreshState",
    "memberof": "src/components/views/reportfound-view.js~ReportFoundView",
    "static": false,
    "longname": "src/components/views/reportfound-view.js~ReportFoundView#refreshState",
    "access": "public",
    "description": "Refreshes the state of the component so new data is fetched.",
    "lineNumber": 156,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 771,
    "kind": "member",
    "name": "sendUpdate",
    "memberof": "src/components/views/reportfound-view.js~ReportFoundView",
    "static": false,
    "longname": "src/components/views/reportfound-view.js~ReportFoundView#sendUpdate",
    "access": "public",
    "description": "Get needed data from the view and send it to presenter.",
    "lineNumber": 165,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 772,
    "kind": "member",
    "name": "alertCallback",
    "memberof": "src/components/views/reportfound-view.js~ReportFoundView",
    "static": false,
    "longname": "src/components/views/reportfound-view.js~ReportFoundView#alertCallback",
    "access": "public",
    "description": "Sets a callback on what to do if there is a success or error when a bike is uploaded.",
    "lineNumber": 184,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "success",
        "description": "true: Uploading successful; false: Uploading failed"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 773,
    "kind": "method",
    "name": "_dropdown_2_renderButtonText",
    "memberof": "src/components/views/reportfound-view.js~ReportFoundView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/views/reportfound-view.js~ReportFoundView#_dropdown_2_renderButtonText",
    "access": "private",
    "description": "Render the text of button.",
    "lineNumber": 212,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "rowData",
        "description": "the row data of the bike menu"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Returns the name of the component"
    }
  },
  {
    "__docId__": 774,
    "kind": "member",
    "name": "_dropdown_2_onSelect",
    "memberof": "src/components/views/reportfound-view.js~ReportFoundView",
    "static": false,
    "longname": "src/components/views/reportfound-view.js~ReportFoundView#_dropdown_2_onSelect",
    "access": "private",
    "description": "Events after selecting the item from the dropdown menu",
    "lineNumber": 222,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "idx",
        "description": "the id of the selected item in menu."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "the value of the selected item."
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 775,
    "kind": "method",
    "name": "_dropdown_2_renderRow",
    "memberof": "src/components/views/reportfound-view.js~ReportFoundView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/views/reportfound-view.js~ReportFoundView#_dropdown_2_renderRow",
    "access": "private",
    "description": "Render each row in the menu. Highlights the selected item.",
    "lineNumber": 232,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "rowData",
        "description": "each data in bikemenu"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "rowID",
        "description": "the id of item in the menu"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "highlighted",
        "description": "If the component should be highlighted or not"
      }
    ],
    "return": null
  },
  {
    "__docId__": 776,
    "kind": "method",
    "name": "render",
    "memberof": "src/components/views/reportfound-view.js~ReportFoundView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/views/reportfound-view.js~ReportFoundView#render",
    "access": "public",
    "description": "Renders the react native component.",
    "lineNumber": 249,
    "params": [],
    "return": null
  },
  {
    "__docId__": 777,
    "kind": "file",
    "name": "src/components/views/reportlost-view.js",
    "content": "import React, {Component} from 'react';\r\nimport { StyleSheet, Text, View, TouchableOpacity, TouchableHighlight, ScrollView, Alert, Button } from 'react-native';\r\nimport ModalDropdown from 'react-native-modal-dropdown';\r\nimport { TextInput } from 'react-native-paper';\r\nimport { HeaderBackButton } from 'react-navigation';\r\n\r\nimport { styles, colours, reportlost_styles } from './stylesheets/reportlost-styles';\r\n\r\nimport ReportLostPresenter from '../presenters/reportlost-presenter';\r\nimport BaseView from './view';\r\n\r\n/**\r\n * Class for the reportlost view\r\n * @extends BaseView\r\n */\r\nclass ReportLostView extends BaseView {\r\n\t/**\r\n\t * Creates an instance of the report lost view\r\n\t *\r\n\t * @constructor\r\n\t * @param {Object} props - Component properties\r\n\t */\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.reportlostP = new ReportLostPresenter(this);\r\n\t\tthis.state = {\r\n\t\t\ttext: '',\r\n\t\t\tbikeid: '',\r\n\t\t\tbikeMenu: [],\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Set the navigation options, change the header to handle a back button.\r\n\t *\r\n\t * @return {Object} Navigation option\r\n\t */\r\n\tstatic navigationOptions = ({navigation, transitioning}) => {\r\n\t\tconst { params = {} } = navigation.state;\r\n\t\tconst back = params._onBack ? params._onBack : () => 'default';\r\n\t\t// return {\r\n\t\t// \theaderLeft: (<HeaderBackButton disabled={transitioning} onPress={()=>{back()}}/>),\r\n\t\t// };\r\n\t}\r\n\r\n\t/**\r\n\t * Component is about to mount, initialize the data before rendering.\r\n\t */\r\n\tcomponentWillMount = () => {\r\n\t\tthis.props.navigation.setParams({\r\n\t\t\t_onBack: this._onBack,\r\n\t\t});\r\n\r\n\t\tthis.setState({\r\n\t\t\tbikeMenu: this.reportlostP.getNotStolen(this.reportlostP.getData())\r\n\t\t});\r\n\t\tconst { navigation } = this.props;\r\n\t\tconst data = navigation.getParam('data', 'NO-DATA');\r\n\t\tif (data && data !== \"NO-DATA\") { \r\n\t\t\tconst latitude = data.data.latitude ? data.data.latitude : 'NO-DATA';\r\n\t\t\tconst longitude = data.data.longitude ? data.data.longitude : 'NO-DATA';\r\n\r\n\t\t\tthis.setState({\r\n\t\t\t\tlatitude: latitude,\r\n\t\t\t\tlongitude: longitude\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Component is aobut to unmount\r\n\t */\r\n\tcomponentWillUnmount = () => {\r\n\t\tthis.viewUnmounting(this.reportlostP);\r\n\t}\r\n\r\n\t/**\r\n\t * Back function to go back to the previous page.\r\n\t */\r\n\t_onBack = () => {\r\n\t\tthis.props.navigation.navigate('Tabs');\r\n\t}\r\n\t\r\n\r\n\t/**\r\n\t * Refreshes the state of the component so new data is fetched.\r\n\t */\r\n\trefreshState = () => {\r\n\t\tthis.setState({\r\n\t\t\trefresh: !this.state.refresh\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * handle the event after clicking submit.\r\n\t */\r\n\t_handleClick() {\r\n\t\t// console.log('bikeid is'+ this.state.bikeid);\r\n\t\tif (this.state.bikeid=='') {\r\n\t\t\tAlert.alert(\"Please select the bike!\")\r\n\t\t} else {\r\n\t\t\tthis.sendUpdate();\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Get needed data from the view and send it to presenter.\r\n\t */\r\n\tsendUpdate = () => {\r\n\t\t// Extract data from components\r\n\t\tlet new_data = {\r\n\t\t\tdata:\t{\r\n\t\t\t\ttext:this.state.text,\r\n\t\t\t\tbikeid: this.state.bikeid,\r\n\t\t\t\tlatitude: this.state.latitude,\r\n\t\t\t\tlongitude: this.state.longitude,\r\n\t\t\t}\r\n\t\t}\r\n\t\tconst data = new_data;\r\n\r\n\t\tthis.reportlostP.update(data,this.alertCallback);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets a callback on what to do if there is a success or error when a bike is uploaded.\r\n\t *\r\n\t * @param {Boolean} success - true: Uploading successful; false: Uploading failed\r\n\t */\r\n\talertCallback = (success) => {\r\n\t\tthis.refreshState();\r\n\t\tif (success) {\r\n\t\t\tAlert.alert(\r\n\t\t\t\t\"Report successfully uploaded!\",\r\n\t\t\t\t\"\",\r\n\t\t\t\t[\r\n\t\t\t\t\t{ text: \"Ok\", onPress: () => this.props.navigation.navigate('Tabs'), style: \"ok\" },\r\n\t\t\t\t],\r\n\t\t\t\t{ cancelable: false },\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\tAlert.alert(\r\n\t\t\t\t\"Fail to report.\",\r\n\t\t\t\t\"Please try again.\",\r\n\t\t\t\t[\r\n\t\t\t\t\t{ text: \"Ok\", onPress: () => {}, style: \"ok\" },\r\n\t\t\t\t],\r\n\t\t\t\t{ cancelable: false },\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Render the text of button.\r\n\t * @param {Object} rowData - the row data of the bike menu\r\n\t * @return {string} Returns the name of the component\r\n\t */\r\n\t_dropdown_2_renderButtonText(rowData) {\r\n\t\tconst {name} = rowData;\r\n\t\treturn `${name}`;\r\n\t}\r\n\r\n\t/**\r\n\t * Events after selecting the item from the dropdown menu\r\n\t * @param {Number} idx - the id of the selected item in menu.\r\n\t * @param {Object} value - the value of the selected item.\r\n\t */\r\n\t_dropdown_2_onSelect = (idx,value) => {\r\n\t\tthis.setState({bikeid: `${value.id}`});\r\n\t}\r\n\r\n\t/**\r\n\t * Render each row in the menu\r\n\t * @param {Object} rowData - each data in bikemenu\r\n\t * @param {Number} rowID - the id of item in the menu\r\n\t * @param {Boolean} highlighted - Highlight the selected item.\r\n\t */\r\n\t_dropdown_2_renderRow(rowData, rowID, highlighted) {\r\n\t\tlet evenRow = rowID % 2;\r\n\t\t// return (\r\n\t\t// \t<TouchableHighlight underlayColor='cornflowerblue'>\r\n\t\t// \t\t<View style={[reportlost_styles.dropdown_2_row, {backgroundColor: evenRow ? 'lemonchiffon' : 'white'}]}>\r\n\t\t// \t\t\t<Text style={[reportlost_styles.dropdown_2_row_text, highlighted && {color: colours.ppGreen}]}>\r\n\t\t// \t\t\t\t{`${rowData.name} `}\r\n\t\t// \t\t\t</Text>\r\n\t\t// \t\t</View>\r\n\t\t// \t</TouchableHighlight>\r\n\t\t// );\r\n\t}\r\n\r\n\t/**\r\n\t * Renders a react native component.\r\n\t */\r\n\trender() {\r\n\t\t// return (\r\n\t\t// \t<View style={styles.container}>\r\n\t\t// \t\t<View style={reportlost_styles.row1}>\r\n\t\t// \t\t\t<View style={reportlost_styles.cell}>\r\n\t\t// \t\t\t\t{/* ListView is deprecated in the ModalDropdown component. If it gets removed from ReactNative, switch libraries. */}\r\n\t\t// \t\t\t\t<ModalDropdown ref=\"dropdown_2\"\r\n\t\t// \t\t\t\t\tstyle={reportlost_styles.dropdown_2}\r\n\t\t// \t\t\t\t\ttextStyle={reportlost_styles.dropdown_2_text}\r\n\t\t// \t\t\t\t\tdropdownStyle={reportlost_styles.dropdown_2_dropdown}\r\n\t\t// \t\t\t\t\toptions={this.state.bikeMenu}\r\n\t\t// \t\t\t\t\tdefaultValue = \"Please select your bike\"\r\n\t\t// \t\t\t\t\trenderButtonText={(rowData) => this._dropdown_2_renderButtonText(rowData)}\r\n\t\t// \t\t\t\t\trenderRow={this._dropdown_2_renderRow.bind(this)}\r\n\t\t// \t\t\t\t\tonSelect={(idx,value) => this._dropdown_2_onSelect(idx,value)}/>\r\n\t\t// \t\t\t</View>\r\n\t\t// \t\t</View>\r\n\t\t// \t\t<TextInput style = {reportlost_styles.row2}\r\n\t\t// \t\t\tlabel=\"Describe the Condition\"\r\n\t\t// \t\t\tmultiline={true}\r\n\t\t// \t\t\tblurOnSubmit\r\n\t\t// \t\t\tonChangeText={(text) => this.setState({text})}>\r\n\t\t// \t\t</TextInput>\r\n\t\t// \t\t<View>\r\n\t\t// \t\t\t<TouchableHighlight style={reportlost_styles.submitButton} onPress={this._handleClick.bind(this)}>\r\n\t\t// \t\t\t\t<Button color={'#000'} title=\"SUBMIT\"/>\r\n\t\t// \t\t\t</TouchableHighlight>\r\n\t\t// \t\t</View>\r\n\t\t// \t</View>\r\n\t\t// );\r\n\t}\r\n\r\n}\r\n\r\nexport default ReportLostView;",
    "static": true,
    "longname": "/Users/seanr/Downloads/temp/src/components/views/reportlost-view.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 778,
    "kind": "class",
    "name": "ReportLostView",
    "memberof": "src/components/views/reportlost-view.js",
    "static": true,
    "longname": "src/components/views/reportlost-view.js~ReportLostView",
    "access": "public",
    "export": true,
    "importPath": "PedalPatrol/src/components/views/reportlost-view.js",
    "importStyle": "ReportLostView",
    "description": "Class for the reportlost view",
    "lineNumber": 16,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 779,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/components/views/reportlost-view.js~ReportLostView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/views/reportlost-view.js~ReportLostView#constructor",
    "access": "public",
    "description": "Creates an instance of the report lost view",
    "lineNumber": 23,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "Component properties"
      }
    ]
  },
  {
    "__docId__": 780,
    "kind": "member",
    "name": "reportlostP",
    "memberof": "src/components/views/reportlost-view.js~ReportLostView",
    "static": false,
    "longname": "src/components/views/reportlost-view.js~ReportLostView#reportlostP",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 781,
    "kind": "member",
    "name": "state",
    "memberof": "src/components/views/reportlost-view.js~ReportLostView",
    "static": false,
    "longname": "src/components/views/reportlost-view.js~ReportLostView#state",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "{\"text\": *, \"bikeid\": *, \"bikeMenu\": *}"
      ]
    }
  },
  {
    "__docId__": 782,
    "kind": "member",
    "name": "navigationOptions",
    "memberof": "src/components/views/reportlost-view.js~ReportLostView",
    "static": true,
    "longname": "src/components/views/reportlost-view.js~ReportLostView.navigationOptions",
    "access": "public",
    "description": "Set the navigation options, change the header to handle a back button.",
    "lineNumber": 38,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Navigation option"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 783,
    "kind": "member",
    "name": "componentWillMount",
    "memberof": "src/components/views/reportlost-view.js~ReportLostView",
    "static": false,
    "longname": "src/components/views/reportlost-view.js~ReportLostView#componentWillMount",
    "access": "public",
    "description": "Component is about to mount, initialize the data before rendering.",
    "lineNumber": 49,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 784,
    "kind": "member",
    "name": "componentWillUnmount",
    "memberof": "src/components/views/reportlost-view.js~ReportLostView",
    "static": false,
    "longname": "src/components/views/reportlost-view.js~ReportLostView#componentWillUnmount",
    "access": "public",
    "description": "Component is aobut to unmount",
    "lineNumber": 73,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 785,
    "kind": "member",
    "name": "_onBack",
    "memberof": "src/components/views/reportlost-view.js~ReportLostView",
    "static": false,
    "longname": "src/components/views/reportlost-view.js~ReportLostView#_onBack",
    "access": "private",
    "description": "Back function to go back to the previous page.",
    "lineNumber": 80,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 786,
    "kind": "member",
    "name": "refreshState",
    "memberof": "src/components/views/reportlost-view.js~ReportLostView",
    "static": false,
    "longname": "src/components/views/reportlost-view.js~ReportLostView#refreshState",
    "access": "public",
    "description": "Refreshes the state of the component so new data is fetched.",
    "lineNumber": 88,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 787,
    "kind": "method",
    "name": "_handleClick",
    "memberof": "src/components/views/reportlost-view.js~ReportLostView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/views/reportlost-view.js~ReportLostView#_handleClick",
    "access": "private",
    "description": "handle the event after clicking submit.",
    "lineNumber": 97,
    "params": [],
    "return": null
  },
  {
    "__docId__": 788,
    "kind": "member",
    "name": "sendUpdate",
    "memberof": "src/components/views/reportlost-view.js~ReportLostView",
    "static": false,
    "longname": "src/components/views/reportlost-view.js~ReportLostView#sendUpdate",
    "access": "public",
    "description": "Get needed data from the view and send it to presenter.",
    "lineNumber": 110,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 789,
    "kind": "member",
    "name": "alertCallback",
    "memberof": "src/components/views/reportlost-view.js~ReportLostView",
    "static": false,
    "longname": "src/components/views/reportlost-view.js~ReportLostView#alertCallback",
    "access": "public",
    "description": "Sets a callback on what to do if there is a success or error when a bike is uploaded.",
    "lineNumber": 130,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "success",
        "description": "true: Uploading successful; false: Uploading failed"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 790,
    "kind": "method",
    "name": "_dropdown_2_renderButtonText",
    "memberof": "src/components/views/reportlost-view.js~ReportLostView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/views/reportlost-view.js~ReportLostView#_dropdown_2_renderButtonText",
    "access": "private",
    "description": "Render the text of button.",
    "lineNumber": 158,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "rowData",
        "description": "the row data of the bike menu"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Returns the name of the component"
    }
  },
  {
    "__docId__": 791,
    "kind": "member",
    "name": "_dropdown_2_onSelect",
    "memberof": "src/components/views/reportlost-view.js~ReportLostView",
    "static": false,
    "longname": "src/components/views/reportlost-view.js~ReportLostView#_dropdown_2_onSelect",
    "access": "private",
    "description": "Events after selecting the item from the dropdown menu",
    "lineNumber": 168,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "idx",
        "description": "the id of the selected item in menu."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "the value of the selected item."
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 792,
    "kind": "method",
    "name": "_dropdown_2_renderRow",
    "memberof": "src/components/views/reportlost-view.js~ReportLostView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/views/reportlost-view.js~ReportLostView#_dropdown_2_renderRow",
    "access": "private",
    "description": "Render each row in the menu",
    "lineNumber": 178,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "rowData",
        "description": "each data in bikemenu"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "rowID",
        "description": "the id of item in the menu"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "highlighted",
        "description": "Highlight the selected item."
      }
    ],
    "return": null
  },
  {
    "__docId__": 793,
    "kind": "method",
    "name": "render",
    "memberof": "src/components/views/reportlost-view.js~ReportLostView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/views/reportlost-view.js~ReportLostView#render",
    "access": "public",
    "description": "Renders a react native component.",
    "lineNumber": 194,
    "params": [],
    "return": null
  },
  {
    "__docId__": 794,
    "kind": "file",
    "name": "src/components/views/settings-view.js",
    "content": "import SettingsList from 'react-native-settings-list';\r\nimport React, {Component} from 'react';\r\nimport { View, Text, TextInput, StyleSheet, Image, PixelRatio, Alert } from 'react-native';\r\nimport { HeaderBackButton } from 'react-navigation';\r\n\r\nimport { styles, colours, settings_styles } from './stylesheets/settings-styles';\r\n\r\nimport BaseView from './view';\r\nimport TimeUtil from '../../util/timeutility';\r\n\r\n/**\r\n * Class for the Settings view\r\n * @extends BaseView\r\n */\r\nclass SettingsView extends BaseView {\r\n\r\n\t/**\r\n\t * Creates an instance of the setting view\r\n\t *\r\n\t * @constructor\r\n\t * @param {Object} props - Component properties\r\n\t */\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.onValueChange = this.onValueChange.bind(this);\r\n\t\tthis.state = {switchValue: false};\r\n\t}\r\n\r\n\t/**\r\n\t * Set the navigation options, change the header to handle a back button.\r\n\t *\r\n\t * @return {Object} Navigation option\r\n\t */\r\n\tstatic navigationOptions = ({navigation, transitioning}) => {\r\n\t\tconst { params = {} } = navigation.state;\r\n\t\t// const back = params._onBack ? params._onBack : () => 'default';\r\n\t\t// return {\r\n\t\t// \theaderLeft: (<HeaderBackButton disabled={transitioning} onPress={()=>{back()}}/>),\r\n\t\t// };\r\n\t}\r\n\r\n\t/**\r\n\t * Component is about to mount.\r\n\t */\r\n\tcomponentWillMount = () => {\r\n\t\tthis.props.navigation.setParams({\r\n\t\t\t_onBack: this._onBack,\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Back function to decide go back to the previous page.\r\n\t */\r\n\t_onBack = () => {\r\n\t\tthis.props.navigation.navigate('Tabs');\r\n\t}\r\n\r\n\t/**\r\n\t * toggle the status of item\r\n\t * @ param {Boolean} value - status of the item\r\n\t */\r\n\tonValueChange(value){\r\n\t\tthis.setState({switchValue: value});\r\n\t}\r\n\r\n\t/**\r\n\t * Flattens a list of objects into an object with properties.\r\n\t * Example:\r\n\t * \t\tOriginal: [{key: k1, value: v1}, {key: k2, value: v2}]\r\n\t * \t\tAfter:\t  {k1: v1, k2: v2}\r\n\t * \r\n\t * @param {List} params - A list of key, value pair objects\r\n\t * @return {Object} An object with properties \r\n\t */\r\n\tgetParams = (params) => {\r\n\t\tlet paramsAsObject = {};\r\n\t\tfor (let i=0; i < params.length; i++) {\r\n\t\t\t// Property value 'key' becomes the property in final object\r\n\t\t\tparamsAsObject[params[i].key] = params[i].value;\r\n\t\t}\r\n\t\treturn paramsAsObject;\r\n\t}\r\n\r\n\t/**\r\n\t * Navigate to a particular screen.\r\n\t *\r\n\t * @param {string} screen - The name of the screen to navigate to.\r\n\t * @param {Object} params - The params to add to the navigation call. Key, value pairs\r\n\t */\r\n\tnavigate = (screen, params) => {\r\n\t\tlet routeParams = {};\r\n\t\tif (params && params != null || params != undefined && params.length > 0) { // If there's parameters, flatten them\r\n\t\t\trouteParams = this.getParams(params);\r\n\t\t}\r\n\r\n\t\tthis.props.navigation.navigate({\r\n\t\t\trouteName: screen,\r\n\t\t\tparams: routeParams,\r\n\t\t\tkey: screen + TimeUtil.getDateTime()\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Renders a react native component.\r\n\t */\r\n\trender() {\r\n\t\tvar bgColor = '#DCE3F4';\r\n\t\t// return (\r\n\t\t// \t<View style={styles.container}>\r\n\r\n\t\t// \t\t<View style={styles.container}>\r\n\t\t// \t\t\t<SettingsList borderColor={colours.ppDarkGrey} defaultItemSize={60}>\r\n\t\t// \t\t\t\t<SettingsList.Item\r\n\t\t// \t\t\t\t\thasNavArrow={false}\r\n\t\t// \t\t\t\t\ttitle='Account Settings'\r\n\t\t// \t\t\t\t\ttitleStyle={settings_styles.settingsItem}\r\n\t\t// \t\t\t\t\titemWidth={50}\r\n\t\t// \t\t\t\t\tborderHide={'Both'}/>\r\n\t\t// \t  \t\t\t<SettingsList.Item\r\n\t\t// \t\t\t\t\ttitle='Change Password'\r\n\t\t// \t\t\t\t\tonPress= {() =>  Alert.alert('Route To change password')}\r\n\t\t// \t\t\t\t\tborderHide={'Both'}/>\r\n\t\t// \t\t\t<SettingsList.Header headerStyle={{marginTop:2}}/>\r\n\t\t// \t\t\t\t<SettingsList.Item\r\n\t\t// \t\t\t\t\thasNavArrow={false}\r\n\t\t// \t\t\t\t\ttitle='Device'\r\n\t\t// \t\t\t\t\ttitleStyle={settings_styles.settingsItem}\r\n\t\t// \t\t\t\t\titemWidth={50}\r\n\t\t// \t\t\t\t\tborderHide={'Both'}/>\r\n\t\t// \t  \t\t\t<SettingsList.Item\r\n\t\t// \t\t\t\t\ttitle='Notifications'\r\n\t\t// \t\t\t\t\tonPress= {() => this.navigate('Notifications')}/>\r\n\t\t// \t  \t\t<SettingsList.Header headerStyle={{marginTop:2}}/>\r\n\t\t// \t  \t\t\t<SettingsList.Item\r\n\t\t// \t\t\t\t   hasNavArrow={false}\r\n\t\t// \t\t\t\t\ttitleStyle={settings_styles.logout}\r\n\t\t// \t\t\t\t\ttitle='Logout'\r\n\t\t// \t\t\t\t\tonPress= {() => this.navigate('AuthLoading', [{ key: 'logout', value: true }])}/>\r\n\r\n\t\t// \t\t\t</SettingsList>\r\n\t\t// \t\t</View>\r\n\t\t// \t</View>\r\n\t\t// );\r\n\t}\r\n\r\n}\r\n\r\nexport default SettingsView;",
    "static": true,
    "longname": "/Users/seanr/Downloads/temp/src/components/views/settings-view.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 795,
    "kind": "class",
    "name": "SettingsView",
    "memberof": "src/components/views/settings-view.js",
    "static": true,
    "longname": "src/components/views/settings-view.js~SettingsView",
    "access": "public",
    "export": true,
    "importPath": "PedalPatrol/src/components/views/settings-view.js",
    "importStyle": "SettingsView",
    "description": "Class for the Settings view",
    "lineNumber": 15,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 796,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/components/views/settings-view.js~SettingsView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/views/settings-view.js~SettingsView#constructor",
    "access": "public",
    "description": "Creates an instance of the setting view",
    "lineNumber": 23,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "Component properties"
      }
    ]
  },
  {
    "__docId__": 798,
    "kind": "member",
    "name": "state",
    "memberof": "src/components/views/settings-view.js~SettingsView",
    "static": false,
    "longname": "src/components/views/settings-view.js~SettingsView#state",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "{\"switchValue\": *}"
      ]
    }
  },
  {
    "__docId__": 799,
    "kind": "member",
    "name": "navigationOptions",
    "memberof": "src/components/views/settings-view.js~SettingsView",
    "static": true,
    "longname": "src/components/views/settings-view.js~SettingsView.navigationOptions",
    "access": "public",
    "description": "Set the navigation options, change the header to handle a back button.",
    "lineNumber": 34,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Navigation option"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 800,
    "kind": "member",
    "name": "componentWillMount",
    "memberof": "src/components/views/settings-view.js~SettingsView",
    "static": false,
    "longname": "src/components/views/settings-view.js~SettingsView#componentWillMount",
    "access": "public",
    "description": "Component is about to mount.",
    "lineNumber": 45,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 801,
    "kind": "member",
    "name": "_onBack",
    "memberof": "src/components/views/settings-view.js~SettingsView",
    "static": false,
    "longname": "src/components/views/settings-view.js~SettingsView#_onBack",
    "access": "private",
    "description": "Back function to decide go back to the previous page.",
    "lineNumber": 54,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 802,
    "kind": "method",
    "name": "onValueChange",
    "memberof": "src/components/views/settings-view.js~SettingsView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/views/settings-view.js~SettingsView#onValueChange",
    "access": "public",
    "description": "toggle the status of item\n@ param {Boolean} value - status of the item",
    "lineNumber": 62,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 803,
    "kind": "member",
    "name": "getParams",
    "memberof": "src/components/views/settings-view.js~SettingsView",
    "static": false,
    "longname": "src/components/views/settings-view.js~SettingsView#getParams",
    "access": "public",
    "description": "Flattens a list of objects into an object with properties.\nExample:\n\t\tOriginal: [{key: k1, value: v1}, {key: k2, value: v2}]\n\t\tAfter:\t  {k1: v1, k2: v2}",
    "lineNumber": 75,
    "params": [
      {
        "nullable": null,
        "types": [
          "List"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "A list of key, value pair objects"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "An object with properties"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 804,
    "kind": "member",
    "name": "navigate",
    "memberof": "src/components/views/settings-view.js~SettingsView",
    "static": false,
    "longname": "src/components/views/settings-view.js~SettingsView#navigate",
    "access": "public",
    "description": "Navigate to a particular screen.",
    "lineNumber": 90,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "screen",
        "description": "The name of the screen to navigate to."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "The params to add to the navigation call. Key, value pairs"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 805,
    "kind": "method",
    "name": "render",
    "memberof": "src/components/views/settings-view.js~SettingsView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/views/settings-view.js~SettingsView#render",
    "access": "public",
    "description": "Renders a react native component.",
    "lineNumber": 106,
    "params": [],
    "return": null
  },
  {
    "__docId__": 806,
    "kind": "file",
    "name": "src/components/views/signup-view.js",
    "content": "import React, {Component} from 'react';\nimport { View, Text, StyleSheet, Image, PixelRatio, Alert,} from 'react-native';\nimport { HeaderBackButton } from 'react-navigation';\nimport { TextInput } from 'react-native-paper';\n\nimport { styles, text, signup_styles } from './stylesheets/signup-styles';\n\nimport BaseView from './view';\nimport SafeArea from './helpers/safearea';\nimport LoginButton from './helpers/loginbutton';\nimport SignUpPresenter from '../presenters/signup-presenter';\n\n/**\n * Class for the SignUp view\n * @extends BaseView\n */\nclass SignUpView extends BaseView {\n\t/**\n\t * Set the navigation options, change the header to handle a back button.\n\t *\n\t * @param {Object} navigation, transitioning - Navigation properties\n\t * @return {Object} Navigation option\n\t */\n\tstatic navigationOptions = ({navigation, transitioning}) => {\n\t\tconst { params = {} } = navigation.state;\n\t\tconst back = params._onBack ? params._onBack : () => 'default';\n\t\t// return {\n\t\t// \theaderLeft: (<HeaderBackButton disabled={transitioning} onPress={()=>{back()}}/>)\n\t\t// }\n\t}\n\n\t\n\t/**\n\t * Create an instance of SignUpView\n\t *\n\t * @constructor\n\t * @param {Object} props - Component properties\n\t */\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tusername: '',\n\t\t\tpassword: '',\n\t\t\tRPassword:'',\n\t\t};\n\t\tthis.SignupP = new SignUpPresenter(this);\n\t}\n\n\t/**\n\t * This function will trigger before the component mounts\n\t */\n\tcomponentWillMount = () => {\n\t\tthis.props.navigation.setParams({\n\t\t\t_onBack: this._onBack\n\t\t});\n\t}\n\n\t/**\n\t * Component will unmount after this method is called, do any clean up here\n\t * Call viewUnmounting in base class so it can do any cleanup for the view before calling the presenter destroy method\n\t */\n\tcomponentWillUnmount = () => {\n\t\tthis.viewUnmounting(this.SignupP);\n\t}\n\n\t/**\n\t * When the back button is clicked, check if the user was editing.\n\t */\n\t_onBack = () => {\n\t\tthis.props.navigation.navigate('Login');\n\t}\n\n\t/**\n\t * Handle the click of the button\n\t */\n\t_handleClick() {\n\t\tif (this.state.password != this.state.RPassword) {\n\t\t\tAlert.alert('Please confirm your password!')}\n\t\telse {\n\t\t\tif (this.SignupP.checkInput(this.state.username, this.state.password, this.reportError)) {\n\t\t\t\tthis.sendUpdate();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Send an update to the presenter with the relevant data.\n\t */\n\tsendUpdate = () => {\n\t\t// Extract data from components\n\t\tlet new_data = {\n\t\t\tdata:\t{\n\t\t\t\tusername: this.state.username,\n\t\t\t\tpassword: this.state.password\n\t\t\t}\n\t\t}\n\t\tlet data = new_data;\n\t\tthis.SignupP.update(data, this.signupCallback);\n\t}\n\n\t/**\n\t * Refreshes the state of the component so new data is fetched.\n\t */\n\trefreshState = () => {\n\t\tthis.setState({\n\t\t\trefresh: !this.state.refresh\n\t\t});\n\t};\n\n\t/**\n\t * Called if the user input username or password is invalid.\n\t * @param {Object} errmsg - the error message that corresponding to the problem.\n\t */\n\treportError = (errmsg) => {\n\t\tAlert.alert(\n\t\t\t\t'Error',\n\t\t\t\terrmsg,\n\t\t\t\t[\n\t\t\t\t\t{text: 'OK', onPress: () => console.log('OK Pressed')},\n\t\t\t\t],\n\t\t\t\t{cancelable: false},\n\t\t\t);\n\t}\n\n\t/**\n\t * Callback for when the signup completes or fails.\n\t *\n\t * @param {Boolean} result - If the signup was successful or not\n\t */\nsignupCallback = (result) => {\n\t\tif (result) {\n\t\t\tAlert.alert(\"Please complete the email verification.\");\n\t\t\tthis._onBack();\n\t\t} else {\n\t\t\tAlert.alert(\"The email entered already exists.\");\n\t\t}\n\t}\n\n\n\t/**\n\t * Extract data from the component's view and send an update to the presenter to do any logic before sending it to the model\n\t */\n\trender() {\n\t\t// return (\n\t\t// \t<View style={styles.container}>\n\t\t// \t\t<SafeArea/>\n\t\t// \t\t<View style={signup_styles.editGroup}>\n\t\t// \t\t\t<View style={signup_styles.username}>\n\t\t// \t\t\t\t<TextInput\n\t\t// \t\t\t\t\tstyle={text.textInput}\n\t\t// \t\t\t\t\tlabel=\"Username\"\n\t\t// \t\t\t\t\ttextContentType=\"username\"\n\t\t// \t\t\t\t\tvalue={this.state.username.toLowerCase()}\n\t\t// \t\t\t\t\tonChangeText={(username) => this.setState({username})}/>\n\t\t// \t\t\t</View>\n\n\t\t// \t\t\t<View style={signup_styles.password}>\n\t\t// \t\t\t\t<TextInput\n\t\t// \t\t\t\t\tstyle={text.textInput}\n\t\t// \t\t\t\t\tlabel=\"Password\"\n\t\t// \t\t\t\t\tsecureTextEntry\n\t\t// \t\t\t\t\ttextContentType=\"newPassword\"\n\t\t// \t\t\t\t\tvalue={this.state.password}\n\t\t// \t\t\t\t\tonChangeText={(password) => this.setState({password})}/>\n\t\t// \t\t\t</View>\n\t\t// \t\t\t<View style={signup_styles.password}>\n\t\t// \t\t\t\t<TextInput\n\t\t// \t\t\t\t\tstyle={text.textInput}\n\t\t// \t\t\t\t\tlabel=\"Re-enter your password\"\n\t\t// \t\t\t\t\tsecureTextEntry\n\t\t// \t\t\t\t\ttextContentType=\"newPassword\"\n\t\t// \t\t\t\t\tvalue={this.state.RPassword}\n\t\t// \t\t\t\t\tonChangeText={(RPassword) => this.setState({RPassword})}/>\n\t\t// \t\t\t</View>\n\t\t\t\t\t\n\t\t// \t\t\t<View style={{marginTop: 30}}>\n\t\t// \t\t\t\t<LoginButton text=\"SIGN UP\" onPress={this._handleClick.bind(this)}/>\n\t\t// \t\t\t</View>\n\t\t// \t\t</View>\n\t\t// \t</View>\n\t\t// );\n\t}\n}\n\nexport default SignUpView;",
    "static": true,
    "longname": "/Users/seanr/Downloads/temp/src/components/views/signup-view.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 807,
    "kind": "class",
    "name": "SignUpView",
    "memberof": "src/components/views/signup-view.js",
    "static": true,
    "longname": "src/components/views/signup-view.js~SignUpView",
    "access": "public",
    "export": true,
    "importPath": "PedalPatrol/src/components/views/signup-view.js",
    "importStyle": "SignUpView",
    "description": "Class for the SignUp view",
    "lineNumber": 17,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 808,
    "kind": "member",
    "name": "navigationOptions",
    "memberof": "src/components/views/signup-view.js~SignUpView",
    "static": true,
    "longname": "src/components/views/signup-view.js~SignUpView.navigationOptions",
    "access": "public",
    "description": "Set the navigation options, change the header to handle a back button.",
    "lineNumber": 24,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "navigation,",
        "description": "transitioning - Navigation properties"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Navigation option"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 809,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/components/views/signup-view.js~SignUpView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/views/signup-view.js~SignUpView#constructor",
    "access": "public",
    "description": "Create an instance of SignUpView",
    "lineNumber": 39,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "Component properties"
      }
    ]
  },
  {
    "__docId__": 810,
    "kind": "member",
    "name": "state",
    "memberof": "src/components/views/signup-view.js~SignUpView",
    "static": false,
    "longname": "src/components/views/signup-view.js~SignUpView#state",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "type": {
      "types": [
        "{\"username\": *, \"password\": *, \"RPassword\": *}"
      ]
    }
  },
  {
    "__docId__": 811,
    "kind": "member",
    "name": "SignupP",
    "memberof": "src/components/views/signup-view.js~SignUpView",
    "static": false,
    "longname": "src/components/views/signup-view.js~SignUpView#SignupP",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 812,
    "kind": "member",
    "name": "componentWillMount",
    "memberof": "src/components/views/signup-view.js~SignUpView",
    "static": false,
    "longname": "src/components/views/signup-view.js~SignUpView#componentWillMount",
    "access": "public",
    "description": "This function will trigger before the component mounts",
    "lineNumber": 52,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 813,
    "kind": "member",
    "name": "componentWillUnmount",
    "memberof": "src/components/views/signup-view.js~SignUpView",
    "static": false,
    "longname": "src/components/views/signup-view.js~SignUpView#componentWillUnmount",
    "access": "public",
    "description": "Component will unmount after this method is called, do any clean up here\nCall viewUnmounting in base class so it can do any cleanup for the view before calling the presenter destroy method",
    "lineNumber": 62,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 814,
    "kind": "member",
    "name": "_onBack",
    "memberof": "src/components/views/signup-view.js~SignUpView",
    "static": false,
    "longname": "src/components/views/signup-view.js~SignUpView#_onBack",
    "access": "private",
    "description": "When the back button is clicked, check if the user was editing.",
    "lineNumber": 69,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 815,
    "kind": "method",
    "name": "_handleClick",
    "memberof": "src/components/views/signup-view.js~SignUpView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/views/signup-view.js~SignUpView#_handleClick",
    "access": "private",
    "description": "Handle the click of the button",
    "lineNumber": 76,
    "params": [],
    "return": null
  },
  {
    "__docId__": 816,
    "kind": "member",
    "name": "sendUpdate",
    "memberof": "src/components/views/signup-view.js~SignUpView",
    "static": false,
    "longname": "src/components/views/signup-view.js~SignUpView#sendUpdate",
    "access": "public",
    "description": "Send an update to the presenter with the relevant data.",
    "lineNumber": 89,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 817,
    "kind": "member",
    "name": "refreshState",
    "memberof": "src/components/views/signup-view.js~SignUpView",
    "static": false,
    "longname": "src/components/views/signup-view.js~SignUpView#refreshState",
    "access": "public",
    "description": "Refreshes the state of the component so new data is fetched.",
    "lineNumber": 104,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 818,
    "kind": "member",
    "name": "reportError",
    "memberof": "src/components/views/signup-view.js~SignUpView",
    "static": false,
    "longname": "src/components/views/signup-view.js~SignUpView#reportError",
    "access": "public",
    "description": "Called if the user input username or password is invalid.",
    "lineNumber": 114,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "errmsg",
        "description": "the error message that corresponding to the problem."
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 819,
    "kind": "member",
    "name": "signupCallback",
    "memberof": "src/components/views/signup-view.js~SignUpView",
    "static": false,
    "longname": "src/components/views/signup-view.js~SignUpView#signupCallback",
    "access": "public",
    "description": "Callback for when the signup completes or fails.",
    "lineNumber": 130,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "result",
        "description": "If the signup was successful or not"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 820,
    "kind": "method",
    "name": "render",
    "memberof": "src/components/views/signup-view.js~SignUpView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/views/signup-view.js~SignUpView#render",
    "access": "public",
    "description": "Extract data from the component's view and send an update to the presenter to do any logic before sending it to the model",
    "lineNumber": 143,
    "params": [],
    "return": null
  },
  {
    "__docId__": 821,
    "kind": "file",
    "name": "src/components/views/view.js",
    "content": "import React, { Component } from 'react';\n\n/**\n * Base class for all the views\n * @extends React.Component\n */\nclass BaseView extends Component {\n\t/**\n\t * Render objects to the screen.\n\t */\n\trender() {\n\t\tthrow new Error('Method must be implemented!');\n\t}\n\n\n\t/**\n\t * Refreshes the state of the presenter.\n\t */\n\trefreshState = () => {\n\t\tthrow new Error('Method must be implemented');\n\t}\n\n\n\t/**\n\t * Component will unmount after this method is called, do any clean up here.\n\t *\n\t * @param {Class} A presenter class instance\n\t */\n\tviewUnmounting = (presenter) => {\n\t\tpresenter.onDestroy();\n\t}\n}\n\nexport default BaseView;",
    "static": true,
    "longname": "/Users/seanr/Downloads/temp/src/components/views/view.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 822,
    "kind": "class",
    "name": "BaseView",
    "memberof": "src/components/views/view.js",
    "static": true,
    "longname": "src/components/views/view.js~BaseView",
    "access": "public",
    "export": true,
    "importPath": "PedalPatrol/src/components/views/view.js",
    "importStyle": "BaseView",
    "description": "Base class for all the views",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 823,
    "kind": "method",
    "name": "render",
    "memberof": "src/components/views/view.js~BaseView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/views/view.js~BaseView#render",
    "access": "public",
    "description": "Render objects to the screen.",
    "lineNumber": 11,
    "params": [],
    "return": null
  },
  {
    "__docId__": 824,
    "kind": "member",
    "name": "refreshState",
    "memberof": "src/components/views/view.js~BaseView",
    "static": false,
    "longname": "src/components/views/view.js~BaseView#refreshState",
    "access": "public",
    "description": "Refreshes the state of the presenter.",
    "lineNumber": 19,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 825,
    "kind": "member",
    "name": "viewUnmounting",
    "memberof": "src/components/views/view.js~BaseView",
    "static": false,
    "longname": "src/components/views/view.js~BaseView#viewUnmounting",
    "access": "public",
    "description": "Component will unmount after this method is called, do any clean up here.",
    "lineNumber": 29,
    "params": [
      {
        "nullable": null,
        "types": [
          "Class"
        ],
        "spread": false,
        "optional": false,
        "name": "A",
        "description": "presenter class instance"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 826,
    "kind": "file",
    "name": "src/config/config.js",
    "content": "export default {\t\n\t\"databaseConfig\": {\n\t\t\"apiKey\": \"AIzaSyBUzSFTc_c5k3hwTX6ySfbfxLu0xASzpDY\",\n\t    \"authDomain\": \"test-f4788.firebaseapp.com\",\n\t    \"databaseURL\": \"https://test-f4788.firebaseio.com\",\n\t    \"projectId\": \"test-f4788\",\n\t    \"storageBucket\": \"test-f4788.appspot.com\",\n\t    \"messagingSenderId\": \"131545184736\"\n\t},\n\t\"config\": {\n\t\t\"appId\": \"com.pedalpatrol\",\n\t\t\"apiKey\": \"AIzaSyBUzSFTc_c5k3hwTX6ySfbfxLu0xASzpDY\",\n\t\t\"authDomain\": \"test-f4788.firebaseapp.com\",\n\t\t\"databaseURL\": \"https://test-f4788.firebaseio.com\",\n\t\t\"projectId\": \"test-f4788\",\n\t\t\"storageBucket\": \"test-f4788.appspot.com\",\n\t\t\"messagingSenderId\": \"131545184736\"\n\t},\n\t\"mapquery\": {\n\t\t\"key\": \"AIzaSyCS9j9HB64sW9w8LgvtxVET6LqoET78OcA\",\n\t}\t\t\n}",
    "static": true,
    "longname": "/Users/seanr/Downloads/temp/src/config/config.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 827,
    "kind": "file",
    "name": "src/config/navigationservice.js",
    "content": "import { NavigationActions } from 'react-navigation';\nimport TimeUtil from '../util/timeutility';\n\n/**\n * Class for navigation service to facilitate navigating outside of the root stack navigator.\n */\nclass NavigationService {\n\t/**\n\t * Creates an instance of NavigationService.\n\t *\n\t * @constructor\n\t */\n\tconstructor() {\n\t\tthis._navigator = null;\n\t}\n\n\t/**\n\t * Sets the top level constructor.\n\t *\n\t * @param {Object} navigatorRef - A reference to the top level navigator\n\t */\n\tsetTopLevelNavigator(navigatorRef) {\n\t\tthis._navigator = navigatorRef;\n\t}\n\n\t/**\n\t * Navigate to a specific route. The key property makes sure the component remounts if it has already mounted \n\t * because it is technically a new component.\n\t *\n\t * @param {string} routeName - A specific route defined in navigation.js\n\t * @param {Object} params - Parameters for the component being navigated to\n\t */\n\tnavigate(routeName, params) {\n\t\tthis._navigator.dispatch(\n\t\t\tNavigationActions.navigate({\n\t\t\t\trouteName,\n\t\t\t\tparams,\n\t\t\t\tkey: routeName + TimeUtil.getDateTime()\n\t\t\t})\n\t\t);\n\t}\n}\n\nconst NavigatorService = new NavigationService();\nexport default NavigatorService;",
    "static": true,
    "longname": "/Users/seanr/Downloads/temp/src/config/navigationservice.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 828,
    "kind": "class",
    "name": "NavigationService",
    "memberof": "src/config/navigationservice.js",
    "static": true,
    "longname": "src/config/navigationservice.js~NavigationService",
    "access": "public",
    "export": true,
    "importPath": "PedalPatrol/src/config/navigationservice.js",
    "importStyle": null,
    "description": "Class for navigation service to facilitate navigating outside of the root stack navigator.",
    "lineNumber": 7,
    "pseudoExport": true,
    "interface": false
  },
  {
    "__docId__": 829,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/config/navigationservice.js~NavigationService",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/config/navigationservice.js~NavigationService#constructor",
    "access": "public",
    "description": "Creates an instance of NavigationService.",
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ]
  },
  {
    "__docId__": 830,
    "kind": "member",
    "name": "_navigator",
    "memberof": "src/config/navigationservice.js~NavigationService",
    "static": false,
    "longname": "src/config/navigationservice.js~NavigationService#_navigator",
    "access": "private",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 831,
    "kind": "method",
    "name": "setTopLevelNavigator",
    "memberof": "src/config/navigationservice.js~NavigationService",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/config/navigationservice.js~NavigationService#setTopLevelNavigator",
    "access": "public",
    "description": "Sets the top level constructor.",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "navigatorRef",
        "description": "A reference to the top level navigator"
      }
    ],
    "return": null
  },
  {
    "__docId__": 833,
    "kind": "method",
    "name": "navigate",
    "memberof": "src/config/navigationservice.js~NavigationService",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/config/navigationservice.js~NavigationService#navigate",
    "access": "public",
    "description": "Navigate to a specific route. The key property makes sure the component remounts if it has already mounted \nbecause it is technically a new component.",
    "lineNumber": 33,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "routeName",
        "description": "A specific route defined in navigation.js"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "Parameters for the component being navigated to"
      }
    ],
    "return": null
  },
  {
    "__docId__": 834,
    "kind": "variable",
    "name": "NavigatorService",
    "memberof": "src/config/navigationservice.js",
    "static": true,
    "longname": "src/config/navigationservice.js~NavigatorService",
    "access": "public",
    "export": true,
    "importPath": "PedalPatrol/src/config/navigationservice.js",
    "importStyle": "NavigatorService",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "type": {
      "types": [
        "src/config/navigationservice.js~NavigationService"
      ]
    }
  },
  {
    "__docId__": 835,
    "kind": "file",
    "name": "src/util/authenticationstate.js",
    "content": "/**\n * Class to hold a temporary authentication state for the user.\n * Only used to be able to retrieve the user ID rather quickly since asyncstorage and database calls are asynchronous.\n */\nclass AuthenticationState {\n\t/**\n\t * Creates an instance of AuthenticationState\n\t *\n\t * @constructor\n\t */\n\tconstructor() {\n\t\tthis.currentUserID = null;\n\t}\n\n\t/**\n\t * Sets the current user id.\n\t *\n\t * @param {string} id - The current user's id\n\t */\n\tsetCurrentUserID(id) {\n\t\tthis.currentUserID = id;\n\t}\n\n\t/**\n\t * Returns the current user's id.\n\t *\n\t * @return {string} The current user's id\n\t */\n\tgetCurrentUserID() {\n\t\treturn this.currentUserID;\n\t}\n}\n\nconst AuthState = new AuthenticationState();\nexport default AuthState;",
    "static": true,
    "longname": "/Users/seanr/Downloads/temp/src/util/authenticationstate.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 836,
    "kind": "class",
    "name": "AuthenticationState",
    "memberof": "src/util/authenticationstate.js",
    "static": true,
    "longname": "src/util/authenticationstate.js~AuthenticationState",
    "access": "public",
    "export": true,
    "importPath": "PedalPatrol/src/util/authenticationstate.js",
    "importStyle": null,
    "description": "Class to hold a temporary authentication state for the user.\nOnly used to be able to retrieve the user ID rather quickly since asyncstorage and database calls are asynchronous.",
    "lineNumber": 5,
    "pseudoExport": true,
    "interface": false
  },
  {
    "__docId__": 837,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/util/authenticationstate.js~AuthenticationState",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/authenticationstate.js~AuthenticationState#constructor",
    "access": "public",
    "description": "Creates an instance of AuthenticationState",
    "lineNumber": 11,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ]
  },
  {
    "__docId__": 838,
    "kind": "member",
    "name": "currentUserID",
    "memberof": "src/util/authenticationstate.js~AuthenticationState",
    "static": false,
    "longname": "src/util/authenticationstate.js~AuthenticationState#currentUserID",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 839,
    "kind": "method",
    "name": "setCurrentUserID",
    "memberof": "src/util/authenticationstate.js~AuthenticationState",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/authenticationstate.js~AuthenticationState#setCurrentUserID",
    "access": "public",
    "description": "Sets the current user id.",
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "The current user's id"
      }
    ],
    "return": null
  },
  {
    "__docId__": 841,
    "kind": "method",
    "name": "getCurrentUserID",
    "memberof": "src/util/authenticationstate.js~AuthenticationState",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/authenticationstate.js~AuthenticationState#getCurrentUserID",
    "access": "public",
    "description": "Returns the current user's id.",
    "lineNumber": 29,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The current user's id"
    },
    "params": []
  },
  {
    "__docId__": 842,
    "kind": "variable",
    "name": "AuthState",
    "memberof": "src/util/authenticationstate.js",
    "static": true,
    "longname": "src/util/authenticationstate.js~AuthState",
    "access": "public",
    "export": true,
    "importPath": "PedalPatrol/src/util/authenticationstate.js",
    "importStyle": "AuthState",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "src/util/authenticationstate.js~AuthenticationState"
      ]
    }
  },
  {
    "__docId__": 843,
    "kind": "file",
    "name": "src/util/database.js",
    "content": "// import firebase from 'react-native-firebase';\nimport firebase from 'firebase'; // Using regular firebase here because there are some problems when trying to move to react-native-firebase \nimport 'firebase/storage'; // Necessary for jest tests\nimport { Platform, NativeModules } from 'react-native';\nimport { LoginButton, AccessToken, LoginManager } from 'react-native-fbsdk';\n\nimport {default as config} from '../config/config';\nimport TimeUtil from './timeutility';\n\nconst { RNTwitterSignIn } = NativeModules;\n\nconst BikeImages = 'BikeImages/';\nconst ProfileImages = 'ProfileImages/';\n\n/**\n * Class for the firebase database connection and operations\n */\nclass FirebaseDatabase {\n\t/**\n\t * Creates an instance of the FirebaseDatabase class.\n\t * Initializes the app as a firebase app and sets up the storage references.\n\t * @constructor\n\t */\n\tconstructor() {\n\t\tthis.currentUser = null;\n\n\t\tif (!firebase.apps.length) {\n\t\t\tfirebase.initializeApp(config.databaseConfig);\n\t\t}\n\t\tthis.setupDatabaseRef();\n\t\tthis.setupStorageRef();\n\t}\n\n\t/**\n\t * Set up the database reference to the PProject table\n\t */\n\tsetupDatabaseRef() {\n\t\tthis.refDB = firebase.database().ref('PProject/');\n\t}\n\n\t/**\n\t * Set up the storage reference\n\t */\n\tsetupStorageRef() {\n\t\tthis.refStorage = firebase.storage().ref();\n\t}\n\n\t/**\n\t * Returns the storage without a reference.\n\t *\n\t * @return {Object} The storage without reference\n\t */\n\tgetStorageWithoutRef() {\n\t\treturn firebase.storage();\n\t}\n\n\n\n\t signUp(email,password,onSuccess, onError) {\n\t\treturn firebase.auth().createUserWithEmailAndPassword(email,password)\n\t }\n\n\t\tcheckVerify() {\n\t\tlet user = firebase.auth().currentUser;\n\t\tlet errorMessage='';\n\t\t\t\tif (user.emailVerified == false) {\n\t\t\t\t\tconsole.log(\"user email verified\"+user.emailVerified);\n\t\t\t\t\terrorMessage = 'email not verified';\n\t\t\t\t\treturn errorMessage;\n\t\t\t\t} else {\n\t\t\t\t\treturn true;\n\t\t\t\t\t// successful login\n\t\t\t\t}\n\t\t\t}\n\n  \tsendEmail() {\n  \t\t//console.log(\"user in send email is : \"+ user);\n\t\tfirebase.auth().currentUser.sendEmailVerification().then(function() {\n\t\t\t// Email Verification sent!\n\t\t\t// [START_EXCLUDE]\n\t\t\t// [END_EXCLUDE]\n\t\t}).catch(function(error) {\n\t\t\t// Handle Errors here.\n\t\t\tlet errorCode = error.code;\n\t\t\tlet errorMessage = error.message;\n\t\t\tconsole.log('error for email:      '+ errorMessage);\n\t\t\t});\n\t\t}\n\n  \tsendresetEmail(onError) {\n\t\t\tlet email = getCurrentUserEmail();\n\t\tfirebase.auth().sendPasswordResetEmail(email).then(function() {\n\t\t\t// Email sent.\n\t\t}).catch(function(error) {\n\t\t\t// An error happened.\n\t\t\tlet errorCode = error.code;\n\t\t\tlet errorMessage = error.message;\n\t\t\tonError(errorMessage);\n\t\t});\n\n\t}\n\n\t/**\n\t * Accesses Firebase data to sign in with email and password.\n\t * This function is called asynchronously. Use 'async' and 'await'.\n\t *\n\t * @param {string} email - A user's email\n\t * @param {string} password - A user's password\n\t * @param {Function} onError - A function callback to execute on error\n\t */\n\tasync signIn(email, password, onError) {\n\t\tawait firebase.auth().signInWithEmailAndPassword(email, password).catch(onError);\n\t}\n\n\tsigninwithFB(onError) {\n\t\t//console.log('begin signinwithFB');\n\t\tLoginManager.logInWithReadPermissions(['public_profile', 'email']).then(\n\t\t// console.log('walk into else'),\n\t\tAccessToken.getCurrentAccessToken().then(function(data) {\n\t\t\tlet accessToken = firebase.auth.FacebookAuthProvider.credential(data.accessToken);\n\t\t\t\tconsole.log('accessToken'+accessToken)\n\t\t\t\tthis.handleFirebaseLogin(accessToken);\n\t\t\t}.bind(this))\n\t\t);\n\t}\n\n\tsignInwithTwitter(onError){\n\t\tRNTwitterSignIn.init('pdfOq2bGgmAD59pe3241W1hMg','xPRtJaBCqmZoFKPV7N8YcllUqOi4d0QWR521rebCQFcMUFGYE3');\n\t\tRNTwitterSignIn.logIn().then((loginData)=>{\n\t\t\tlet accessToken = firebase.auth\n\t\t\t\t\t\t\t\t\t.TwitterAuthProvider\n\t\t\t\t\t\t\t\t\t.credential(\n\t\t\t\t\t\t\t\t\t\tloginData.authToken,\n\t\t\t\t\t\t\t\t\t\tloginData.authTokenSecret\n\t\t\t\t\t\t\t\t\t);\n\t\t\tthis.handleFirebaseLogin(accessToken);\n\t\t}).catch((error) => {\n\t\t\tconsole.log(error)\n\t\t\tonError('Unable to sign-in with Twitter');\n\t\t});\n\t\tuser = firebase.auth().currentUser;\n\t\t\tthis.setAccount(user.uid);\n\t\t// console.log('did login')\n\t}\n\n\thandleFirebaseLogin(accessToken) {\n\t\t// console.log(accessToken)\n\t\tfirebase.auth().signInAndRetrieveDataWithCredential(accessToken).then((data)=> {\n\t\t\tlet user = firebase.auth().currentUser;\n\t\t}).catch((error)=> {\n\t\t\tlet errorCode = error.code;\n\t\t\tlet errorMessage = error.message;\n\t\t\tlet email = error.email;\n\t\t\tlet credential = error.credential;\n\t\t\tif (errorCode === 'auth/account-exists-with-different-credential') {\n\t\t\t\t// Email already associated with another account.\n\t\t\t}\n\t\t})\n\t\tconsole.log('did into handle firebase login')\n\t}\n\n\n\t setAccount(user){\n\t\t\t//let user = firebase.auth().currentUser;\n\t\t\tconsole.log(\"user in set account is: \"+user.uid);\n\t\t\tthis.refDB.child('Users/').child(user.uid).set({\n\t\t\tid:user.uid,\n\t\t\tcircle_lat:\"\",\n\t\t\tcircle_long:\"\",\n\t\t\tcircle_r:\"\",\n\t\t\tdeviceToken:\"\",\n\t\t\tfull_name:'',\n\t\t\tphoneNum:\"\",\n\t\t\temail:user.email,\n\t\t\tthumbnail:['http://chittagongit.com//images/default-user-icon/default-user-icon-8.jpg']\n\n\n\t\t\t});\n\t\t}\n\n\t/**\n\t * Sign out of the database.\n\t *\n\t * @param {Function} onSuccess - A callback function on a successful signout\n\t * @param {Function} onError - A callback function on a failure to signout\n\t */\n\tsignOut(onSuccess, onError) {\n\t\tthis.currentUser = null;\n\t\tfirebase.auth().signOut().then(onSuccess, onError);\n\t}\n\n\n\t/** \n\t * Write to the database in table 'Bike' using the id as the child. Adds a date time and owner to the data\n\t *\n\t * @param {Object} bikeData - Bike data to add to the database\n\t * @param {Function} onSuccess - A function callback to execute on the success of writing to the database\n\t * @param {Function} onError - A function callback to execute on an error when writing to the database\n\t */\n\twriteBikeData(bikeData, onSuccess, onError) {\n\t\tthis.getCurrentUser((userID) => {\n\t\t\tbikeData.owner = userID;\t\n\t\t\tthis.refDB.child('Bike/').child(bikeData.id).set(bikeData, onSuccess).catch(onError);\n\t\t});\n\t}\n\n\t/**\n\t * Write to the database in the table 'Users' using the user id as the child.\n\t *\n\t * @param {Object} profileData - The data to upload\n\t * @param {Function} onSuccess - A function callback to execute on the success of writing to the database\n\t * @param {Function} onError - A function callback to execute on an error when writing to the database \n\t */\n\twriteProfileData(profileData, onSuccess, onError) {\n\t\tthis.refDB.child('Users/').child(profileData.id).set(profileData, onSuccess).catch(onError);\n\t}\n\n\t/**\n\t * Overwrites data in the database by reading the data, merging it with the new values and writing back to the same ID.\n\t *\n\t * @param {Object} newBikeData - New data to write\n\t * @param {Function} onSuccess - A function callback to run when writing is successful\n\t * @param {Function} onError - A function callback to run when writing fails\n\t */\n\teditBikeData(newBikeData, onSuccess, onError) {\n\t\tconst bikeID = newBikeData.id;\n\n\t\tthis.refDB.child('Bike/').once('value', (snapshot) => {\n\t\t\tlet bikeData = snapshot.val();\n\t\t\tlet originalBikeData = bikeData[bikeID];\n\t\t\tlet updatedObj = this.merge(originalBikeData, newBikeData);\n\t\t\tthis.refDB.child('Bike/').child(bikeID).set(updatedObj, onSuccess).catch(onError);\n\t\t}).catch((error) => {\n\t\t\tonError(error);\n\t\t\tconsole.log(error);\n\t\t});\n\t}\n\n\t/**\n\t * Overwrites data in the database by reading the data, merging it with the new values and writing back to the same ID.\n\t *\n\t * @param {Object} newProfileData - New data to write\n\t * @param {Function} onSuccess - A function callback to run when writing is successful\n\t * @param {Function} onError - A function callback to run when writing fails\n\t */\n\teditProfileData(newProfileData, onSuccess, onError) {\n\t\tconst userID = newProfileData.id;\n\n\t\tthis.refDB.child('Users/' + userID).once('value', (snapshot) => {\n\t\t\tlet originalUserData = snapshot.val();\n\t\t\tlet updatedObj = this.merge(originalUserData, newProfileData);\n\t\t\tthis.refDB.child('Users/').child(userID).set(updatedObj, onSuccess).catch(onError);\n\t\t}).catch((error) => {\n\t\t\tonError(error);\n\t\t\tconsole.log(error);\n\t\t});\n\t}\n\n\t/**\n\t * Merges the data of two objects. Keeps everything in originalObj, adds any key in newObj and overwrites duplicates in originalObj.\n\t *\n\t * @param {Object} originalObj - Original data to replace\n\t * @param {Object} newObj - New data to add\n\t *\n\t * @return {Object} Merged data\n\t */\n\tmerge(originalObj, newObj) {\n\t\t// Merge them together by just overwriting existing keys and adding new ones\n\t\t// key: the name of the object key\n\t\t// index: the ordinal position of the key within the object \n\t\tObject.keys(newObj).forEach((key,index) => {\n\t\t\toriginalObj[key] = newObj[key];\n\t\t});\n\t\treturn originalObj; // Need to return original because it has datetime and owner\n\t}\n\n\t/**\n\t * Read data from the user table once, only looking for a specific user id.\n\t *\n\t * @param {string} id - The current user's id\n\t * @param {Function} callback - A function callback that is with the value(s) read\n\t */\n\treadProfileDataOnce(id, callback) {\n\t\tthis.refDB.child('Users/' + id).once('value', callback);\n\t}\n\n\t/**\n\t * Read data from the bike table only once.\n\t *\n\t * @param {Function} callback - A function callback that is with the value(s) read\n\t */\n\treadBikeDataOnce(callback) {\n\t\tthis.refDB.child('Bike/').once('value', callback);\n\t}\n\n\t/**\n\t * Read data from the bike table every time there is a change in the database.\n\t *\n\t * @param {Function} callback - A function callback that is with the value(s) read\n\t * @return {Object} A listener from the 'on' function\n\t */\n\treadBikeDataOn(callback) {\n\t\treturn this.listenOn('Bike/', 'value', callback);\n\t\t// this.refDB.child('Bike/').on('value', callback);\n\t}\n\n\treadBikeDataOff(listener) {\n\t\tthis.listenOff('Bike/', 'value', listener);\n\t}\n\n\t/**\n\t * General function for listening to the database for events.\n\t * Be as specific as possible when specifying the child (don't just listen on root).\n\t * See https://firebase.google.com/docs/reference/js/firebase.database.Reference#on\n\t * for event names.\n\t *\n\t * @param {string} child - A child to listen on\n\t * @param {string} event - An event to listen for\n\t * @param {Function} callback - A function callback to trigger when data is recieved\n\t * @return {Object} A listener from the 'on' function\n\t */\n\tlistenOn(child, event, callback) {\n\t\treturn this.refDB.child(child).on(event, callback);\n\t}\n\n\tlistenOff(child, event, listener) {\n\t\tthis.refDB.child(child).off(event, listener);\n\t}\n\n\t/**\n\t * Removes a bike id from the database.\n\t *\n\t * @param {string} key - A bike id to remove\n\t * @param {Function} callback - A function callback to trigger when the bike is removed\n\t */\n\tremoveBikeItem(key, callback) {\n\t\tthis.removeItem('Bike/', key, callback);\n\t}\n\n\t/**\n\t * Removes an item from the database given by 'removeChild' in the 'table'.\n\t *\n\t * @param {string} table - A table to remove from\n\t * @param {string} removeChild - A child id to remove\n\t * @param {Function} callback - A function callback to trigger when item is removed\n\t */\n\tremoveItem(table, removeChild, callback) {\n\t\tthis.refDB.child(table).child(removeChild).remove().then(() => {\n\t\t\tcallback(true);\n\t\t}).catch(() => {\n\t\t\tcallback(false);\n\t\t});\n\t}\n\n\t/**\n\t * Trigger the on reads by adding and removing an item from the database in the Bike Table.\n\t *\n\t * @param {Object} data - The temporary object to store\n\t * @param {Function} onError - A callback function if there is an error writing\n\t */\n\ttriggerTemporaryItem(data, onError) {\n\t\tthis.refDB.child('Bike/').child(data.tempID).set(data, (result) => {\n\t\t\tthis.refDB.child('Bike/').child(data.tempID).remove();\n\t\t}).catch(onError);\n\t}\n\n\t/**\n\t * Returns a new unique key generated by the database.\n\t *\n\t * @return {string} A newly generated unique key\n\t */\n\tgetNewBikeID() {\n\t\treturn this.refDB.child('Bike').push().key;\n\t}\n\n\t/**\n\t * Returns a new unique key generated by the database. Shouldn't need to use this because user IDs are generated on Sign-up.\n\t */\n\tgetNewProfileID() {\n\t\treturn this.refDB.child('Users').push().key;\n\t}\n\n\t/**\n\t * Makes the database go offline.\n\t */\n\tgoOffline() {\n\t\tfirebase.database().goOffline();\n\t}\n\n\t/**\n\t * Makes the database go online.\n\t */\n\tgoOnline() {\n\t\tfirebase.database().goOnline();\n\t}\n\n\t/**\n\t * Removes an item from the database by a supplied key.\n\t *\n\t * @param {string} key - An id in the database\n\t */\n\t// removeBikeItem(key) {\n\t// \tthis.refDB.child('Bike').child(key).remove();\n\t// }\n\n\t/**\n\t * Returns the currently logged in user's id.\n\t *\n\t * @param {Function} onComplete - A callback function when the state has changed\n\t * @return {Function} Function to unsubscribe from the authentication listener\n\t */\n\tgetCurrentUser(onComplete) {\n\t\treturn firebase.auth().onAuthStateChanged((user) => {\n\t\t\tif (user) {\n\t\t\t\tconsole.log(\"user id: \" + user.uid);\n\t\t\t\tonComplete(user.uid);\n\t\t\t} else {\n\t\t\t\tconsole.log(\"user not defined\");\n\t\t\t\tonComplete(null);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Listens for authentication changes and only calls the onSuccess function if a user is defined.\n\t *\n\t * @param {Function} onSuccess - A callback function when the state has changed and a user is defined\n\t */\n\tlistenForAuthChange(onSuccess) {\n\t\tfirebase.auth().onAuthStateChanged((user) => {\n\t\t\tif (user) {\n\t\t\t\tconsole.log(\"user id: \" + user.uid);\n\t\t\t\tonSuccess(user.uid);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Remove a images by their url from storage.\n\t *\n\t * @param {string} thumbnails - A list of images to delete\n\t * @param {Function} callback - A function to call on completion or on failure\n\t */\n\tremoveImages(thumbnails, callback) {\n\t\tlet result = true;\n\t\tconst storageWithoutRef = this.getStorageWithoutRef(); // We need to use the refFromURL so we can only use the storage without a reference\n\t\t// Firebase does not support deleting directories so we must loop through the thumbnails and delete each file\n\t\tfor (let i=0; i < thumbnails.length; i++) {\n\t\t\tstorageWithoutRef.refFromURL(thumbnails[i]).delete().then(() => { \n\t\t\t\tresult = result && true; \n\t\t\t}).catch((error) => { \n\t\t\t\tresult = result && false; \n\t\t\t});\t\n\t\t}\n\t\tcallback(result);\n\t}\n\n\t/**\n\t * Return the possible image folders in the firebase storage.\n\t * See top definitions for names.\n\t * Possible TODO : Fetch folder names from the storage so to not hardcode them in.\n\t *\n\t * @return {Object} The string names of the folders, includes '/' in each name\n\t */\n\tgetImageFolders() {\n\t\treturn { BikeImages, ProfileImages };\n\t}\n\n\t/**\n\t * Asynchronously write an image to firebase storage.\n\t *\n\t * @param {string} id - The id of the bike to write to\n\t * @param {Object} file - The file object to write\n\t * @param {string} filename - The name of the file\n\t * @param {string} baseFolder - The base folder of the images. One of \"BikeImages/\", \"ProfileImages/\" etc. (Must include '/')\n\t * @param {Function} onSuccess - The callback to call on a successful upload\n\t * @param {Function} onError - The callback to call on a failed upload\n\t */\n\tasync writeImage(id, file, filename, baseFolder, onSuccess, onError) {\n\t\t// Create a blob because the firebase 'put' function requires a blob\n\t\t// I found out later that when we get an image from the user, we can actually get it as data\n\t\t// and since the firebase 'put' function also accepts the data format, we can use that instead\n\t\t// which would save the XMLHttpRequest to create a blob.\n\t\t// TODO : Optimization - Use data format for images instead of creating a blob which would eliminate\n\t\t// the following Promise\n\t\tconst blob = await new Promise((resolve, reject) => {\n\t\t\tconst xhr = new XMLHttpRequest();\n\t\t\txhr.onload = () => {\n\t\t\t\tresolve(xhr.response);\n\t\t\t};\n\t\t\txhr.onerror = (e) => {\n\t\t\t\tconsole.log(e);\n\t\t\t\treject(new TypeError('Network request failed'));\n\t\t\t};\n\t\t\txhr.responseType = 'blob';\n\t\t\txhr.open('GET', file.uri, true);\n\t\t\txhr.send(null);\n\t\t});\n\n\t\tconst task = this.refStorage.child(baseFolder + id + '/' + filename).put(blob);\n\t\ttask.on('state_changed', (snapshot) => {\n\t\t\t// Observe state change events such as progress, pause, and resume\n\t\t\t// Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n\t\t\tlet progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n\t\t\tconsole.log('Upload is ' + progress + '% done');\n\t\t\tswitch (snapshot.state) {\n\t\t\t\tcase firebase.storage.TaskState.PAUSED: // or 'paused'\n\t\t\t\t\t// console.log('Upload is paused');\n\t\t\t\t\tbreak;\n\t\t\t\tcase firebase.storage.TaskState.RUNNING: // or 'running'\n\t\t\t\t\t// console.log('Upload is running');\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}, onError, () => {\n\t\t\ttask.snapshot.ref.getDownloadURL().then((downloadURL) => {\n\t\t\t\t// console.log('File available at', downloadURL);\n\t\t\t\tblob.close(); // Make sure to close the blob\n\t\t\t\tonSuccess(downloadURL);\n\t\t\t\treturn null;\n\t\t\t});\n\t\t});\n\t}\n\n\t/*\n\t * Use this function when moving to react-native-firebase. The above function works with regular firebase.\n\t */\n\t// async writeImage(id, file, filename, baseFolder, onSuccess, onError) {\n\t// \tconst task = this.refStorage.child(baseFolder + id + '/' + filename).putFile(file.uri);\n\t// \ttask.on('state_changed', (snapshot) => {\n\t// \t\t// Observe state change events such as progress, pause, and resume\n\t// \t\t// Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n\t// \t\tlet progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n\t// \t\tconsole.log('Upload is ' + progress + '% done');\n\t// \t\tswitch (snapshot.state) {\n\t// \t\t\tcase firebase.storage.TaskState.PAUSED: // or 'paused'\n\t// \t\t\t\t// console.log('Upload is paused');\n\t// \t\t\t\tbreak;\n\t// \t\t\tcase firebase.storage.TaskState.RUNNING: // or 'running'\n\t// \t\t\t\t// console.log('Upload is running');\n\t// \t\t\t\tbreak;\n\t// \t\t}\n\t// \t}, onError, () => {\n\t// \t\ttask.snapshot.ref.getDownloadURL().then((downloadURL) => {\n\t// \t\t\t// console.log('File available at', downloadURL);\n\t// \t\t\tblob.close(); // Make sure to close the blob\n\t// \t\t\tonSuccess(downloadURL);\n\t// \t\t\treturn null;\n\t// \t\t});\n\t// \t});\n\t// }\n}\n\nconst Database = new FirebaseDatabase();\nexport default Database;",
    "static": true,
    "longname": "/Users/seanr/Downloads/temp/src/util/database.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 844,
    "kind": "variable",
    "name": "RNTwitterSignIn",
    "memberof": "src/util/database.js",
    "static": true,
    "longname": "src/util/database.js~RNTwitterSignIn",
    "access": "public",
    "export": false,
    "importPath": "PedalPatrol/src/util/database.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 845,
    "kind": "variable",
    "name": "BikeImages",
    "memberof": "src/util/database.js",
    "static": true,
    "longname": "src/util/database.js~BikeImages",
    "access": "public",
    "export": false,
    "importPath": "PedalPatrol/src/util/database.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 846,
    "kind": "variable",
    "name": "ProfileImages",
    "memberof": "src/util/database.js",
    "static": true,
    "longname": "src/util/database.js~ProfileImages",
    "access": "public",
    "export": false,
    "importPath": "PedalPatrol/src/util/database.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 847,
    "kind": "class",
    "name": "FirebaseDatabase",
    "memberof": "src/util/database.js",
    "static": true,
    "longname": "src/util/database.js~FirebaseDatabase",
    "access": "public",
    "export": true,
    "importPath": "PedalPatrol/src/util/database.js",
    "importStyle": null,
    "description": "Class for the firebase database connection and operations",
    "lineNumber": 18,
    "pseudoExport": true,
    "interface": false
  },
  {
    "__docId__": 848,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/util/database.js~FirebaseDatabase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/database.js~FirebaseDatabase#constructor",
    "access": "public",
    "description": "Creates an instance of the FirebaseDatabase class.\nInitializes the app as a firebase app and sets up the storage references.",
    "lineNumber": 24,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ]
  },
  {
    "__docId__": 849,
    "kind": "member",
    "name": "currentUser",
    "memberof": "src/util/database.js~FirebaseDatabase",
    "static": false,
    "longname": "src/util/database.js~FirebaseDatabase#currentUser",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 850,
    "kind": "method",
    "name": "setupDatabaseRef",
    "memberof": "src/util/database.js~FirebaseDatabase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/database.js~FirebaseDatabase#setupDatabaseRef",
    "access": "public",
    "description": "Set up the database reference to the PProject table",
    "lineNumber": 37,
    "params": [],
    "return": null
  },
  {
    "__docId__": 851,
    "kind": "member",
    "name": "refDB",
    "memberof": "src/util/database.js~FirebaseDatabase",
    "static": false,
    "longname": "src/util/database.js~FirebaseDatabase#refDB",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 852,
    "kind": "method",
    "name": "setupStorageRef",
    "memberof": "src/util/database.js~FirebaseDatabase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/database.js~FirebaseDatabase#setupStorageRef",
    "access": "public",
    "description": "Set up the storage reference",
    "lineNumber": 44,
    "params": [],
    "return": null
  },
  {
    "__docId__": 853,
    "kind": "member",
    "name": "refStorage",
    "memberof": "src/util/database.js~FirebaseDatabase",
    "static": false,
    "longname": "src/util/database.js~FirebaseDatabase#refStorage",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 854,
    "kind": "method",
    "name": "getStorageWithoutRef",
    "memberof": "src/util/database.js~FirebaseDatabase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/database.js~FirebaseDatabase#getStorageWithoutRef",
    "access": "public",
    "description": "Returns the storage without a reference.",
    "lineNumber": 53,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The storage without reference"
    },
    "params": []
  },
  {
    "__docId__": 855,
    "kind": "method",
    "name": "signUp",
    "memberof": "src/util/database.js~FirebaseDatabase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/database.js~FirebaseDatabase#signUp",
    "access": "public",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "params": [
      {
        "name": "email",
        "types": [
          "*"
        ]
      },
      {
        "name": "password",
        "types": [
          "*"
        ]
      },
      {
        "name": "onSuccess",
        "types": [
          "*"
        ]
      },
      {
        "name": "onError",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 856,
    "kind": "method",
    "name": "checkVerify",
    "memberof": "src/util/database.js~FirebaseDatabase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/database.js~FirebaseDatabase#checkVerify",
    "access": "public",
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 857,
    "kind": "method",
    "name": "sendEmail",
    "memberof": "src/util/database.js~FirebaseDatabase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/database.js~FirebaseDatabase#sendEmail",
    "access": "public",
    "description": null,
    "lineNumber": 76,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 858,
    "kind": "method",
    "name": "sendresetEmail",
    "memberof": "src/util/database.js~FirebaseDatabase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/database.js~FirebaseDatabase#sendresetEmail",
    "access": "public",
    "description": null,
    "lineNumber": 90,
    "undocument": true,
    "params": [
      {
        "name": "onError",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 859,
    "kind": "method",
    "name": "signIn",
    "memberof": "src/util/database.js~FirebaseDatabase",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/util/database.js~FirebaseDatabase#signIn",
    "access": "public",
    "description": "Accesses Firebase data to sign in with email and password.\nThis function is called asynchronously. Use 'async' and 'await'.",
    "lineNumber": 111,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "email",
        "description": "A user's email"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "password",
        "description": "A user's password"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "onError",
        "description": "A function callback to execute on error"
      }
    ],
    "return": null
  },
  {
    "__docId__": 860,
    "kind": "method",
    "name": "signinwithFB",
    "memberof": "src/util/database.js~FirebaseDatabase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/database.js~FirebaseDatabase#signinwithFB",
    "access": "public",
    "description": null,
    "lineNumber": 115,
    "undocument": true,
    "params": [
      {
        "name": "onError",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 861,
    "kind": "method",
    "name": "signInwithTwitter",
    "memberof": "src/util/database.js~FirebaseDatabase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/database.js~FirebaseDatabase#signInwithTwitter",
    "access": "public",
    "description": null,
    "lineNumber": 127,
    "undocument": true,
    "params": [
      {
        "name": "onError",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 862,
    "kind": "method",
    "name": "handleFirebaseLogin",
    "memberof": "src/util/database.js~FirebaseDatabase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/database.js~FirebaseDatabase#handleFirebaseLogin",
    "access": "public",
    "description": null,
    "lineNumber": 146,
    "undocument": true,
    "params": [
      {
        "name": "accessToken",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 863,
    "kind": "method",
    "name": "setAccount",
    "memberof": "src/util/database.js~FirebaseDatabase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/database.js~FirebaseDatabase#setAccount",
    "access": "public",
    "description": null,
    "lineNumber": 163,
    "undocument": true,
    "params": [
      {
        "name": "user",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 864,
    "kind": "method",
    "name": "signOut",
    "memberof": "src/util/database.js~FirebaseDatabase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/database.js~FirebaseDatabase#signOut",
    "access": "public",
    "description": "Sign out of the database.",
    "lineNumber": 187,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "onSuccess",
        "description": "A callback function on a successful signout"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "onError",
        "description": "A callback function on a failure to signout"
      }
    ],
    "return": null
  },
  {
    "__docId__": 866,
    "kind": "method",
    "name": "writeBikeData",
    "memberof": "src/util/database.js~FirebaseDatabase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/database.js~FirebaseDatabase#writeBikeData",
    "access": "public",
    "description": "Write to the database in table 'Bike' using the id as the child. Adds a date time and owner to the data",
    "lineNumber": 200,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "bikeData",
        "description": "Bike data to add to the database"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "onSuccess",
        "description": "A function callback to execute on the success of writing to the database"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "onError",
        "description": "A function callback to execute on an error when writing to the database"
      }
    ],
    "return": null
  },
  {
    "__docId__": 867,
    "kind": "method",
    "name": "writeProfileData",
    "memberof": "src/util/database.js~FirebaseDatabase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/database.js~FirebaseDatabase#writeProfileData",
    "access": "public",
    "description": "Write to the database in the table 'Users' using the user id as the child.",
    "lineNumber": 214,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "profileData",
        "description": "The data to upload"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "onSuccess",
        "description": "A function callback to execute on the success of writing to the database"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "onError",
        "description": "A function callback to execute on an error when writing to the database"
      }
    ],
    "return": null
  },
  {
    "__docId__": 868,
    "kind": "method",
    "name": "editBikeData",
    "memberof": "src/util/database.js~FirebaseDatabase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/database.js~FirebaseDatabase#editBikeData",
    "access": "public",
    "description": "Overwrites data in the database by reading the data, merging it with the new values and writing back to the same ID.",
    "lineNumber": 225,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "newBikeData",
        "description": "New data to write"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "onSuccess",
        "description": "A function callback to run when writing is successful"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "onError",
        "description": "A function callback to run when writing fails"
      }
    ],
    "return": null
  },
  {
    "__docId__": 869,
    "kind": "method",
    "name": "editProfileData",
    "memberof": "src/util/database.js~FirebaseDatabase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/database.js~FirebaseDatabase#editProfileData",
    "access": "public",
    "description": "Overwrites data in the database by reading the data, merging it with the new values and writing back to the same ID.",
    "lineNumber": 246,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "newProfileData",
        "description": "New data to write"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "onSuccess",
        "description": "A function callback to run when writing is successful"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "onError",
        "description": "A function callback to run when writing fails"
      }
    ],
    "return": null
  },
  {
    "__docId__": 870,
    "kind": "method",
    "name": "merge",
    "memberof": "src/util/database.js~FirebaseDatabase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/database.js~FirebaseDatabase#merge",
    "access": "public",
    "description": "Merges the data of two objects. Keeps everything in originalObj, adds any key in newObj and overwrites duplicates in originalObj.",
    "lineNumber": 267,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "originalObj",
        "description": "Original data to replace"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "newObj",
        "description": "New data to add"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Merged data"
    }
  },
  {
    "__docId__": 871,
    "kind": "method",
    "name": "readProfileDataOnce",
    "memberof": "src/util/database.js~FirebaseDatabase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/database.js~FirebaseDatabase#readProfileDataOnce",
    "access": "public",
    "description": "Read data from the user table once, only looking for a specific user id.",
    "lineNumber": 283,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "The current user's id"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "A function callback that is with the value(s) read"
      }
    ],
    "return": null
  },
  {
    "__docId__": 872,
    "kind": "method",
    "name": "readBikeDataOnce",
    "memberof": "src/util/database.js~FirebaseDatabase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/database.js~FirebaseDatabase#readBikeDataOnce",
    "access": "public",
    "description": "Read data from the bike table only once.",
    "lineNumber": 292,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "A function callback that is with the value(s) read"
      }
    ],
    "return": null
  },
  {
    "__docId__": 873,
    "kind": "method",
    "name": "readBikeDataOn",
    "memberof": "src/util/database.js~FirebaseDatabase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/database.js~FirebaseDatabase#readBikeDataOn",
    "access": "public",
    "description": "Read data from the bike table every time there is a change in the database.",
    "lineNumber": 302,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "A function callback that is with the value(s) read"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "A listener from the 'on' function"
    }
  },
  {
    "__docId__": 874,
    "kind": "method",
    "name": "readBikeDataOff",
    "memberof": "src/util/database.js~FirebaseDatabase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/database.js~FirebaseDatabase#readBikeDataOff",
    "access": "public",
    "description": null,
    "lineNumber": 307,
    "undocument": true,
    "params": [
      {
        "name": "listener",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 875,
    "kind": "method",
    "name": "listenOn",
    "memberof": "src/util/database.js~FirebaseDatabase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/database.js~FirebaseDatabase#listenOn",
    "access": "public",
    "description": "General function for listening to the database for events.\nBe as specific as possible when specifying the child (don't just listen on root).\nSee https://firebase.google.com/docs/reference/js/firebase.database.Reference#on\nfor event names.",
    "lineNumber": 322,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "child",
        "description": "A child to listen on"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "An event to listen for"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "A function callback to trigger when data is recieved"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "A listener from the 'on' function"
    }
  },
  {
    "__docId__": 876,
    "kind": "method",
    "name": "listenOff",
    "memberof": "src/util/database.js~FirebaseDatabase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/database.js~FirebaseDatabase#listenOff",
    "access": "public",
    "description": null,
    "lineNumber": 326,
    "undocument": true,
    "params": [
      {
        "name": "child",
        "types": [
          "*"
        ]
      },
      {
        "name": "event",
        "types": [
          "*"
        ]
      },
      {
        "name": "listener",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 877,
    "kind": "method",
    "name": "removeBikeItem",
    "memberof": "src/util/database.js~FirebaseDatabase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/database.js~FirebaseDatabase#removeBikeItem",
    "access": "public",
    "description": "Removes a bike id from the database.",
    "lineNumber": 336,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "A bike id to remove"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "A function callback to trigger when the bike is removed"
      }
    ],
    "return": null
  },
  {
    "__docId__": 878,
    "kind": "method",
    "name": "removeItem",
    "memberof": "src/util/database.js~FirebaseDatabase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/database.js~FirebaseDatabase#removeItem",
    "access": "public",
    "description": "Removes an item from the database given by 'removeChild' in the 'table'.",
    "lineNumber": 347,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "table",
        "description": "A table to remove from"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "removeChild",
        "description": "A child id to remove"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "A function callback to trigger when item is removed"
      }
    ],
    "return": null
  },
  {
    "__docId__": 879,
    "kind": "method",
    "name": "triggerTemporaryItem",
    "memberof": "src/util/database.js~FirebaseDatabase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/database.js~FirebaseDatabase#triggerTemporaryItem",
    "access": "public",
    "description": "Trigger the on reads by adding and removing an item from the database in the Bike Table.",
    "lineNumber": 361,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The temporary object to store"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "onError",
        "description": "A callback function if there is an error writing"
      }
    ],
    "return": null
  },
  {
    "__docId__": 880,
    "kind": "method",
    "name": "getNewBikeID",
    "memberof": "src/util/database.js~FirebaseDatabase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/database.js~FirebaseDatabase#getNewBikeID",
    "access": "public",
    "description": "Returns a new unique key generated by the database.",
    "lineNumber": 372,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "A newly generated unique key"
    },
    "params": []
  },
  {
    "__docId__": 881,
    "kind": "method",
    "name": "getNewProfileID",
    "memberof": "src/util/database.js~FirebaseDatabase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/database.js~FirebaseDatabase#getNewProfileID",
    "access": "public",
    "description": "Returns a new unique key generated by the database. Shouldn't need to use this because user IDs are generated on Sign-up.",
    "lineNumber": 379,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 882,
    "kind": "method",
    "name": "goOffline",
    "memberof": "src/util/database.js~FirebaseDatabase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/database.js~FirebaseDatabase#goOffline",
    "access": "public",
    "description": "Makes the database go offline.",
    "lineNumber": 386,
    "params": [],
    "return": null
  },
  {
    "__docId__": 883,
    "kind": "method",
    "name": "goOnline",
    "memberof": "src/util/database.js~FirebaseDatabase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/database.js~FirebaseDatabase#goOnline",
    "access": "public",
    "description": "Makes the database go online.",
    "lineNumber": 393,
    "params": [],
    "return": null
  },
  {
    "__docId__": 884,
    "kind": "method",
    "name": "getCurrentUser",
    "memberof": "src/util/database.js~FirebaseDatabase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/database.js~FirebaseDatabase#getCurrentUser",
    "access": "public",
    "description": "Returns the currently logged in user's id.",
    "lineNumber": 412,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "onComplete",
        "description": "A callback function when the state has changed"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "Function to unsubscribe from the authentication listener"
    }
  },
  {
    "__docId__": 885,
    "kind": "method",
    "name": "listenForAuthChange",
    "memberof": "src/util/database.js~FirebaseDatabase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/database.js~FirebaseDatabase#listenForAuthChange",
    "access": "public",
    "description": "Listens for authentication changes and only calls the onSuccess function if a user is defined.",
    "lineNumber": 429,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "onSuccess",
        "description": "A callback function when the state has changed and a user is defined"
      }
    ],
    "return": null
  },
  {
    "__docId__": 886,
    "kind": "method",
    "name": "removeImages",
    "memberof": "src/util/database.js~FirebaseDatabase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/database.js~FirebaseDatabase#removeImages",
    "access": "public",
    "description": "Remove a images by their url from storage.",
    "lineNumber": 444,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "thumbnails",
        "description": "A list of images to delete"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "A function to call on completion or on failure"
      }
    ],
    "return": null
  },
  {
    "__docId__": 887,
    "kind": "method",
    "name": "getImageFolders",
    "memberof": "src/util/database.js~FirebaseDatabase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/database.js~FirebaseDatabase#getImageFolders",
    "access": "public",
    "description": "Return the possible image folders in the firebase storage.\nSee top definitions for names.\nPossible TODO : Fetch folder names from the storage so to not hardcode them in.",
    "lineNumber": 465,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The string names of the folders, includes '/' in each name"
    },
    "params": []
  },
  {
    "__docId__": 888,
    "kind": "method",
    "name": "writeImage",
    "memberof": "src/util/database.js~FirebaseDatabase",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/util/database.js~FirebaseDatabase#writeImage",
    "access": "public",
    "description": "Asynchronously write an image to firebase storage.",
    "lineNumber": 479,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "The id of the bike to write to"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": "The file object to write"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "filename",
        "description": "The name of the file"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "baseFolder",
        "description": "The base folder of the images. One of \"BikeImages/\", \"ProfileImages/\" etc. (Must include '/')"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "onSuccess",
        "description": "The callback to call on a successful upload"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "onError",
        "description": "The callback to call on a failed upload"
      }
    ],
    "return": null
  },
  {
    "__docId__": 889,
    "kind": "variable",
    "name": "Database",
    "memberof": "src/util/database.js",
    "static": true,
    "longname": "src/util/database.js~Database",
    "access": "public",
    "export": true,
    "importPath": "PedalPatrol/src/util/database.js",
    "importStyle": "Database",
    "description": null,
    "lineNumber": 554,
    "undocument": true,
    "type": {
      "types": [
        "src/util/database.js~FirebaseDatabase"
      ]
    }
  },
  {
    "__docId__": 890,
    "kind": "file",
    "name": "src/util/drawerhelper.js",
    "content": "import { ProfileM } from '../components/models/export-models';\nimport ImageUtil from './imageutility';\n\n/**\n * Class to help with the facilitation of the side drawer.\n * The drawer cannot be accessed across components so this class allows the drawer to register itself and be used.\n */\nclass DrawerHelper {\n\t/**\n\t * Creates an instance of the DrawerHelper.\n\t * \n\t * @constructor\n\t */\n\tconstructor() {\n\t\tthis.drawer = null;\n\t\tthis.defaultProfilePicture = ImageUtil.getDefaultImage(ImageUtil.getTypes().PROFILE);\n\t}\n\n\tgetDefaultProfile() {\n\t\treturn this.defaultProfilePicture;\n\t}\n\n\t/**\n\t * Checks if the drawer view exists.\n\t *\n\t * @return {Boolean} true: if the drawer exists; false: otherwise\n\t */\n\tdrawerExists() {\n\t\treturn this.drawer != null;\n\t}\n\n\t/**\n\t * Sets the attribute drawer to the passed in drawer.\n\t * \n\t * @param {Class} drawer - An instance of the SideDrawer class\n\t */\n\tsetDrawer(drawer) {\n\t\tthis.drawer = drawer;\n\t}\n\n\t/**\n\t * Returns the stored instance of the side drawer\n\t * \n\t * @return {Class} An instance of the SideDrawer class\n\t */\n\tgetDrawer() {\n\t\treturn this.drawer;\n\t}\n\n\t/**\n\t * Checks if the drawer instance exists, and if it does, toggles the side drawer.\n\t */\n\ttoggle() {\n\t\tif (this.drawerExists()) {\n\t\t\tthis.drawer.toggleDrawer();\n\t\t}\n\t}\n\n\t/**\n\t * Opens the drawer if it exists and adds the number of notifications if it exists.\n\t *\n\t * @param {Number} numNotifications - The number of notifications\n\t */\n\topenDrawer(numNotifications) {\n\t\tif (this.drawerExists()) {\n\t\t\tthis.fetchProfileImageFromStorage();\n\t\t\tthis.drawer.openDrawer(numNotifications);\n\t\t}\n\t}\n\n\t/**\n\t * Closes the drawer if it exists.\n\t */\n\tcloseDrawer() {\n\t\tif (this.drawerExists()) {\n\t\t\tthis.drawer.closeDrawer();\n\t\t}\n\t}\n\n\t/**\n\t * Gets the profile image from the ProfileModel\n\t */\n\tfetchProfileImageFromStorage() {\n\t\tProfileM.getProfileData((result) => {\n\t\t\tlet default_data = result;\n\t\t\tif (!result) {\n\t\t\t\tdefault_data = { profilePicture: this.defaultProfilePicture, full_name: '' };\n\t\t\t}\n\t\t\tthis.drawer.setState({profileData: default_data});\n\t\t});\n\t}\n}\n\nconst DrawerHelp = new DrawerHelper();\nexport default DrawerHelp;",
    "static": true,
    "longname": "/Users/seanr/Downloads/temp/src/util/drawerhelper.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 891,
    "kind": "class",
    "name": "DrawerHelper",
    "memberof": "src/util/drawerhelper.js",
    "static": true,
    "longname": "src/util/drawerhelper.js~DrawerHelper",
    "access": "public",
    "export": true,
    "importPath": "PedalPatrol/src/util/drawerhelper.js",
    "importStyle": null,
    "description": "Class to help with the facilitation of the side drawer.\nThe drawer cannot be accessed across components so this class allows the drawer to register itself and be used.",
    "lineNumber": 8,
    "pseudoExport": true,
    "interface": false
  },
  {
    "__docId__": 892,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/util/drawerhelper.js~DrawerHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/drawerhelper.js~DrawerHelper#constructor",
    "access": "public",
    "description": "Creates an instance of the DrawerHelper.",
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ]
  },
  {
    "__docId__": 893,
    "kind": "member",
    "name": "drawer",
    "memberof": "src/util/drawerhelper.js~DrawerHelper",
    "static": false,
    "longname": "src/util/drawerhelper.js~DrawerHelper#drawer",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 894,
    "kind": "member",
    "name": "defaultProfilePicture",
    "memberof": "src/util/drawerhelper.js~DrawerHelper",
    "static": false,
    "longname": "src/util/drawerhelper.js~DrawerHelper#defaultProfilePicture",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 895,
    "kind": "method",
    "name": "getDefaultProfile",
    "memberof": "src/util/drawerhelper.js~DrawerHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/drawerhelper.js~DrawerHelper#getDefaultProfile",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 896,
    "kind": "method",
    "name": "drawerExists",
    "memberof": "src/util/drawerhelper.js~DrawerHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/drawerhelper.js~DrawerHelper#drawerExists",
    "access": "public",
    "description": "Checks if the drawer view exists.",
    "lineNumber": 28,
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true: if the drawer exists; false: otherwise"
    },
    "params": []
  },
  {
    "__docId__": 897,
    "kind": "method",
    "name": "setDrawer",
    "memberof": "src/util/drawerhelper.js~DrawerHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/drawerhelper.js~DrawerHelper#setDrawer",
    "access": "public",
    "description": "Sets the attribute drawer to the passed in drawer.",
    "lineNumber": 37,
    "params": [
      {
        "nullable": null,
        "types": [
          "Class"
        ],
        "spread": false,
        "optional": false,
        "name": "drawer",
        "description": "An instance of the SideDrawer class"
      }
    ],
    "return": null
  },
  {
    "__docId__": 899,
    "kind": "method",
    "name": "getDrawer",
    "memberof": "src/util/drawerhelper.js~DrawerHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/drawerhelper.js~DrawerHelper#getDrawer",
    "access": "public",
    "description": "Returns the stored instance of the side drawer",
    "lineNumber": 46,
    "return": {
      "nullable": null,
      "types": [
        "Class"
      ],
      "spread": false,
      "description": "An instance of the SideDrawer class"
    },
    "params": []
  },
  {
    "__docId__": 900,
    "kind": "method",
    "name": "toggle",
    "memberof": "src/util/drawerhelper.js~DrawerHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/drawerhelper.js~DrawerHelper#toggle",
    "access": "public",
    "description": "Checks if the drawer instance exists, and if it does, toggles the side drawer.",
    "lineNumber": 53,
    "params": [],
    "return": null
  },
  {
    "__docId__": 901,
    "kind": "method",
    "name": "openDrawer",
    "memberof": "src/util/drawerhelper.js~DrawerHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/drawerhelper.js~DrawerHelper#openDrawer",
    "access": "public",
    "description": "Opens the drawer if it exists and adds the number of notifications if it exists.",
    "lineNumber": 64,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "numNotifications",
        "description": "The number of notifications"
      }
    ],
    "return": null
  },
  {
    "__docId__": 902,
    "kind": "method",
    "name": "closeDrawer",
    "memberof": "src/util/drawerhelper.js~DrawerHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/drawerhelper.js~DrawerHelper#closeDrawer",
    "access": "public",
    "description": "Closes the drawer if it exists.",
    "lineNumber": 74,
    "params": [],
    "return": null
  },
  {
    "__docId__": 903,
    "kind": "method",
    "name": "fetchProfileImageFromStorage",
    "memberof": "src/util/drawerhelper.js~DrawerHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/drawerhelper.js~DrawerHelper#fetchProfileImageFromStorage",
    "access": "public",
    "description": "Gets the profile image from the ProfileModel",
    "lineNumber": 83,
    "params": [],
    "return": null
  },
  {
    "__docId__": 904,
    "kind": "variable",
    "name": "DrawerHelp",
    "memberof": "src/util/drawerhelper.js",
    "static": true,
    "longname": "src/util/drawerhelper.js~DrawerHelp",
    "access": "public",
    "export": true,
    "importPath": "PedalPatrol/src/util/drawerhelper.js",
    "importStyle": "DrawerHelp",
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "type": {
      "types": [
        "src/util/drawerhelper.js~DrawerHelper"
      ]
    }
  },
  {
    "__docId__": 905,
    "kind": "file",
    "name": "src/util/imageutility.js",
    "content": "import { BIKE_PHOTO_ENTRIES, PROFILE_PHOTO_ENTRIES, BIKE_DEFAULT_IMAGE, PROFILE_DEFAULT_IMAGE } from '../assets/static/entries';\n\n/**\n * Image utility class for helping with image handling. \n */\nclass ImageUtility {\n\n\t/**\n\t * Checks the number of defaults with the length of the uploaded images and the allowed number of images.\n\t *\n\t * @param {string} type - The type of image constant requested (e.g. BIKE, PROFILE, etc.)\n\t * @param {Number} num_defaults - The number of defaults found\n\t * @param {List} uploaded_images - The list of uploaded images\n\t * @return {Boolean} true: If the number of defaults found is conversely related to the number of uploaded images based on the allowed number of images; false: otherwise\n\t */\n\tcheckNumDefaults(type, num_defaults, uploaded_images) {\n\t\t return (this.getTypeConstant(type, TYPE_CONSTANTS.indices.NUMBER_OF_IMAGES)-num_defaults === uploaded_images.length);\n\t}\n\n\t/**\n\t * Checks if an image has already been uploaded by checking if it contains the firebase url.\n\t *\n\t * @param {string} image - An image url to check. Might be an object if image is trying to be uploaded\n\t * @return {Boolean} true: If the image has already been uploaded; false: otherwise\n\t */\n\tisAlreadyUploaded(image) {\n\t\treturn image.hasOwnProperty('uri') ? false : image.startsWith(FIREBASE_URL);\n\t}\n\n\t/**\n\t * Returns the possible image types.\n\t *\n\t * @return {Object} An object of strings\n\t */\n\tgetTypes() {\n\t\treturn TYPE_NAMES;\n\t}\n\n\t/**\n\t * Returns the constant associated with a particular image type and index.\n\t *\n\t * @param {string} type - The type of image constant requested (e.g. BIKE, PROFILE, etc.)\n\t * @param {Number} index - The index of the constant in TYPE_CONSTANTS\n\t * @return {string/Number} The constant associated with the type and index\n\t */\n\tgetTypeConstant(type, index) {\n\t\treturn TYPE_CONSTANTS[type][index];\n\t}\n\n\t/**\n\t * Checks if the image is the default image for an associated type.\n\t *\n\t * @param {string} type - The type of image constant requested (e.g. BIKE, PROFILE, etc.)\n\t * @param {string} image - The url to an image\n\t * @return {Boolean} true: if the image is the default image; false: otherwise\n\t */\n\tisDefaultImage(type, image) {\n\t\treturn image === this.getTypeConstant(type, TYPE_CONSTANTS.indices.DEFAULT_IMAGE);\n\t}\n\n\t/**\n\t * Returns the default image for a specific image type.\n\t *\n\t * @param {string} type - The type of image constant requested (e.g. BIKE, PROFILE, etc.)\n\t * @return {string} The default image for the image type\n\t */\t\n\tgetDefaultImage(type) {\n\t\treturn this.getTypeConstant(type, TYPE_CONSTANTS.indices.DEFAULT_IMAGE);\n\t}\n\n\t/**\n\t * Returns the photo entries.\n\n\t * @param {string} type - The type of image constant requested (e.g. BIKE, PROFILE, etc.)\n\t * @return {Object} The photo entries\n\t */\n\tgetPhotoEntries(type) {\n\t\treturn this.getTypeConstant(type, TYPE_CONSTANTS.indices.PHOTO_ENTRIES);\n\t}\n\n\t/**\n\t * Checks whether the image list is valid using an overly complex set of logical comparisons.\n\t * Really not needed but all these cases came up and proved to be a problem.\n\t *\n\t * @param {List} imagelist - A list of images to check\n\t * @return {Boolean} true: If valid; false: otherwise \n\t */\n\tcheckImageListValid(imagelist) {\n\t\treturn (typeof imagelist !== 'undefined' && imagelist != undefined && imagelist != null && imagelist != [] && imagelist.length !== 0);\n\t}\n\n\t/**\n\t * Returns the defined file extension for images.\n\t *\n\t * @return {string} The file extension (default '.jpg')\n\t */\n\tgetFileExtension() {\n\t\treturn FILE_EXTENSION;\n\t}\n\n\t/**\n\t * Checks if all the images are default images.\n\t *\n\t * @param {string} type - The type of image constant requested (e.g. BIKE, PROFILE, etc.)\n\t * @param {List} images - A list of images\n\t * @return {Boolean} true: if all the images are the default image; false: if any one of them is not\n\t */\n\tcheckPhotosForDefaults(type, images) {\n\t\tlet all_defaults = true;\n\t\tfor (let i=0; i < images.length; i++) {\n\t\t\t// AND the validity of the image with the previous result\n\t\t\tall_defaults &= (images[i].illustration === this.getTypeConstant(type, TYPE_CONSTANTS.indices.DEFAULT_IMAGE) || images[i].illustration == undefined);\n\t\t}\n\t\t\n\t\treturn !!all_defaults; // !! converts to boolean, needed to convert number to actual boolean value because errors occurred\n\t}\n\n\n\t/**\n\t * Forms the thumbnail into a useable list of objects.\n\t * \n\t * @param {List} thumbnails - A list of thumbnails with links\n\t * @return {List} A list of thumbnail objects with an 'illustration' property\n\t */\n\tformThumbnail(thumbnails) {\n\t\tlet formedThumbnails = [];\n\t\tif (thumbnails != undefined) {\n\t\t\tfor (let i=0; i < thumbnails.length; i++) {\n\t\t\t\t// Need to form the thumbnail property for the carousel\n\t\t\t\tformedThumbnails.push({illustration: thumbnails[i]});\n\t\t\t}\n\t\t}\n\t\treturn formedThumbnails;\n\t}\n\n\t/**\n\t * Add remaining defaults to the list of thumbnails for editing purposes.\n\t *\n\t * @param {string} type - The type of image constant requested (e.g. BIKE, PROFILE, etc.)\n\t * @param {List} thumbnails - A list of thumbnails\n\t * @return {List} A list of thumbnails of length NUMBER_OF_BIKE_IMAGES with defaults\n\t */\n\taddRemainingDefaults(type, thumbnails) {\n\t\t// Number of defaults remaining is the number of images the type allows minus the number of provided images\n\t\tconst defaults_remaining = this.getTypeConstant(type, TYPE_CONSTANTS.indices.NUMBER_OF_IMAGES) - thumbnails.length;\n\t\tconst default_thumbnail = {illustration: this.getTypeConstant(type, TYPE_CONSTANTS.indices.DEFAULT_IMAGE)};\n\t\tfor (let i=0; i < defaults_remaining; i++) {\n\t\t\tthumbnails.push(default_thumbnail);\n\t\t}\n\t\treturn thumbnails;\n\t}\n\n\t/**\n\t * Return the default photo entries.\n\t *\n\t * @param {string} type - The type of image constant requested (e.g. BIKE, PROFILE, etc.)\n\t * @return {List} A list of objects with the property 'illustration' that contains the uri\n\t */\n\tgetDefaultPhotos(type) {\n\t\treturn JSON.parse(JSON.stringify(this.getPhotoEntries(type)));\n\t}\n}\n\nconst FILE_EXTENSION = '.jpg';\nconst FIREBASE_URL = 'https://firebasestorage.googleapis.com';\nconst NUMBER_OF_BIKE_IMAGES = BIKE_PHOTO_ENTRIES.length;\nconst NUMBER_OF_PROFILE_IMAGES = PROFILE_PHOTO_ENTRIES.length;\n\n// Constant corresponding to property names in the TYPE_CONSTANTS object\nconst TYPE_NAMES = {\n\tBIKE: 'BIKE',\n\tPROFILE: 'PROFILE'\n}\n/*\n * The purpose of this data structure is to keep track of all the constants for different image types.\n * Different MVP components need different default images and number of images so this way we can keep track\n * of them all and keep our functions generalized.\n * To add another image type, add the name to the TYPE_NAMES object, add the corresponding string as a property\n * value in the TYPE_CONSTANTS structure and a list of the constants. Keep the list of the constants in the same\n * order as the indices indicate in the 'indices' property below.\n */\nconst TYPE_CONSTANTS = {\n\tBIKE: [\n\t\tBIKE_PHOTO_ENTRIES,\n\t\tBIKE_DEFAULT_IMAGE,\n\t\tNUMBER_OF_BIKE_IMAGES\n\t],\n\tPROFILE: [\n\t\tPROFILE_PHOTO_ENTRIES,\n\t\tPROFILE_DEFAULT_IMAGE,\n\t\tNUMBER_OF_PROFILE_IMAGES\n\t],\n\tindices: {\n\t\tPHOTO_ENTRIES: 0,\n\t\tDEFAULT_IMAGE: 1,\n\t\tNUMBER_OF_IMAGES: 2\n\t}\n}\n\nconst ImageUtil = new ImageUtility();\nexport default ImageUtil;",
    "static": true,
    "longname": "/Users/seanr/Downloads/temp/src/util/imageutility.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 906,
    "kind": "variable",
    "name": "FILE_EXTENSION",
    "memberof": "src/util/imageutility.js",
    "static": true,
    "longname": "src/util/imageutility.js~FILE_EXTENSION",
    "access": "public",
    "export": false,
    "importPath": "PedalPatrol/src/util/imageutility.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 164,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 907,
    "kind": "variable",
    "name": "FIREBASE_URL",
    "memberof": "src/util/imageutility.js",
    "static": true,
    "longname": "src/util/imageutility.js~FIREBASE_URL",
    "access": "public",
    "export": false,
    "importPath": "PedalPatrol/src/util/imageutility.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 165,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 908,
    "kind": "variable",
    "name": "NUMBER_OF_BIKE_IMAGES",
    "memberof": "src/util/imageutility.js",
    "static": true,
    "longname": "src/util/imageutility.js~NUMBER_OF_BIKE_IMAGES",
    "access": "public",
    "export": false,
    "importPath": "PedalPatrol/src/util/imageutility.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 166,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 909,
    "kind": "variable",
    "name": "NUMBER_OF_PROFILE_IMAGES",
    "memberof": "src/util/imageutility.js",
    "static": true,
    "longname": "src/util/imageutility.js~NUMBER_OF_PROFILE_IMAGES",
    "access": "public",
    "export": false,
    "importPath": "PedalPatrol/src/util/imageutility.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 167,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 910,
    "kind": "variable",
    "name": "TYPE_NAMES",
    "memberof": "src/util/imageutility.js",
    "static": true,
    "longname": "src/util/imageutility.js~TYPE_NAMES",
    "access": "public",
    "export": false,
    "importPath": "PedalPatrol/src/util/imageutility.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 170,
    "undocument": true,
    "type": {
      "types": [
        "{\"BIKE\": string, \"PROFILE\": string}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 911,
    "kind": "variable",
    "name": "TYPE_CONSTANTS",
    "memberof": "src/util/imageutility.js",
    "static": true,
    "longname": "src/util/imageutility.js~TYPE_CONSTANTS",
    "access": "public",
    "export": false,
    "importPath": "PedalPatrol/src/util/imageutility.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 182,
    "undocument": true,
    "type": {
      "types": [
        "{\"BIKE\": *, \"PROFILE\": *, \"indices\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 912,
    "kind": "class",
    "name": "ImageUtility",
    "memberof": "src/util/imageutility.js",
    "static": true,
    "longname": "src/util/imageutility.js~ImageUtility",
    "access": "public",
    "export": true,
    "importPath": "PedalPatrol/src/util/imageutility.js",
    "importStyle": null,
    "description": "Image utility class for helping with image handling. ",
    "lineNumber": 6,
    "pseudoExport": true,
    "interface": false
  },
  {
    "__docId__": 913,
    "kind": "method",
    "name": "checkNumDefaults",
    "memberof": "src/util/imageutility.js~ImageUtility",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/imageutility.js~ImageUtility#checkNumDefaults",
    "access": "public",
    "description": "Checks the number of defaults with the length of the uploaded images and the allowed number of images.",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "The type of image constant requested (e.g. BIKE, PROFILE, etc.)"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "num_defaults",
        "description": "The number of defaults found"
      },
      {
        "nullable": null,
        "types": [
          "List"
        ],
        "spread": false,
        "optional": false,
        "name": "uploaded_images",
        "description": "The list of uploaded images"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true: If the number of defaults found is conversely related to the number of uploaded images based on the allowed number of images; false: otherwise"
    }
  },
  {
    "__docId__": 914,
    "kind": "method",
    "name": "isAlreadyUploaded",
    "memberof": "src/util/imageutility.js~ImageUtility",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/imageutility.js~ImageUtility#isAlreadyUploaded",
    "access": "public",
    "description": "Checks if an image has already been uploaded by checking if it contains the firebase url.",
    "lineNumber": 26,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "image",
        "description": "An image url to check. Might be an object if image is trying to be uploaded"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true: If the image has already been uploaded; false: otherwise"
    }
  },
  {
    "__docId__": 915,
    "kind": "method",
    "name": "getTypes",
    "memberof": "src/util/imageutility.js~ImageUtility",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/imageutility.js~ImageUtility#getTypes",
    "access": "public",
    "description": "Returns the possible image types.",
    "lineNumber": 35,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "An object of strings"
    },
    "params": []
  },
  {
    "__docId__": 916,
    "kind": "method",
    "name": "getTypeConstant",
    "memberof": "src/util/imageutility.js~ImageUtility",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/imageutility.js~ImageUtility#getTypeConstant",
    "access": "public",
    "description": "Returns the constant associated with a particular image type and index.",
    "lineNumber": 46,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "The type of image constant requested (e.g. BIKE, PROFILE, etc.)"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": "The index of the constant in TYPE_CONSTANTS"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string/Number"
      ],
      "spread": false,
      "description": "The constant associated with the type and index"
    }
  },
  {
    "__docId__": 917,
    "kind": "method",
    "name": "isDefaultImage",
    "memberof": "src/util/imageutility.js~ImageUtility",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/imageutility.js~ImageUtility#isDefaultImage",
    "access": "public",
    "description": "Checks if the image is the default image for an associated type.",
    "lineNumber": 57,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "The type of image constant requested (e.g. BIKE, PROFILE, etc.)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "image",
        "description": "The url to an image"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true: if the image is the default image; false: otherwise"
    }
  },
  {
    "__docId__": 918,
    "kind": "method",
    "name": "getDefaultImage",
    "memberof": "src/util/imageutility.js~ImageUtility",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/imageutility.js~ImageUtility#getDefaultImage",
    "access": "public",
    "description": "Returns the default image for a specific image type.",
    "lineNumber": 67,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "The type of image constant requested (e.g. BIKE, PROFILE, etc.)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The default image for the image type"
    }
  },
  {
    "__docId__": 919,
    "kind": "method",
    "name": "getPhotoEntries",
    "memberof": "src/util/imageutility.js~ImageUtility",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/imageutility.js~ImageUtility#getPhotoEntries",
    "access": "public",
    "description": "Returns the photo entries.",
    "lineNumber": 77,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "The type of image constant requested (e.g. BIKE, PROFILE, etc.)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The photo entries"
    }
  },
  {
    "__docId__": 920,
    "kind": "method",
    "name": "checkImageListValid",
    "memberof": "src/util/imageutility.js~ImageUtility",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/imageutility.js~ImageUtility#checkImageListValid",
    "access": "public",
    "description": "Checks whether the image list is valid using an overly complex set of logical comparisons.\nReally not needed but all these cases came up and proved to be a problem.",
    "lineNumber": 88,
    "params": [
      {
        "nullable": null,
        "types": [
          "List"
        ],
        "spread": false,
        "optional": false,
        "name": "imagelist",
        "description": "A list of images to check"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true: If valid; false: otherwise"
    }
  },
  {
    "__docId__": 921,
    "kind": "method",
    "name": "getFileExtension",
    "memberof": "src/util/imageutility.js~ImageUtility",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/imageutility.js~ImageUtility#getFileExtension",
    "access": "public",
    "description": "Returns the defined file extension for images.",
    "lineNumber": 97,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The file extension (default '.jpg')"
    },
    "params": []
  },
  {
    "__docId__": 922,
    "kind": "method",
    "name": "checkPhotosForDefaults",
    "memberof": "src/util/imageutility.js~ImageUtility",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/imageutility.js~ImageUtility#checkPhotosForDefaults",
    "access": "public",
    "description": "Checks if all the images are default images.",
    "lineNumber": 108,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "The type of image constant requested (e.g. BIKE, PROFILE, etc.)"
      },
      {
        "nullable": null,
        "types": [
          "List"
        ],
        "spread": false,
        "optional": false,
        "name": "images",
        "description": "A list of images"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true: if all the images are the default image; false: if any one of them is not"
    }
  },
  {
    "__docId__": 923,
    "kind": "method",
    "name": "formThumbnail",
    "memberof": "src/util/imageutility.js~ImageUtility",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/imageutility.js~ImageUtility#formThumbnail",
    "access": "public",
    "description": "Forms the thumbnail into a useable list of objects.",
    "lineNumber": 125,
    "params": [
      {
        "nullable": null,
        "types": [
          "List"
        ],
        "spread": false,
        "optional": false,
        "name": "thumbnails",
        "description": "A list of thumbnails with links"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "List"
      ],
      "spread": false,
      "description": "A list of thumbnail objects with an 'illustration' property"
    }
  },
  {
    "__docId__": 924,
    "kind": "method",
    "name": "addRemainingDefaults",
    "memberof": "src/util/imageutility.js~ImageUtility",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/imageutility.js~ImageUtility#addRemainingDefaults",
    "access": "public",
    "description": "Add remaining defaults to the list of thumbnails for editing purposes.",
    "lineNumber": 143,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "The type of image constant requested (e.g. BIKE, PROFILE, etc.)"
      },
      {
        "nullable": null,
        "types": [
          "List"
        ],
        "spread": false,
        "optional": false,
        "name": "thumbnails",
        "description": "A list of thumbnails"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "List"
      ],
      "spread": false,
      "description": "A list of thumbnails of length NUMBER_OF_BIKE_IMAGES with defaults"
    }
  },
  {
    "__docId__": 925,
    "kind": "method",
    "name": "getDefaultPhotos",
    "memberof": "src/util/imageutility.js~ImageUtility",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/imageutility.js~ImageUtility#getDefaultPhotos",
    "access": "public",
    "description": "Return the default photo entries.",
    "lineNumber": 159,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "The type of image constant requested (e.g. BIKE, PROFILE, etc.)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "List"
      ],
      "spread": false,
      "description": "A list of objects with the property 'illustration' that contains the uri"
    }
  },
  {
    "__docId__": 926,
    "kind": "variable",
    "name": "ImageUtil",
    "memberof": "src/util/imageutility.js",
    "static": true,
    "longname": "src/util/imageutility.js~ImageUtil",
    "access": "public",
    "export": true,
    "importPath": "PedalPatrol/src/util/imageutility.js",
    "importStyle": "ImageUtil",
    "description": null,
    "lineNumber": 201,
    "undocument": true,
    "type": {
      "types": [
        "src/util/imageutility.js~ImageUtility"
      ]
    }
  },
  {
    "__docId__": 927,
    "kind": "file",
    "name": "src/util/notification.js",
    "content": "import React, {Component} from 'react';\nimport { Platform } from 'react-native';\n// import firebase from 'react-native-firebase';\n\n/**\n * Class for handling notifications.\n */\nclass Notification extends Component {\n\t/**\n\t * Creates an instance of Notification.\n\t * @constructor\n\t */\n\tconstructor(props){\n\t\t\tsuper(props);\n\t\t\t//firebase.initializeApp(config);\n\t\t\tthis.notification = null;\n\t}\n\n\n\t/**\n\t*  Check if user has permission to receive notification\n\t*  if has permission, then ask for a device token\n\t*  if not, rejected the request and user will not receive notification\n\t*/\n\tasync checkPermission() {\n\t\tif (Platform.OS === 'ios') {\n\t\t\treturn false;\n\t\t}\n\t\tconst enabled = await firebase.messaging().hasPermission();\n\t\t//enabled: ask firebase if user has permission to request firebase messaging\n\t\t\t\tif (enabled){\n\t\t\t\t\treturn this.getToken();\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t}\n\n\t/**\n\t*  Request a device token\n\t*/\n\tasync getToken(){\n\t\tif (Platform.OS === 'ios') {\n\t\t\treturn false;\n\t\t}\n\n\t const fcmToken = await firebase.messaging().getToken();\n        if (fcmToken) {\n            //console.log(`token is:${fcmToken}`)\n            const fcm = fcmToken;\n            const newData = {data:{}};\n            newData.data.id = AuthState.getCurrentUserID();\n            newData.data.deviceToken = fcm ;\n            console.log(fcm);\n            const prepareUpdate = newData.data;\n            Database.editProfileData(prepareUpdate, ()=>{this._callback(true)}, ()=>{this._callback(false)});\n//            Database.editProfileData(prepareUpdate, (data) => {\n//            this._callback(true);\n//            },(error) => {\n//            this._callback(false);\n//            });\n        } else {\n            // user doesn't have a device token yet\n            console.log('user doesnt have a device token yet');\n            return false;\n        }\n\t}\n\n\t/**\n\t*  Create a new channel for Android user to receive notification\n\t*/\n\tcreateChannel(){\n\t\tif (Platform.OS === 'ios') {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst channel = new firebase.notifications.Android.Channel('test-channel', 'Test Channel', firebase.notifications.Android.Importance.Max)\n\t\t\t\t\t\t.setDescription('My apps test channel');\n\t\treturn (channel);\n\t}\n\t/**\n\t *  Delete device token\n\t */\n\tasync removeToken(){\n\t\tif (Platform.OS === 'ios') {\n\t\t\treturn null;\n\t\t}\n\t\t await firebase.messaging().deleteToken();\n    const prepareUpdate = {};\n    prepareUpdate.id = AuthState.getCurrentUserID();\n    prepareUpdate.deviceToken = \"\";\n    Database.editProfileData(prepareUpdate, ()=>{this._callback(true)}, ()=>{this._callback(false)});\n\t}\n\n\tdeleteNotificationArea(){\n    const prepareUpdate = {};\n    prepareUpdate.id = AuthState.getCurrentUserID();\n    prepareUpdate.hasCircle = false;\n    Database.editProfileData(prepareUpdate, ()=>{this._callback(true)}, ()=>{this._callback(false)});\n}\n\n}\n\nconst NotificationMethod = new Notification();\nexport default NotificationMethod;",
    "static": true,
    "longname": "/Users/seanr/Downloads/temp/src/util/notification.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 928,
    "kind": "class",
    "name": "Notification",
    "memberof": "src/util/notification.js",
    "static": true,
    "longname": "src/util/notification.js~Notification",
    "access": "public",
    "export": true,
    "importPath": "PedalPatrol/src/util/notification.js",
    "importStyle": null,
    "description": "Class for handling notifications.",
    "lineNumber": 8,
    "pseudoExport": true,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 929,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/util/notification.js~Notification",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/notification.js~Notification#constructor",
    "access": "public",
    "description": "Creates an instance of Notification.",
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ]
  },
  {
    "__docId__": 930,
    "kind": "member",
    "name": "notification",
    "memberof": "src/util/notification.js~Notification",
    "static": false,
    "longname": "src/util/notification.js~Notification#notification",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 931,
    "kind": "method",
    "name": "checkPermission",
    "memberof": "src/util/notification.js~Notification",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/util/notification.js~Notification#checkPermission",
    "access": "public",
    "description": " Check if user has permission to receive notification\n if has permission, then ask for a device token\n if not, rejected the request and user will not receive notification",
    "lineNumber": 25,
    "params": [],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 932,
    "kind": "method",
    "name": "getToken",
    "memberof": "src/util/notification.js~Notification",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/util/notification.js~Notification#getToken",
    "access": "public",
    "description": " Request a device token",
    "lineNumber": 43,
    "params": [],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 933,
    "kind": "method",
    "name": "createChannel",
    "memberof": "src/util/notification.js~Notification",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/notification.js~Notification#createChannel",
    "access": "public",
    "description": " Create a new channel for Android user to receive notification",
    "lineNumber": 73,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 934,
    "kind": "method",
    "name": "removeToken",
    "memberof": "src/util/notification.js~Notification",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/util/notification.js~Notification#removeToken",
    "access": "public",
    "description": " Delete device token",
    "lineNumber": 85,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 935,
    "kind": "method",
    "name": "deleteNotificationArea",
    "memberof": "src/util/notification.js~Notification",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/notification.js~Notification#deleteNotificationArea",
    "access": "public",
    "description": null,
    "lineNumber": 96,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 936,
    "kind": "variable",
    "name": "NotificationMethod",
    "memberof": "src/util/notification.js",
    "static": true,
    "longname": "src/util/notification.js~NotificationMethod",
    "access": "public",
    "export": true,
    "importPath": "PedalPatrol/src/util/notification.js",
    "importStyle": "NotificationMethod",
    "description": null,
    "lineNumber": 106,
    "undocument": true,
    "type": {
      "types": [
        "src/util/notification.js~Notification"
      ]
    }
  },
  {
    "__docId__": 937,
    "kind": "file",
    "name": "src/util/observerlist.js",
    "content": "/**\n * @deprecated Use Model.js instead as it uses RxJs now.\n * Class for observer list to facilitate observing\n */\nclass ObserverList {\n\t/**\n\t * @deprecated \n\t * Creates an instance of an ObserverList, initializing the observers as empty.\n\t *\n\t * @constructor\n\t * @author Sean\n\t * @this {ObserverList}\n\t */\n\tconstructor() {\n\t\tthis.observers = [];\n\t}\n\n\t/**\n\t * @deprecated \n\t * Adds an observer to the observers list.\n\t * \n\t * @param {Object} observer - An observer class\n\t * @return {Number} The length of the new list\n\t */\n\tadd = (observer) => {\n\t\treturn this.observers.push(observer);\n\t}\n\n\t/**\n\t * @deprecated \n\t * Removes an object at a certain index or an observer \n\t * \n\t * @param {Object} observer - An observer to remove\n\t */\n\tremove = (observer) => {\n\t\tlet newObservers = [];\n\t\tfor (let i=0; i < this.observers.length; i++) {\n\t\t\tif (this.observers[i] != observer) {\n\t\t\t\tnewObservers.push(this.observers[i]);\n\t\t\t}\n\t\t}\n\t\tthis.observers = {...newObservers};\n\t\tif (newObservers.length === 0) {\n\t\t\tthis.observers = [];\n\t\t}\n\n\t\t// this.observers = this._deepCopy(this.observers.filter(obs => obs != observer));\n\t}\n\n\t/**\n\t * @deprecated \n\t * Removes an observer at the specified index. Returns if the index is greater than the length\n\t * of the array. \n\t * \n\t * @param {Number} index - An index to remove the observer at\n\t * @return {Boolean} true: if the observer was removed (index is less than the number of observers); false: otherwise\n\t */\n\tremoveIndex = (index) => {\n\t\tthis.observers.splice(index, 1);\n\t\treturn index > this.count();\n\t}\n\n\t/**\n\t * @deprecated \n\t * Returns the number of observers in the list.\n\t * \n\t * @return {Number} The number of observers\n\t */\n\tcount = () => {\n\t\treturn this.observers.length;\n\t}\n\n\t/**\n\t * @deprecated \n\t * Checks if a class is an observer.\n\t * \n\t * @param {Object} A class to check\n\t * @return {Boolean} true: if the observer is exists in the list; false: otherwise\n\t */\n\texists = (objectClass) => {\n\t\tlet i = 0;\n\t\twhile (i < this.observers.length) {\n\t\t\tif (this.observers[i] == objectClass) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * @deprecated \n\t * Get an observer at a certain index.\n\t *\n\t * @param {Number} index - An index in the observer list\n\t * @return {Object} An observer class object\n\t */\n\tget = (index) => {\n\t\treturn this.observers[index];\n\t}\n\n\t/**\n\t * @deprecated \n\t * Returns a deep copy of the array by reassigning the values. This is to make sure we can clear the data.\n\t *\n\t * @return {List} A list to copy\n\t */\n\t_deepCopy = (array) => {\n\t\treturn array.map(a => Object.assign({}, a));\n\t}\n}\n\nexport default ObserverList;",
    "static": true,
    "longname": "/Users/seanr/Downloads/temp/src/util/observerlist.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 938,
    "kind": "class",
    "name": "ObserverList",
    "memberof": "src/util/observerlist.js",
    "static": true,
    "longname": "src/util/observerlist.js~ObserverList",
    "access": "public",
    "export": true,
    "importPath": "PedalPatrol/src/util/observerlist.js",
    "importStyle": "ObserverList",
    "description": "",
    "lineNumber": 5,
    "deprecated": "Use Model.js instead as it uses RxJs now.\nClass for observer list to facilitate observing",
    "interface": false
  },
  {
    "__docId__": 939,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/util/observerlist.js~ObserverList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/observerlist.js~ObserverList#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 14,
    "deprecated": "Creates an instance of an ObserverList, initializing the observers as empty.",
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      },
      {
        "tagName": "@author",
        "tagValue": "Sean"
      },
      {
        "tagName": "@this",
        "tagValue": "{ObserverList}"
      }
    ]
  },
  {
    "__docId__": 940,
    "kind": "member",
    "name": "observers",
    "memberof": "src/util/observerlist.js~ObserverList",
    "static": false,
    "longname": "src/util/observerlist.js~ObserverList#observers",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 941,
    "kind": "member",
    "name": "add",
    "memberof": "src/util/observerlist.js~ObserverList",
    "static": false,
    "longname": "src/util/observerlist.js~ObserverList#add",
    "access": "public",
    "description": "",
    "lineNumber": 25,
    "deprecated": "Adds an observer to the observers list.",
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "observer",
        "description": "An observer class"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "The length of the new list"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 942,
    "kind": "member",
    "name": "remove",
    "memberof": "src/util/observerlist.js~ObserverList",
    "static": false,
    "longname": "src/util/observerlist.js~ObserverList#remove",
    "access": "public",
    "description": "",
    "lineNumber": 35,
    "deprecated": "Removes an object at a certain index or an observer ",
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "observer",
        "description": "An observer to remove"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 945,
    "kind": "member",
    "name": "removeIndex",
    "memberof": "src/util/observerlist.js~ObserverList",
    "static": false,
    "longname": "src/util/observerlist.js~ObserverList#removeIndex",
    "access": "public",
    "description": "",
    "lineNumber": 58,
    "deprecated": "Removes an observer at the specified index. Returns if the index is greater than the length\nof the array. ",
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": "An index to remove the observer at"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true: if the observer was removed (index is less than the number of observers); false: otherwise"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 946,
    "kind": "member",
    "name": "count",
    "memberof": "src/util/observerlist.js~ObserverList",
    "static": false,
    "longname": "src/util/observerlist.js~ObserverList#count",
    "access": "public",
    "description": "",
    "lineNumber": 69,
    "deprecated": "Returns the number of observers in the list.",
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "The number of observers"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 947,
    "kind": "member",
    "name": "exists",
    "memberof": "src/util/observerlist.js~ObserverList",
    "static": false,
    "longname": "src/util/observerlist.js~ObserverList#exists",
    "access": "public",
    "description": "",
    "lineNumber": 80,
    "deprecated": "Checks if a class is an observer.",
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "A",
        "description": "class to check"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true: if the observer is exists in the list; false: otherwise"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 948,
    "kind": "member",
    "name": "get",
    "memberof": "src/util/observerlist.js~ObserverList",
    "static": false,
    "longname": "src/util/observerlist.js~ObserverList#get",
    "access": "public",
    "description": "",
    "lineNumber": 98,
    "deprecated": "Get an observer at a certain index.",
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": "An index in the observer list"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "An observer class object"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 949,
    "kind": "member",
    "name": "_deepCopy",
    "memberof": "src/util/observerlist.js~ObserverList",
    "static": false,
    "longname": "src/util/observerlist.js~ObserverList#_deepCopy",
    "access": "private",
    "description": "",
    "lineNumber": 108,
    "deprecated": "Returns a deep copy of the array by reassigning the values. This is to make sure we can clear the data.",
    "return": {
      "nullable": null,
      "types": [
        "List"
      ],
      "spread": false,
      "description": "A list to copy"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 950,
    "kind": "file",
    "name": "src/util/persistentstorage.js",
    "content": "import React, { Component } from 'react';\nimport { AsyncStorage } from 'react-native';\n\n/**\n * Class for the persistent storage of data on a device using ASyncStorage.\n * @extends Component\n */\nclass PersistentStorage extends Component {\n\t/**\n\t * Creates an instance of AuthLoadingView\n\t *\n\t * @constructor\n\t * @param {Object} props - Component properties\n\t */\n\tconstructor(props) {\n\t\tsuper(props);\n\t}\n\n\t/**\n\t * Stores key, data using AsyncStorage to the device.\n\t *\n\t * @param {string} key - A key to store data with\n\t * @param {string/Number} value - A value to store (can be string or number)\n\t * @param onError - An error callback to call if there's an error while storing data\n\t */\n\tasync storeData(key, value, onError) {\n\t\tif (this.checkValid(key) && this.checkValid(value)) {\n\t\t\ttry {\n\t\t\t\tawait AsyncStorage.setItem(key, value);\n\t\t\t} catch (error) {\n\t\t\t\tonError(error);\n\t\t\t}\n\t\t} else {\n\t\t\tonError('Key or Value is undefined or null');\n\t\t}\n\t}\n\n\t/**\n\t * Checks if the parameter passed in is valid.\n\t *\n\t * @param {string} val - A value to check\n\t * @return {Boolean} true: Value is valid; false: Value is invalid\n\t */\n\tcheckValid(val) {\n\t\treturn val != undefined && val != null;\n\t}\n\n\t/**\n\t * Retrieves data from AsyncStorage and calls the success callback with the value.\n\t *\n\t * @param {string} key - A key to fetch the data for\n\t * @param {Function} onSuccess - A success callback to process the data\n\t * @param {Function} onError - A failure callback to call if an error occurs\n\t */\n\tasync retrieveData(key, onSuccess, onError) {\n\t\tif (this.checkValid(key)) {\n\t\t\ttry {\n\t\t\t\tconst value = await AsyncStorage.getItem(key);\n\t\t\t\tonSuccess(value); // Let someone else deal with the logic of it being null or not\n\t\t\t} catch (error) {\n\t\t\t\tonError(error);\n\t\t\t}\n\t\t} else {\n\t\t\tonError('Key is undefined or null')\n\t\t}\n\t}\n\n\t/**\n\t * Removes an item from the persistent storage.\n\t *\n\t * @param {string} key - The key for an item that should be removed\n\t * @param {Function} onError - A failure callback if an error occurs\n\t */\n\tasync removeData(key, onError) {\n\t\tif (this.checkValid(key)) {\n\t\t\ttry {\n\t\t\t\tawait AsyncStorage.removeItem(key);\n\t\t\t} catch (error) {\n\t\t\t\tonError(error);\n\t\t\t}\n\t\t} else {\n\t\t\tonError('Key is undefined or null');\n\t\t}\n\t}\n\n\t/**\n\t * Get all the stored keys.\n\t *\n\t * @param {Function} onComplete - A callback function to call with an array of keys and an error if it failed. onComplete(error, keys)\n\t */\n\tasync getAllStoredKeys(onComplete) {\n\t\tawait AsyncStorage.getAllKeys(onComplete);\n\t}\n\n\t/**\n\t * Removes all stored keys in the AsyncStorage.\n\t *\n\t * @param {List} keepKeys - A list of keys as strings to keep in local storage.\n\t * @param {Function} onSuccess - A callback function to call if all keys were successfully removed.\n\t * @param {Function} onError - A callback function to call if one or more keys threw an error when being removed.\n\t */\n\tasync removeAllData(keepKeys, onSuccess, onError) {\n\t\tthis.getAllStoredKeys(async (error, keys) => {\n\t\t\tkeys = keys.filter( ( el ) => !keepKeys.includes(el));\n\t\t\tawait AsyncStorage.multiRemove(keys, (err) => {\n\t\t\t\tif (err == null) {\n\t\t\t\t\tconst message = keepKeys.length === 0 ? '' : \"- Except: \" + (keepKeys.length === 1 ? keepKeys : keepKeys.join(', '));\n\t\t\t\t\tonSuccess(message);\n\t\t\t\t} else {\n\t\t\t\t\tconsole.log(err);\n\t\t\t\t\tonError(err);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n}\n\nconst PersistStorage = new PersistentStorage();\nexport default PersistStorage;",
    "static": true,
    "longname": "/Users/seanr/Downloads/temp/src/util/persistentstorage.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 951,
    "kind": "class",
    "name": "PersistentStorage",
    "memberof": "src/util/persistentstorage.js",
    "static": true,
    "longname": "src/util/persistentstorage.js~PersistentStorage",
    "access": "public",
    "export": true,
    "importPath": "PedalPatrol/src/util/persistentstorage.js",
    "importStyle": null,
    "description": "Class for the persistent storage of data on a device using ASyncStorage.",
    "lineNumber": 8,
    "pseudoExport": true,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 952,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/util/persistentstorage.js~PersistentStorage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/persistentstorage.js~PersistentStorage#constructor",
    "access": "public",
    "description": "Creates an instance of AuthLoadingView",
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "Component properties"
      }
    ]
  },
  {
    "__docId__": 953,
    "kind": "method",
    "name": "storeData",
    "memberof": "src/util/persistentstorage.js~PersistentStorage",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/util/persistentstorage.js~PersistentStorage#storeData",
    "access": "public",
    "description": "Stores key, data using AsyncStorage to the device.",
    "lineNumber": 26,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "A key to store data with"
      },
      {
        "nullable": null,
        "types": [
          "string/Number"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "A value to store (can be string or number)"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "onError",
        "description": "An error callback to call if there's an error while storing data"
      }
    ],
    "return": null
  },
  {
    "__docId__": 954,
    "kind": "method",
    "name": "checkValid",
    "memberof": "src/util/persistentstorage.js~PersistentStorage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/persistentstorage.js~PersistentStorage#checkValid",
    "access": "public",
    "description": "Checks if the parameter passed in is valid.",
    "lineNumber": 44,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "val",
        "description": "A value to check"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true: Value is valid; false: Value is invalid"
    }
  },
  {
    "__docId__": 955,
    "kind": "method",
    "name": "retrieveData",
    "memberof": "src/util/persistentstorage.js~PersistentStorage",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/util/persistentstorage.js~PersistentStorage#retrieveData",
    "access": "public",
    "description": "Retrieves data from AsyncStorage and calls the success callback with the value.",
    "lineNumber": 55,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "A key to fetch the data for"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "onSuccess",
        "description": "A success callback to process the data"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "onError",
        "description": "A failure callback to call if an error occurs"
      }
    ],
    "return": null
  },
  {
    "__docId__": 956,
    "kind": "method",
    "name": "removeData",
    "memberof": "src/util/persistentstorage.js~PersistentStorage",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/util/persistentstorage.js~PersistentStorage#removeData",
    "access": "public",
    "description": "Removes an item from the persistent storage.",
    "lineNumber": 74,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "The key for an item that should be removed"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "onError",
        "description": "A failure callback if an error occurs"
      }
    ],
    "return": null
  },
  {
    "__docId__": 957,
    "kind": "method",
    "name": "getAllStoredKeys",
    "memberof": "src/util/persistentstorage.js~PersistentStorage",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/util/persistentstorage.js~PersistentStorage#getAllStoredKeys",
    "access": "public",
    "description": "Get all the stored keys.",
    "lineNumber": 91,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "onComplete",
        "description": "A callback function to call with an array of keys and an error if it failed. onComplete(error, keys)"
      }
    ],
    "return": null
  },
  {
    "__docId__": 958,
    "kind": "method",
    "name": "removeAllData",
    "memberof": "src/util/persistentstorage.js~PersistentStorage",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/util/persistentstorage.js~PersistentStorage#removeAllData",
    "access": "public",
    "description": "Removes all stored keys in the AsyncStorage.",
    "lineNumber": 102,
    "params": [
      {
        "nullable": null,
        "types": [
          "List"
        ],
        "spread": false,
        "optional": false,
        "name": "keepKeys",
        "description": "A list of keys as strings to keep in local storage."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "onSuccess",
        "description": "A callback function to call if all keys were successfully removed."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "onError",
        "description": "A callback function to call if one or more keys threw an error when being removed."
      }
    ],
    "return": null
  },
  {
    "__docId__": 959,
    "kind": "variable",
    "name": "PersistStorage",
    "memberof": "src/util/persistentstorage.js",
    "static": true,
    "longname": "src/util/persistentstorage.js~PersistStorage",
    "access": "public",
    "export": true,
    "importPath": "PedalPatrol/src/util/persistentstorage.js",
    "importStyle": "PersistStorage",
    "description": null,
    "lineNumber": 119,
    "undocument": true,
    "type": {
      "types": [
        "src/util/persistentstorage.js~PersistentStorage"
      ]
    }
  },
  {
    "__docId__": 960,
    "kind": "file",
    "name": "src/util/timeutility.js",
    "content": "/**\n * Utility class for time functions.\n */\nclass TimeUtility {\n\t/**\n\t * Returns the milliseconds time formatted as 'HH:MM - DD/MM/YY'.\n\t *\n\t * @param {Number} datetime - The time in milliseconds\n\t * @return {string} Milliseconds represented as a string\n\t */\n\tgetDateFormatFromDateTime(datetime) {\n\t\tlet converted = new Date(datetime);\n\t\tlet date = converted.getDate() + '/' + (converted.getMonth()+1) + '/' + converted.getFullYear();\n\t\tconst hours = converted.getHours();\n\t\tconst minutes = converted.getMinutes();\n\t\tlet time = (hours > 9 ? hours : '0' + hours) + \":\" + (minutes > 9 ? minutes : '0' + minutes);\n\t\tlet dateTime = time + ' - ' + date;\n\t\treturn dateTime\n\t}\n\n\t/**\n\t * Returns millisecond time as a time ago string (# __ ago).\n\t *\n\t * @param {Number} milliseconds - The time in milliseconds\n\t * @return {string} The millisecond time represented as a string\n\t */\n\tgetTimeAgoFromMilliseconds(milliseconds) {\n\t\tconst currentTime = new Date();\n\t\t\n\t\tlet time = this.parseMillisecondsIntoReadableTime(currentTime-milliseconds);\n\n\t\tlet parsetime = time.split(':');\n\t\tlet suffix = '';\n\t\tlet outtime = '';\n\n\t\tconst hours = parseInt(parsetime[0]);\n\t\tconst minutes = parseInt(parsetime[1]);\n\t\tconst seconds = parseInt(parsetime[2]);\n\n\t\t// console.log(hours, minutes, seconds);\n\n\t\t// Probably could make more concise\n\t\tif (hours >= 24) {\n\t\t\touttime = Math.floor(hours/24); // Round to days\n\t\t\tsuffix = 'd';\n\n\t\t\tif (outtime >= 30 && outtime < 365) { // 30 days - 365 days\n\t\t\t\touttime = Math.floor(outtime/30); // Round to months\n\t\t\t\tsuffix = 'mo';\n\t\t\t} else if (outtime >= 365) { // > 365 days\n\t\t\t\touttime = Math.floor(outtime/365); // Round to years\n\t\t\t\tsuffix = 'yr';\n\t\t\t}\n\n\t\t} else if (hours > 0) {\n\t\t\touttime = hours;\n\t\t\tsuffix = 'hr';\n\n\t\t} else {\n\t\t\tif (minutes > 0) {\n\t\t\t\touttime = minutes;\n\t\t\t\tsuffix = outtime === 1 ? ' min' : ' mins';\n\t\t\t} else {\n\t\t\t\touttime = seconds;\n\t\t\t\tsuffix = 's';\n\t\t\t}\n\t\t}\n\n\t\treturn outtime + suffix;\n\t}\n\n\t/**\n\t * Returns the milliseconds time as readable time (HH:MM:SS)\n\t *\n\t * @param {Number} milliseconds - The time in milliseconds\n\t * @return {string} Milliseconds formatted to time\n\t */\n\tparseMillisecondsIntoReadableTime(milliseconds){\n\t\t//  Get hours from milliseconds\n\t\tlet hours = milliseconds / (1000*60*60);\n\t\tlet absoluteHours = Math.floor(hours);\n\t\tlet h = absoluteHours > 9 ? absoluteHours : '0' + absoluteHours;\n\n\t\t// Get remainder from hours and convert to minutes\n\t\tlet minutes = (hours - absoluteHours) * 60;\n\t\tlet absoluteMinutes = Math.floor(minutes);\n\t\tlet m = absoluteMinutes > 9 ? absoluteMinutes : '0' +  absoluteMinutes;\n\n\t\t// Get remainder from minutes and convert to seconds\n\t\tlet seconds = (minutes - absoluteMinutes) * 60;\n\t\tlet absoluteSeconds = Math.floor(seconds);\n\t\tlet s = absoluteSeconds > 9 ? absoluteSeconds : '0' + absoluteSeconds;\n\n\t\treturn h + ':' + m + ':' + s;\n\t}\n\n\t/**\n\t * Quick sorts the data based on the timeago property. Arguably faster than using the built in sort function\n\t * with a custom compare function.\n\t *\n\t * @param {List} data - Unsorted object data with a timeago property\n\t * @return {List} Sorted data\n\t */\n\tsortOnTime(data) {\n\t\tif (data.length <= 1) {\n\t\t\treturn data;\n\t\t}\n\n\t\tlet pivot = data[0];\n\n\t\tlet left = []; \n\t\tlet right = [];\n\n\t\tfor (let i = 1; i < data.length; i++) {\n\t\t\tdata[i].milliseconds < pivot.milliseconds ? left.push(data[i]) : right.push(data[i]);\n\t\t}\n\n\t\treturn this.sortOnTime(left).concat(pivot, this.sortOnTime(right));\n\t};\n\n\t/**\n\t * Returns the current date and time in milliseconds.\n\t * \n\t * @return {Number} The date and time in milliseconds\n\t */\n\tgetDateTime() {\n\t\treturn (new Date()).getTime();\n\t}\n}\n\nconst TimeUtil = new TimeUtility();\nexport default TimeUtil;",
    "static": true,
    "longname": "/Users/seanr/Downloads/temp/src/util/timeutility.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 961,
    "kind": "class",
    "name": "TimeUtility",
    "memberof": "src/util/timeutility.js",
    "static": true,
    "longname": "src/util/timeutility.js~TimeUtility",
    "access": "public",
    "export": true,
    "importPath": "PedalPatrol/src/util/timeutility.js",
    "importStyle": null,
    "description": "Utility class for time functions.",
    "lineNumber": 4,
    "pseudoExport": true,
    "interface": false
  },
  {
    "__docId__": 962,
    "kind": "method",
    "name": "getDateFormatFromDateTime",
    "memberof": "src/util/timeutility.js~TimeUtility",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/timeutility.js~TimeUtility#getDateFormatFromDateTime",
    "access": "public",
    "description": "Returns the milliseconds time formatted as 'HH:MM - DD/MM/YY'.",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "datetime",
        "description": "The time in milliseconds"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Milliseconds represented as a string"
    }
  },
  {
    "__docId__": 963,
    "kind": "method",
    "name": "getTimeAgoFromMilliseconds",
    "memberof": "src/util/timeutility.js~TimeUtility",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/timeutility.js~TimeUtility#getTimeAgoFromMilliseconds",
    "access": "public",
    "description": "Returns millisecond time as a time ago string (# __ ago).",
    "lineNumber": 27,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "milliseconds",
        "description": "The time in milliseconds"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The millisecond time represented as a string"
    }
  },
  {
    "__docId__": 964,
    "kind": "method",
    "name": "parseMillisecondsIntoReadableTime",
    "memberof": "src/util/timeutility.js~TimeUtility",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/timeutility.js~TimeUtility#parseMillisecondsIntoReadableTime",
    "access": "public",
    "description": "Returns the milliseconds time as readable time (HH:MM:SS)",
    "lineNumber": 78,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "milliseconds",
        "description": "The time in milliseconds"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Milliseconds formatted to time"
    }
  },
  {
    "__docId__": 965,
    "kind": "method",
    "name": "sortOnTime",
    "memberof": "src/util/timeutility.js~TimeUtility",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/timeutility.js~TimeUtility#sortOnTime",
    "access": "public",
    "description": "Quick sorts the data based on the timeago property. Arguably faster than using the built in sort function\nwith a custom compare function.",
    "lineNumber": 104,
    "params": [
      {
        "nullable": null,
        "types": [
          "List"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Unsorted object data with a timeago property"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "List"
      ],
      "spread": false,
      "description": "Sorted data"
    }
  },
  {
    "__docId__": 966,
    "kind": "method",
    "name": "getDateTime",
    "memberof": "src/util/timeutility.js~TimeUtility",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/timeutility.js~TimeUtility#getDateTime",
    "access": "public",
    "description": "Returns the current date and time in milliseconds.",
    "lineNumber": 126,
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "The date and time in milliseconds"
    },
    "params": []
  },
  {
    "__docId__": 967,
    "kind": "variable",
    "name": "TimeUtil",
    "memberof": "src/util/timeutility.js",
    "static": true,
    "longname": "src/util/timeutility.js~TimeUtil",
    "access": "public",
    "export": true,
    "importPath": "PedalPatrol/src/util/timeutility.js",
    "importStyle": "TimeUtil",
    "description": null,
    "lineNumber": 132,
    "undocument": true,
    "type": {
      "types": [
        "src/util/timeutility.js~TimeUtility"
      ]
    }
  },
  {
    "kind": "index",
    "content": "<h1 align=\"center\">\n  <a href=\"https://pedalpatrol.github.io/PedalPatrol\">\n    Pedal Patrol\n  </a>\n</h1>\n\n<p align=\"center\">\n    Crowdsourcing the retrieval of stolen bikes.<br>\n</p>\n\n\n<p align=\"center\">\n  <a href=\"https://travis-ci.org/PedalPatrol/PedalPatrol\"><img src=\"https://travis-ci.org/PedalPatrol/PedalPatrol.svg?branch=master\"></a>\n  <a href='https://coveralls.io/github/PedalPatrol/PedalPatrol?branch=master'><img src='https://coveralls.io/repos/github/PedalPatrol/PedalPatrol/badge.svg?branch=master' alt='Coverage Status' /></a>\n</p>\n\nDevelopment of the PedalPatrol iOS and Android application.\n\n## Table of Contents\n1. [Installation](#installation)\n2. [Setup](#setup) </br>\n3. [Running](#running) </br>\n 3.1 [Android](#android) </br>\n 3.2 [iOS](#ios) </br>\n4. [Tests](#tests)\n\n## Installation <a name=\"installation\"></a>\n1. Clone the github repository.\n```\ngit clone https://github.com/PedalPatrol/PedalPatrol.git\n```\n2. Move into the Pedal Patrol directory with the package.json file.\n```\ncd PedalPatrol/PedalPatrol\n```\n3. Install the dependencies.\n```\nnpm install\n```\n4. Run the setup script to setup any dependencies properly.\n```\nnpm run setup\n```\n\n## Setup <a name=\"setup\"></a>\n1. Add your Google Maps API key to PedalPatrol/android/app/src/main/AndroidManifest.xml to the meta-data for key \"com.google.android.geo.API_KEY\"\n```\n...\n    <meta-data\n        android:name=\"com.google.android.geo.API_KEY\"\n        android:value=\"--YOUR-API-KEY--\"/>\n</application>\n```\n2. Obtain the config details for your Firebase project from https://console.firebase.google.com and include them in the databaseConfig object in PedalPatrol/src/config/config.json\n3. In the iOS app on Firebase, download the GoogleServices-Info.plist and store it in PedalPatrol/ios. Add the file to the ios project if it is not already included by right clicking on the project name and clicking \"Add Files to PedalPatrol\".\n4. To setup for iOS run the following command:\n```\nnpm run setup:ios\n```\n\n## Running <a name=\"running\"></a>\n### Android <a name=\"android\"></a>\n#### Emulator\n1. Start an emulator either from the command line or from Android Studio.\nMacOS\n```\n~/Library/Android/sdk/emulator/emulator -avd EMULATOR_NAME\n```\nWindows\n```\nC:/Documents/user/Library/Android/sdk/emulator/emulator -avd EMULATOR_NAME\n```\n2. Building and Running - For more information on debugging see: https://facebook.github.io/react-native/docs/debugging\n2.1 Debugging and output on command line - The app can be debugged from the command line by running the following command:\n```\nreact-native log-android\n```\n2.2 Debugging and output in browser - The app can be debugged from Google Chrome or another browser by running the following command:\n```\nreact-native run-android\n```\n#### Physical Device\n1. Follow the steps [here](https://facebook.github.io/react-native/docs/running-on-device) to setup running on a physical device.\n2. Run any of the above commands to run on android.\n\n### iOS <a name=\"ios\"></a>\n#### Emulator\n1. Building and Running - Run the following command to debug on an emulator:\n```\nreact-native run-ios\n```\nNote 1: Only MacOS computers with Xcodebuild tools and Xcode can build and run the iOS app.\nNote 2: react-native log-ios does not currently work on the version of react-native that is used in PedalPatrol.\nNote 3: The default ios emulator device is an iPhone X. The emulator used can be changed using the following command (example using iPhone 8):\n```\nreact-native run-ios --simulator=\"iPhone 8\"\n```\n#### Physical Device\n1. Follow the steps [here](https://facebook.github.io/react-native/docs/running-on-device) to setup running on a physical device.\n2. Run the following command:\n```\nreact-native run-ios --device\n```\nor\n```\nreact-native run-ios --device \"NAME_OF_CONNECTED_DEVICE\"\n```\n\n## Tests <a name=\"tests\"></a>\nTests are facilitated by the Jest tool and can be found in PedalPatrol/test. The folder structure of the tests is the same as in PedalPatorl/src. Tests are automatically run with the --silent flag on.\nTo run the tests run the following command from PedalPatrol/PedalPatrol:\n```\nnpm test\n```\n",
    "longname": "/Users/seanr/Downloads/temp/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"PedalPatrol\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"scripts\": {\n    \"start\": \"node node_modules/react-native/local-cli/cli.js start\",\n    \"test\": \"jest --silent\",\n    \"test:coverage\": \"jest --silent --coverage\",\n    \"test:watch\": \"npm test -- --watch\",\n    \"coverage\": \"jest --silent --coverage && cat ./coverage/lcov.info | coveralls\",\n    \"setup\": \"npm run add-ant && npm run rmTwitterRN\",\n    \"setup:ios\": \"cd ios && pod install\",\n    \"add-ant\": \"cp src/util/AntDesign.js node_modules/react-native-vector-icons/ && cp src/util/AntDesign.json node_modules/react-native-vector-icons/glyphmaps/\",\n    \"rmTwitterRN\": \"rm -rf node_modules/react-native-twitter-signin/node_modules/react-native/\",\n    \"reset-build\": \"rm -rf node_modules/ && npm install && react-native upgrade && react-native link\",\n    \"docs\": \"npm run docs:esdoc\",\n    \"docs:esdoc\": \"esdoc\",\n    \"docs:documentation\": \"documentation build src/components/views/** -f html -o view-docs --shallow --config documentation.yml\",\n    \"build:ios\": \"react-native bundle --entry-file='index.js' --bundle-output='./ios/PedalPatrol/main.jsbundle' --dev=false --platform='ios' --assets-dest='./ios'\"\n  },\n  \"dependencies\": {\n    \"async-lock\": \"^1.1.4\",\n    \"firebase\": \"^5.8.5\",\n    \"prop-types\": \"^15.6.2\",\n    \"react\": \"^16.6.3\",\n    \"react-devtools\": \"^3.6.0\",\n    \"react-native\": \"^0.58.6\",\n    \"react-native-badge-avatar\": \"^1.1.2\",\n    \"react-native-circular-action-menu\": \"^0.5.0\",\n    \"react-native-drawer\": \"^2.5.1\",\n    \"react-native-elements\": \"^1.0.0-beta7\",\n    \"react-native-fbsdk\": \"^0.8.0\",\n    \"react-native-gesture-handler\": \"^1.0.16\",\n    \"react-native-google-places-autocomplete\": \"^1.3.9\",\n    \"react-native-image-picker\": \"^0.28.0\",\n    \"react-native-map-link\": \"^2.2.1\",\n    \"react-native-maps\": \"0.23.0\",\n    \"react-native-material-textfield\": \"^0.12.0\",\n    \"react-native-modal-dropdown\": \"^0.6.2\",\n    \"react-native-nested-listview\": \"^0.6.0\",\n    \"react-native-paper\": \"^2.15.0\",\n    \"react-native-render-html\": \"^4.1.2\",\n    \"react-native-sectioned-multi-select\": \"^0.6.4\",\n    \"react-native-settings-list\": \"^1.8.0\",\n    \"react-native-snap-carousel\": \"^3.7.5\",\n    \"react-native-twitter-signin\": \"^1.1.1\",\n    \"react-native-vector-icons\": \"^4.6.0\",\n    \"react-navigation\": \"^3.0.9\",\n    \"rxjs\": \"^6.4.0\",\n    \"webpack\": \"^4.0.0\"\n  },\n  \"devDependencies\": {\n    \"@babel/core\": \"^7.4.0\",\n    \"@babel/plugin-proposal-class-properties\": \"^7.4.0\",\n    \"@babel/plugin-proposal-object-rest-spread\": \"^7.4.0\",\n    \"@babel/plugin-transform-runtime\": \"^7.2.0\",\n    \"@babel/polyfill\": \"^7.4.0\",\n    \"@babel/preset-env\": \"^7.4.2\",\n    \"@babel/preset-react\": \"^7.0.0\",\n    \"@babel/preset-stage-0\": \"^7.0.0\",\n    \"@babel/register\": \"^7.0.0\",\n    \"@babel/runtime\": \"^7.3.1\",\n    \"babel-cli\": \"^6.26.0\",\n    \"babel-jest\": \"^24.1.0\",\n    \"babel-loader\": \"^8.0.5\",\n    \"babel-minify-webpack-plugin\": \"^0.2.0\",\n    \"babel-plugin-react-native-web\": \"^0.11.2\",\n    \"babel-plugin-root-import\": \"^6.1.0\",\n    \"babel-plugin-transform-class-properties\": \"^6.24.1\",\n    \"coveralls\": \"^3.0.3\",\n    \"documentation\": \"^9.3.0\",\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-ecmascript-proposal-plugin\": \"^1.0.0\",\n    \"esdoc-external-ecmascript-plugin\": \"^1.0.0\",\n    \"esdoc-external-nodejs-plugin\": \"^1.0.0\",\n    \"esdoc-jsx-plugin\": \"^1.0.0\",\n    \"esdoc-react-plugin\": \"^1.0.1\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"file-loader\": \"^3.0.1\",\n    \"jest\": \"^24.1.0\",\n    \"metro-react-native-babel-preset\": \"^0.51.1\",\n    \"react-art\": \"^16.8.6\",\n    \"react-dom\": \"^16.8.6\",\n    \"react-test-renderer\": \"16.6.3\",\n    \"typescript\": \"^3.3.3333\"\n  },\n  \"jest\": {\n    \"preset\": \"react-native\"\n  },\n  \"babel\": {\n    \"presets\": [\n      \"module:metro-react-native-babel-preset\",\n      \"@babel/preset-env\",\n      \"@babel/preset-react\"\n    ],\n    \"plugins\": [\n      [\n        \"babel-plugin-root-import\",\n        {\n          \"rootPathPrefix\": \"@\"\n        }\n      ],\n      \"@babel/plugin-proposal-class-properties\"\n    ]\n  },\n  \"esdoc\": {\n    \"source\": \"./src\",\n    \"destination\": \"./docs\",\n    \"includes\": [\n      \"\\\\.js$\"\n    ],\n    \"excludes\": [\n      \"\\\\.json\\\\.config\\\\.js$\",\n      \"(export-models|entries|navigation|AntDesign).js\",\n      \"(stylesheets|imagehelpers|ActionButton)\"\n    ],\n    \"index\": \"./README.md\",\n    \"plugins\": [\n      {\n        \"name\": \"esdoc-standard-plugin\",\n        \"option\": {\n          \"lint\": {\n            \"enable\": true\n          },\n          \"coverage\": {\n            \"enable\": true\n          },\n          \"typeInference\": {\n            \"enable\": true\n          },\n          \"undocumentIdentifier\": {\n            \"enable\": true\n          },\n          \"unexportedIdentifier\": {\n            \"enable\": false\n          },\n          \"brand\": {\n            \"logo\": \"./src/assets/images/ppInvertedLogo.png\",\n            \"title\": \"PedalPatrol\",\n            \"description\": \"A cross-platform mobile application for crowdsourcing the retrieval of stolen bikes.\",\n            \"repository\": \"https://github.com/PedalPatrol/PedalPatrol\",\n            \"site\": \"http://my-library.org\",\n            \"author\": \"https://twitter.com/foo\",\n            \"image\": \"http://my-library.org/logo.png\"\n          }\n        }\n      },\n      {\n        \"name\": \"esdoc-ecmascript-proposal-plugin\",\n        \"option\": {\n          \"all\": true\n        }\n      },\n      {\n        \"name\": \"esdoc-react-plugin\"\n      },\n      {\n        \"name\": \"esdoc-external-ecmascript-plugin\",\n        \"option\": {\n          \"enable\": true\n        }\n      },\n      {\n        \"name\": \"esdoc-external-nodejs-plugin\",\n        \"option\": {\n          \"enable\": true\n        }\n      }\n    ]\n  }\n}\n",
    "longname": "/Users/seanr/Downloads/temp/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]